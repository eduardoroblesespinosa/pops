/******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "cefe2b43bebc199ca73f"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _toConsumableArray2 = __webpack_require__(1);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _svg4everybody = __webpack_require__(55);
	
	var _svg4everybody2 = _interopRequireDefault(_svg4everybody);
	
	var _jquery = __webpack_require__(56);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	__webpack_require__(59);
	
	__webpack_require__(60);
	
	__webpack_require__(61);
	
	var _resizeIndexScreen = __webpack_require__(86);
	
	var _resizeIndexScreen2 = _interopRequireDefault(_resizeIndexScreen);
	
	var _smoothScrolling = __webpack_require__(87);
	
	var _smoothScrolling2 = _interopRequireDefault(_smoothScrolling);
	
	var _mobileGallery = __webpack_require__(89);
	
	var _mobileGallery2 = _interopRequireDefault(_mobileGallery);
	
	var _menu = __webpack_require__(90);
	
	var _preloader = __webpack_require__(92);
	
	var _preloader2 = _interopRequireDefault(_preloader);
	
	var _products = __webpack_require__(98);
	
	var _products2 = _interopRequireDefault(_products);
	
	var _map = __webpack_require__(99);
	
	var _map2 = _interopRequireDefault(_map);
	
	var _video = __webpack_require__(100);
	
	var _video2 = _interopRequireDefault(_video);
	
	var _constants = __webpack_require__(112);
	
	var _isIpad = __webpack_require__(113);
	
	var _isIpad2 = _interopRequireDefault(_isIpad);
	
	var _animate = __webpack_require__(114);
	
	var _animate2 = _interopRequireDefault(_animate);
	
	var _colors = __webpack_require__(115);
	
	var COLORS = _interopRequireWildcard(_colors);
	
	var _Screens = __webpack_require__(116);
	
	var _Screens2 = _interopRequireDefault(_Screens);
	
	var _Invertor = __webpack_require__(142);
	
	var _Invertor2 = _interopRequireDefault(_Invertor);
	
	var _BWElements = __webpack_require__(143);
	
	var _BWElements2 = _interopRequireDefault(_BWElements);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	__webpack_require__(156)(_jquery2.default);
	__webpack_require__(157)(_jquery2.default);
	
	
	var $window = (0, _jquery2.default)(window);
	var $indexScreen = (0, _jquery2.default)('.index-screen');
	
	_preloader2.default.start();
	var videoPromise = (0, _video2.default)();
	
	var tryToInitMap = function tryToInitMap() {
		try {
			(0, _map2.default)();
		} catch (e) {
			window.setTimeout(function () {
				tryToInitMap();
			}, 2000);
		}
	};
	
	var lastTitle = void 0;
	var setTitle = function setTitle(id, $h1) {
		var $title = (0, _jquery2.default)('.page__title');
	
		if (lastTitle !== id) {
			lastTitle = id;
			$title.fadeOut(200, function () {
				$title.html($h1.clone());
				$title.fadeIn(200);
			});
		}
	};
	
	(0, _jquery2.default)(function () {
		(0, _svg4everybody2.default)();
	
		(0, _mobileGallery2.default)();
		(0, _menu.initPricesMenu)();
		(0, _menu.initWorksMenu)();
		(0, _menu.initProductsMenu)();
		(0, _products2.default)();
		(0, _menu.initMobileMenu)();
		tryToInitMap();
	
		var video = document.getElementById('video');
	
		var screens = new _Screens2.default({});
		window.screens = screens;
	
		var isSecondScreenAnimated = false;
		var currentScreenIndex = 1;
	
		var $fp = (0, _jquery2.default)('#fullpage');
		if (!(0, _isIpad2.default)()) {
			var iscrollInstance = void 0;
			$fp.fullpage({
				menu: '#menu',
				scrollingSpeed: 1100,
				responsiveWidth: 1240,
				scrollOverflow: true,
				bigSectionsDestination: 'bottom',
				anchors: ['index',
				// 'philosophy',
				'works', 'prices', 'products', 'contacts'],
				onLeave: function onLeave(index, nextIndex) {
					currentScreenIndex = nextIndex;
					if (index === 1) {
						(0, _resizeIndexScreen2.default)(0);
					}
					if (nextIndex === 1) {
						if (video !== null) {
							video.play();
						}
						(0, _jquery2.default)('.menu').find('.menu__item:nth(1)').addClass('menu__item_active');
	
						iscrollInstance.scrollTo(0, iscrollInstance.maxScrollY);
	
						setTitle('ph', (0, _jquery2.default)('.ph-screen .h1'));
					} else {
						(0, _jquery2.default)('.menu').find('.menu__item:nth(0), .menu__item:nth(1)').removeClass('menu__item_active');
	
						setTitle(nextIndex, (0, _jquery2.default)('.screen').eq(nextIndex).find('.h1'));
					}
				},
				afterRender: function afterRender() {
					iscrollInstance = (0, _jquery2.default)('.section').eq(0).find('.fp-scrollable').data('iscrollInstance');
					videoPromise.then(function () {
						_preloader2.default.stop();
					});
					iscrollInstance.scrollTo(0, 0);
				}
			});
	
			var _$indexScreen = (0, _jquery2.default)('.index-screen .screen');
	
			(0, _jquery2.default)('.menu').find('.menu__item:nth(1)').click(function () {
				$fp.fullpage.moveTo(1);
				var draw = function draw(progress) {
					return iscrollInstance.scrollTo(0, progress * iscrollInstance.maxScrollY);
				};
				(0, _animate2.default)(draw, 1100);
			});
			(0, _jquery2.default)('.menu').find('.menu__item:nth(0)').click(function () {
				$fp.fullpage.moveTo(1);
				var draw = function draw(progress) {
					return iscrollInstance.scrollTo(0, (1 - progress) * iscrollInstance.maxScrollY);
				};
				(0, _animate2.default)(draw, 1100);
			});
		} else {
			_preloader2.default.stop();
	
			(0, _jquery2.default)('.menu__item').click(function () {
				var $item = (0, _jquery2.default)(this);
				var href = $item.attr('href');
				if (href[0] !== '#') {
					return;
				}
	
				href = href.slice(1);
				var $screen = (0, _jquery2.default)('.' + href + '-screen');
				var offset = $screen.offset().top - (0, _jquery2.default)('.header').height();
				(0, _jquery2.default)('html, body').scrollTop(offset);
			});
		}
	
		var bwElements = new _BWElements2.default((0, _jquery2.default)('body'));
	
		var colorize = function colorize() {
			bwElements.apply([].concat((0, _toConsumableArray3.default)(screens.screens), [new _Invertor2.default((0, _jquery2.default)('#myMap'))]));
		};
		var redrawBW = (0, _isIpad2.default)() ? function () {} : colorize;
		window.onFuckingScroll = function (progressX, progressY) {
			if (currentScreenIndex === 1) {
				(0, _resizeIndexScreen2.default)(1 - progressY);
	
				(0, _jquery2.default)('.ph-screen').attr('data-progress', parseInt(progressY * 1000) / 10);
	
				if (!isSecondScreenAnimated && progressY > .5) {
					isSecondScreenAnimated = true;
					(0, _jquery2.default)('.ph-screen').addClass('ph-screen_animated');
				}
	
				if (progressY < .5) {
					(0, _jquery2.default)('.menu').find('.menu__item:nth(1)').removeClass('menu__item_active');
					(0, _jquery2.default)('.menu').find('.menu__item:nth(0)').addClass('menu__item_active');
	
					setTitle('index', (0, _jquery2.default)('.index-screen .h1'));
				} else {
					(0, _jquery2.default)('.menu').find('.menu__item:nth(0)').removeClass('menu__item_active');
					(0, _jquery2.default)('.menu').find('.menu__item:nth(1)').addClass('menu__item_active');
	
					setTitle('ph', (0, _jquery2.default)('.ph-screen .h1'));
				}
			}
			// redrawBW();
		};
	
		var redraw = function redraw() {
			redrawBW();
			window.setTimeout(function () {
				requestAnimationFrame(redraw);
			}, 14);
		};
	
		requestAnimationFrame(redraw);
	
		(0, _jquery2.default)('.product__description').mCustomScrollbar({
			mouseWheel: {
				preventDefault: true,
				autoHideScrollbar: false
			}
		});
	
		(0, _jquery2.default)('.gallery__items-wrapper').mCustomScrollbar({
			axis: 'x',
			mouseWheel: {
				autoHideScrollbar: false
			}
		});
	
		if (video !== null) {
			video.play();
		}
	
		// fancybox
		(0, _jquery2.default)("[data-fancybox]").fancybox({
			baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1">' + '<div class="fancybox-bg"></div>' + '<div class="fancybox-buttons">' + '<button data-fancybox-previous class="fancybox-button fancybox-button--left" title="Previous"></button>' + '<button data-fancybox-next class="fancybox-button fancybox-button--right" title="Next"></button>' + '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="Close (Esc)"></button>' + '</div>' + '<div class="fancybox-slider-wrap">' + '<div class="fancybox-slider"></div>' + '</div>' + '<div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div>' + '</div>',
			onActivate: function onActivate() {
				$fp.fullpage.setAllowScrolling(false);
			},
			afterClose: function afterClose() {
				$fp.fullpage.setAllowScrolling(true);
			}
		});
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(2);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(3), __esModule: true };

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(48);
	module.exports = __webpack_require__(12).Array.from;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(5)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(8)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(6)
	  , defined   = __webpack_require__(7);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(9)
	  , $export        = __webpack_require__(10)
	  , redefine       = __webpack_require__(25)
	  , hide           = __webpack_require__(15)
	  , has            = __webpack_require__(26)
	  , Iterators      = __webpack_require__(27)
	  , $iterCreate    = __webpack_require__(28)
	  , setToStringTag = __webpack_require__(44)
	  , getPrototypeOf = __webpack_require__(46)
	  , ITERATOR       = __webpack_require__(45)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(11)
	  , core      = __webpack_require__(12)
	  , ctx       = __webpack_require__(13)
	  , hide      = __webpack_require__(15)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 11 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 12 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(14);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(16)
	  , createDesc = __webpack_require__(24);
	module.exports = __webpack_require__(20) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(17)
	  , IE8_DOM_DEFINE = __webpack_require__(19)
	  , toPrimitive    = __webpack_require__(23)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(20) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(20) && !__webpack_require__(21)(function(){
	  return Object.defineProperty(__webpack_require__(22)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(21)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18)
	  , document = __webpack_require__(11).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(18);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(15);

/***/ },
/* 26 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(29)
	  , descriptor     = __webpack_require__(24)
	  , setToStringTag = __webpack_require__(44)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(15)(IteratorPrototype, __webpack_require__(45)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(17)
	  , dPs         = __webpack_require__(30)
	  , enumBugKeys = __webpack_require__(42)
	  , IE_PROTO    = __webpack_require__(39)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(22)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(43).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(16)
	  , anObject = __webpack_require__(17)
	  , getKeys  = __webpack_require__(31);
	
	module.exports = __webpack_require__(20) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(32)
	  , enumBugKeys = __webpack_require__(42);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(26)
	  , toIObject    = __webpack_require__(33)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(39)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(34)
	  , defined = __webpack_require__(7);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(35);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(33)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(38);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(6)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(6)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(40)('keys')
	  , uid    = __webpack_require__(41);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(11).document && document.documentElement;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(16).f
	  , has = __webpack_require__(26)
	  , TAG = __webpack_require__(45)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(40)('wks')
	  , uid        = __webpack_require__(41)
	  , Symbol     = __webpack_require__(11).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(26)
	  , toObject    = __webpack_require__(47)
	  , IE_PROTO    = __webpack_require__(39)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(7);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(13)
	  , $export        = __webpack_require__(10)
	  , toObject       = __webpack_require__(47)
	  , call           = __webpack_require__(49)
	  , isArrayIter    = __webpack_require__(50)
	  , toLength       = __webpack_require__(37)
	  , createProperty = __webpack_require__(51)
	  , getIterFn      = __webpack_require__(52);
	
	$export($export.S + $export.F * !__webpack_require__(54)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(17);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(27)
	  , ITERATOR   = __webpack_require__(45)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(16)
	  , createDesc      = __webpack_require__(24);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(53)
	  , ITERATOR  = __webpack_require__(45)('iterator')
	  , Iterators = __webpack_require__(27);
	module.exports = __webpack_require__(12).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(35)
	  , TAG = __webpack_require__(45)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(45)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(root, factory) {
	     true ? // AMD. Register as an anonymous module unless amdModuleId is set
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return root.svg4everybody = factory();
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory() : root.svg4everybody = factory();
	}(this, function() {
	    /*! svg4everybody v2.1.4 | github.com/jonathantneal/svg4everybody */
	    function embed(parent, svg, target) {
	        // if the target exists
	        if (target) {
	            // create a document fragment to hold the contents of the target
	            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute("viewBox") && target.getAttribute("viewBox");
	            // conditionally set the viewBox on the svg
	            viewBox && svg.setAttribute("viewBox", viewBox);
	            // copy the contents of the clone into the fragment
	            for (// clone the target
	            var clone = target.cloneNode(!0); clone.childNodes.length; ) {
	                fragment.appendChild(clone.firstChild);
	            }
	            // append the fragment into the svg
	            parent.appendChild(fragment);
	        }
	    }
	    function loadreadystatechange(xhr) {
	        // listen to changes in the request
	        xhr.onreadystatechange = function() {
	            // if the request is ready
	            if (4 === xhr.readyState) {
	                // get the cached html document
	                var cachedDocument = xhr._cachedDocument;
	                // ensure the cached html document based on the xhr response
	                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""), 
	                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
	                xhr._embeds.splice(0).map(function(item) {
	                    // get the cached target
	                    var target = xhr._cachedTarget[item.id];
	                    // ensure the cached target
	                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), 
	                    // embed the target into the svg
	                    embed(item.parent, item.svg, target);
	                });
	            }
	        }, // test the ready state change immediately
	        xhr.onreadystatechange();
	    }
	    function svg4everybody(rawopts) {
	        function oninterval() {
	            // while the index exists in the live <use> collection
	            for (// get the cached <use> index
	            var index = 0; index < uses.length; ) {
	                // get the current <use>
	                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent);
	                if (svg) {
	                    var src = use.getAttribute("xlink:href") || use.getAttribute("href");
	                    if (polyfill && (!opts.validate || opts.validate(src, svg, use))) {
	                        // remove the <use> element
	                        parent.removeChild(use);
	                        // parse the src and get the url and id
	                        var srcSplit = src.split("#"), url = srcSplit.shift(), id = srcSplit.join("#");
	                        // if the link is external
	                        if (url.length) {
	                            // get the cached xhr request
	                            var xhr = requests[url];
	                            // ensure the xhr request exists
	                            xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(), 
	                            xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
	                            xhr._embeds.push({
	                                parent: parent,
	                                svg: svg,
	                                id: id
	                            }), // prepare the xhr ready state change event
	                            loadreadystatechange(xhr);
	                        } else {
	                            // embed the local id into the svg
	                            embed(parent, document.getElementById(id));
	                        }
	                    }
	                } else {
	                    // increase the index when the previous value was not "valid"
	                    ++index;
	                }
	            }
	            // continue the interval
	            requestAnimationFrame(oninterval, 67);
	        }
	        var polyfill, opts = Object(rawopts), newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/, webkitUA = /\bAppleWebKit\/(\d+)\b/, olderEdgeUA = /\bEdge\/12\.(\d+)\b/;
	        polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;
	        // create xhr requests object
	        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName("use");
	        // conditionally start the interval if the polyfill is active
	        polyfill && oninterval();
	    }
	    function getSVGAncestor(node) {
	        for (var svg = node; "svg" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}
	        return svg;
	    }
	    return svg4everybody;
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(57);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(58);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.4",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 59 */
/***/ function(module, exports) {

	'use strict';
	
	// ==================================================
	// fancyBox v3.0.47
	//
	// Licensed GPLv3 for open source use
	// or fancyBox Commercial License for commercial use
	//
	// http://fancyapps.com/fancybox/
	// Copyright 2017 fancyApps
	//
	// ==================================================
	;(function (window, document, $, undefined) {
	    'use strict';
	
	    // If there's no jQuery, fancyBox can't work
	    // =========================================
	
	    if (!$) {
	        return undefined;
	    }
	
	    // Private default settings
	    // ========================
	
	    var defaults = {
	
	        // Animation duration in ms
	        speed: 330,
	
	        // Enable infinite gallery navigation
	        loop: true,
	
	        // Should zoom animation change opacity, too
	        // If opacity is 'auto', then fade-out if image and thumbnail have different aspect ratios
	        opacity: 'auto',
	
	        // Space around image, ignored if zoomed-in or viewport smaller than 800px
	        margin: [44, 0],
	
	        // Horizontal space between slides
	        gutter: 30,
	
	        // Should display toolbars
	        infobar: true,
	        buttons: true,
	
	        // What buttons should appear in the toolbar
	        slideShow: true,
	        fullScreen: true,
	        thumbs: true,
	        closeBtn: true,
	
	        // Should apply small close button at top right corner of the content
	        // If 'auto' - will be set for content having type 'html', 'inline' or 'ajax'
	        smallBtn: 'auto',
	
	        image: {
	
	            // Wait for images to load before displaying
	            // Requires predefined image dimensions
	            // If 'auto' - will zoom in thumbnail if 'width' and 'height' attributes are found
	            preload: "auto",
	
	            // Protect an image from downloading by right-click
	            protect: false
	
	        },
	
	        ajax: {
	
	            // Object containing settings for ajax request
	            settings: {
	
	                // This helps to indicate that request comes from the modal
	                // Feel free to change naming
	                data: {
	                    fancybox: true
	                }
	            }
	
	        },
	
	        iframe: {
	
	            // Iframe template
	            tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',
	
	            // Preload iframe before displaying it
	            // This allows to calculate iframe content width and height
	            // (note: Due to "Same Origin Policy", you can't get cross domain data).
	            preload: true,
	
	            // Scrolling attribute for iframe tag
	            scrolling: 'no',
	
	            // Custom CSS styling for iframe wrapping element
	            css: {}
	
	        },
	
	        // Custom CSS class for layout
	        baseClass: '',
	
	        // Custom CSS class for slide element
	        slideClass: '',
	
	        // Base template for layout
	        baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1">' + '<div class="fancybox-bg"></div>' + '<div class="fancybox-controls">' + '<div class="fancybox-infobar">' + '<button data-fancybox-previous class="fancybox-button fancybox-button--left" title="Previous"></button>' + '<div class="fancybox-infobar__body">' + '<span class="js-fancybox-index"></span>&nbsp;/&nbsp;<span class="js-fancybox-count"></span>' + '</div>' + '<button data-fancybox-next class="fancybox-button fancybox-button--right" title="Next"></button>' + '</div>' + '<div class="fancybox-buttons">' + '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="Close (Esc)"></button>' + '</div>' + '</div>' + '<div class="fancybox-slider-wrap">' + '<div class="fancybox-slider"></div>' + '</div>' + '<div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div>' + '</div>',
	
	        // Loading indicator template
	        spinnerTpl: '<div class="fancybox-loading"></div>',
	
	        // Error message template
	        errorTpl: '<div class="fancybox-error"><p>The requested content cannot be loaded. <br /> Please try again later.<p></div>',
	
	        // This will be appended to html content, if "smallBtn" option is not set to false
	        closeTpl: '<button data-fancybox-close class="fancybox-close-small"></button>',
	
	        // Container is injected into this element
	        parentEl: 'body',
	
	        // Enable gestures (tap, zoom, pan and pinch)
	        touch: true,
	
	        // Enable keyboard navigation
	        keyboard: true,
	
	        // Try to focus on first focusable element after opening
	        focus: true,
	
	        // Close when clicked outside of the content
	        closeClickOutside: true,
	
	        // Callbacks
	        beforeLoad: $.noop,
	        afterLoad: $.noop,
	        beforeMove: $.noop,
	        afterMove: $.noop,
	        onComplete: $.noop,
	
	        onInit: $.noop,
	        beforeClose: $.noop,
	        afterClose: $.noop,
	        onActivate: $.noop,
	        onDeactivate: $.noop
	
	    };
	
	    var $W = $(window);
	    var $D = $(document);
	
	    var called = 0;
	
	    // Check if an object is a jQuery object and not a native JavaScript object
	    // ========================================================================
	
	    var isQuery = function isQuery(obj) {
	        return obj && obj.hasOwnProperty && obj instanceof $;
	    };
	
	    // Handle multiple browsers for requestAnimationFrame()
	    // ====================================================
	
	    var requestAFrame = function () {
	        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
	            window.setTimeout(callback, 1000 / 60);
	        };
	    }();
	
	    // Check if element is inside the viewport by at least 1 pixel
	    // ===========================================================
	
	    var isElementInViewport = function isElementInViewport(el) {
	        var rect;
	
	        if (typeof $ === "function" && el instanceof $) {
	            el = el[0];
	        }
	
	        rect = el.getBoundingClientRect();
	
	        return rect.bottom > 0 && rect.right > 0 && rect.left < (window.innerWidth || document.documentElement.clientWidth) && rect.top < (window.innerHeight || document.documentElement.clientHeight);
	    };
	
	    // Class definition
	    // ================
	
	    var FancyBox = function FancyBox(content, opts, index) {
	        var self = this;
	
	        self.opts = $.extend(true, { index: index }, defaults, opts || {});
	        self.id = self.opts.id || ++called;
	        self.group = [];
	
	        self.currIndex = parseInt(self.opts.index, 10) || 0;
	        self.prevIndex = null;
	
	        self.prevPos = null;
	        self.currPos = 0;
	
	        self.firstRun = null;
	
	        // Create group elements from original item collection
	        self.createGroup(content);
	
	        if (!self.group.length) {
	            return;
	        }
	
	        // Save last active element and current scroll position
	        self.$lastFocus = $(document.activeElement).blur();
	
	        // Collection of gallery objects
	        self.slides = {};
	
	        self.init(content);
	    };
	
	    $.extend(FancyBox.prototype, {
	
	        // Create DOM structure
	        // ====================
	
	        init: function init() {
	            var self = this;
	
	            var galleryHasHtml = false;
	
	            var testWidth;
	            var $container;
	
	            self.scrollTop = $D.scrollTop();
	            self.scrollLeft = $D.scrollLeft();
	
	            if (!$.fancybox.getInstance()) {
	                testWidth = $('body').width();
	
	                $('html').addClass('fancybox-enabled');
	
	                if ($.fancybox.isTouch) {
	
	                    // Ugly workaround for iOS page shifting issue (when inputs get focus)
	                    // Do not apply for images, otherwise top/bottom bars will appear
	                    $.each(self.group, function (key, item) {
	                        if (item.type !== 'image' && item.type !== 'iframe') {
	                            galleryHasHtml = true;
	                            return false;
	                        }
	                    });
	
	                    if (galleryHasHtml) {
	                        $('body').css({
	                            position: 'fixed',
	                            width: testWidth,
	                            top: self.scrollTop * -1
	                        });
	                    }
	                } else {
	
	                    // Compare page width after adding "overflow:hidden"
	                    testWidth = $('body').width() - testWidth;
	
	                    // Width has changed - compensate missing scrollbars
	                    if (testWidth > 1) {
	                        $('<style id="fancybox-noscroll" type="text/css">').html('.compensate-for-scrollbar, .fancybox-enabled body { margin-right: ' + testWidth + 'px; }').appendTo('head');
	                    }
	                }
	            }
	
	            $container = $(self.opts.baseTpl).attr('id', 'fancybox-container-' + self.id).data('FancyBox', self).addClass(self.opts.baseClass).hide().prependTo(self.opts.parentEl);
	
	            // Create object holding references to jQuery wrapped nodes
	            self.$refs = {
	                container: $container,
	                bg: $container.find('.fancybox-bg'),
	                controls: $container.find('.fancybox-controls'),
	                buttons: $container.find('.fancybox-buttons'),
	                slider_wrap: $container.find('.fancybox-slider-wrap'),
	                slider: $container.find('.fancybox-slider'),
	                caption: $container.find('.fancybox-caption')
	            };
	
	            self.trigger('onInit');
	
	            // Bring to front and enable events
	            self.activate();
	
	            // Try to avoid running multiple times
	            if (self.current) {
	                return;
	            }
	
	            self.jumpTo(self.currIndex);
	        },
	
	        // Create array of gally item objects
	        // Check if each object has valid type and content
	        // ===============================================
	
	        createGroup: function createGroup(content) {
	            var self = this;
	            var items = $.makeArray(content);
	
	            $.each(items, function (i, item) {
	                var obj = {},
	                    opts = {},
	                    data = [],
	                    $item,
	                    type,
	                    src,
	                    srcParts;
	
	                // Step 1 - Make sure we have an object
	
	                if ($.isPlainObject(item)) {
	
	                    obj = item;
	                    opts = item.opts || {};
	                } else if ($.type(item) === 'object' && $(item).length) {
	
	                    $item = $(item);
	                    data = $item.data();
	
	                    opts = 'options' in data ? data.options : {};
	
	                    opts = $.type(opts) === 'object' ? opts : {};
	
	                    obj.type = 'type' in data ? data.type : opts.type;
	                    obj.src = 'src' in data ? data.src : opts.src || $item.attr('href');
	
	                    opts.width = 'width' in data ? data.width : opts.width;
	                    opts.height = 'height' in data ? data.height : opts.height;
	                    opts.thumb = 'thumb' in data ? data.thumb : opts.thumb;
	
	                    opts.selector = 'selector' in data ? data.selector : opts.selector;
	
	                    if ('srcset' in data) {
	                        opts.image = { srcset: data.srcset };
	                    }
	
	                    opts.$orig = $item;
	                } else {
	
	                    obj = {
	                        type: 'html',
	                        content: item + ''
	                    };
	                }
	
	                obj.opts = $.extend(true, {}, self.opts, opts);
	
	                // Step 2 - Make sure we have supported content type
	
	                type = obj.type;
	                src = obj.src || '';
	
	                if (!type) {
	
	                    if (obj.content) {
	                        type = 'html';
	                    } else if (src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)) {
	                        type = 'image';
	                    } else if (src.match(/\.(pdf)((\?|#).*)?$/i)) {
	                        type = 'pdf';
	                    } else if (src.charAt(0) === '#') {
	                        type = 'inline';
	                    }
	
	                    obj.type = type;
	                }
	
	                // Step 3 - Some adjustments
	
	                obj.index = self.group.length;
	
	                // Check if $orig and $thumb objects exist
	                if (obj.opts.$orig && !obj.opts.$orig.length) {
	                    delete obj.opts.$orig;
	                }
	
	                if (!obj.opts.$thumb && obj.opts.$orig) {
	                    obj.opts.$thumb = obj.opts.$orig.find('img:first');
	                }
	
	                if (obj.opts.$thumb && !obj.opts.$thumb.length) {
	                    delete obj.opts.$thumb;
	                }
	
	                // Caption is a "special" option, it can be passed as a method
	                if ($.type(obj.opts.caption) === 'function') {
	                    obj.opts.caption = obj.opts.caption.apply(item, [self, obj]);
	                } else if ('caption' in data) {
	                    obj.opts.caption = data.caption;
	                } else if (opts.$orig) {
	                    obj.opts.caption = $item.attr('title');
	                }
	
	                // Make sure we have caption as a string
	                obj.opts.caption = obj.opts.caption === undefined ? '' : obj.opts.caption + '';
	
	                // Check if url contains selector used to filter the content
	                // Example: "ajax.html #something"
	                if (type === 'ajax') {
	                    srcParts = src.split(/\s+/, 2);
	
	                    if (srcParts.length > 1) {
	                        obj.src = srcParts.shift();
	
	                        obj.opts.selector = srcParts.shift();
	                    }
	                }
	
	                if (obj.opts.smallBtn == 'auto') {
	
	                    if ($.inArray(type, ['html', 'inline', 'ajax']) > -1) {
	                        obj.opts.buttons = false;
	                        obj.opts.smallBtn = true;
	                    } else {
	                        obj.opts.smallBtn = false;
	                    }
	                }
	
	                if (type === 'pdf') {
	
	                    obj.type = 'iframe';
	
	                    obj.opts.closeBtn = true;
	                    obj.opts.smallBtn = false;
	
	                    obj.opts.iframe.preload = false;
	                }
	
	                if (obj.opts.modal) {
	
	                    $.extend(true, obj.opts, {
	                        infobar: 0,
	                        buttons: 0,
	                        keyboard: 0,
	                        slideShow: 0,
	                        fullScreen: 0,
	                        closeClickOutside: 0
	                    });
	                }
	
	                self.group.push(obj);
	            });
	        },
	
	        // Attach an event handler functions for:
	        //   - navigation elements
	        //   - browser scrolling, resizing;
	        //   - focusing
	        //   - keyboard
	        // =================
	
	        addEvents: function addEvents() {
	            var self = this;
	
	            self.removeEvents();
	
	            // Make navigation elements clickable
	
	            self.$refs.container.on('click.fb-close', '[data-fancybox-close]', function (e) {
	                e.stopPropagation();
	                e.preventDefault();
	
	                self.close(e);
	            }).on('click.fb-previous', '[data-fancybox-previous]', function (e) {
	                e.stopPropagation();
	                e.preventDefault();
	
	                self.previous();
	            }).on('click.fb-next', '[data-fancybox-next]', function (e) {
	                e.stopPropagation();
	                e.preventDefault();
	
	                self.next();
	            });
	
	            // Handle page scrolling and browser resizing
	
	            $(window).on('orientationchange.fb resize.fb', function (e) {
	                requestAFrame(function () {
	
	                    if (e && e.originalEvent && e.originalEvent.type === "resize") {
	                        self.update();
	                    } else {
	                        self.$refs.slider_wrap.hide();
	
	                        requestAFrame(function () {
	                            self.$refs.slider_wrap.show();
	
	                            self.update();
	                        });
	                    }
	                });
	            });
	
	            // Trap focus
	
	            $D.on('focusin.fb', function (e) {
	                var instance = $.fancybox ? $.fancybox.getInstance() : null;
	
	                if (instance && !$(e.target).hasClass('fancybox-container') && !$.contains(instance.$refs.container[0], e.target)) {
	                    e.stopPropagation();
	
	                    instance.focus();
	
	                    // Sometimes page gets scrolled, set it back
	                    $W.scrollTop(self.scrollTop).scrollLeft(self.scrollLeft);
	                }
	            });
	
	            // Enable keyboard navigation
	
	            $D.on('keydown.fb', function (e) {
	                var current = self.current,
	                    keycode = e.keyCode || e.which;
	
	                if (!current || !current.opts.keyboard) {
	                    return;
	                }
	
	                if ($(e.target).is('input') || $(e.target).is('textarea')) {
	                    return;
	                }
	
	                // Backspace and Esc keys
	                if (keycode === 8 || keycode === 27) {
	                    e.preventDefault();
	
	                    self.close(e);
	
	                    return;
	                }
	
	                switch (keycode) {
	
	                    case 37: // Left arrow
	                    case 38:
	                        // Up arrow
	
	                        e.preventDefault();
	
	                        self.previous();
	
	                        break;
	
	                    case 39: // Right arrow
	                    case 40:
	                        // Down arrow
	
	                        e.preventDefault();
	
	                        self.next();
	
	                        break;
	
	                    case 80: // "P"
	                    case 32:
	                        // Spacebar
	
	                        e.preventDefault();
	
	                        if (self.SlideShow) {
	                            e.preventDefault();
	
	                            self.SlideShow.toggle();
	                        }
	
	                        break;
	
	                    case 70:
	                        // "F"
	
	                        if (self.FullScreen) {
	                            e.preventDefault();
	
	                            self.FullScreen.toggle();
	                        }
	
	                        break;
	
	                    case 71:
	                        // "G"
	
	                        if (self.Thumbs) {
	                            e.preventDefault();
	
	                            self.Thumbs.toggle();
	                        }
	
	                        break;
	                }
	            });
	        },
	
	        // Remove events added by the core
	        // ===============================
	
	        removeEvents: function removeEvents() {
	
	            $W.off('scroll.fb resize.fb orientationchange.fb');
	            $D.off('keydown.fb focusin.fb click.fb-close');
	
	            this.$refs.container.off('click.fb-close click.fb-previous click.fb-next');
	        },
	
	        // Slide to left
	        // ==================
	
	        previous: function previous(duration) {
	            this.jumpTo(this.currIndex - 1, duration);
	        },
	
	        // Slide to right
	        // ===================
	
	        next: function next(duration) {
	            this.jumpTo(this.currIndex + 1, duration);
	        },
	
	        // Display current gallery item, move slider to current position
	        // =============================================================
	
	        jumpTo: function jumpTo(to, duration) {
	            var self = this,
	                firstRun,
	                index,
	                pos,
	                loop;
	
	            firstRun = self.firstRun = self.firstRun === null;
	
	            index = pos = to = parseInt(to, 10);
	            loop = self.current ? self.current.opts.loop : false;
	
	            if (self.isAnimating || index == self.currIndex && !firstRun) {
	                return;
	            }
	
	            if (self.group.length > 1 && loop) {
	
	                index = index % self.group.length;
	                index = index < 0 ? self.group.length + index : index;
	
	                // Calculate closest position of upcoming item from the current one
	                if (self.group.length == 2) {
	                    pos = to - self.currIndex + self.currPos;
	                } else {
	                    pos = index - self.currIndex + self.currPos;
	
	                    if (Math.abs(self.currPos - (pos + self.group.length)) < Math.abs(self.currPos - pos)) {
	                        pos = pos + self.group.length;
	                    } else if (Math.abs(self.currPos - (pos - self.group.length)) < Math.abs(self.currPos - pos)) {
	                        pos = pos - self.group.length;
	                    }
	                }
	            } else if (!self.group[index]) {
	                self.update(false, false, duration);
	
	                return;
	            }
	
	            if (self.current) {
	                self.current.$slide.removeClass('fancybox-slide--current fancybox-slide--complete');
	
	                self.updateSlide(self.current, true);
	            }
	
	            self.prevIndex = self.currIndex;
	            self.prevPos = self.currPos;
	
	            self.currIndex = index;
	            self.currPos = pos;
	
	            // Create slides
	
	            self.current = self.createSlide(pos);
	
	            if (self.group.length > 1) {
	
	                if (self.opts.loop || pos - 1 >= 0) {
	                    self.createSlide(pos - 1);
	                }
	
	                if (self.opts.loop || pos + 1 < self.group.length) {
	                    self.createSlide(pos + 1);
	                }
	            }
	
	            self.current.isMoved = false;
	            self.current.isComplete = false;
	
	            duration = parseInt(duration === undefined ? self.current.opts.speed * 1.5 : duration, 10);
	
	            // Move slider to the next position
	            // Note: the content might still be loading
	            self.trigger('beforeMove');
	
	            self.updateControls();
	
	            if (firstRun) {
	                self.current.$slide.addClass('fancybox-slide--current');
	
	                self.$refs.container.show();
	
	                requestAFrame(function () {
	                    self.$refs.bg.css('transition-duration', self.current.opts.speed + 'ms');
	
	                    self.$refs.container.addClass('fancybox-container--ready');
	                });
	            }
	
	            // Set position immediately on first opening
	            self.update(true, false, firstRun ? 0 : duration, function () {
	                self.afterMove();
	            });
	
	            self.loadSlide(self.current);
	
	            if (!(firstRun && self.current.$ghost)) {
	                self.preload();
	            }
	        },
	
	        // Create new "slide" element
	        // These are gallery items  that are actually added to DOM
	        // =======================================================
	
	        createSlide: function createSlide(pos) {
	
	            var self = this;
	            var $slide;
	            var index;
	            var found;
	
	            index = pos % self.group.length;
	            index = index < 0 ? self.group.length + index : index;
	
	            if (!self.slides[pos] && self.group[index]) {
	
	                // If we are looping and slide with that index already exists, then reuse it
	                if (self.opts.loop && self.group.length > 2) {
	                    for (var key in self.slides) {
	                        if (self.slides[key].index === index) {
	                            found = self.slides[key];
	                            found.pos = pos;
	
	                            self.slides[pos] = found;
	
	                            delete self.slides[key];
	
	                            self.updateSlide(found);
	
	                            return found;
	                        }
	                    }
	                }
	
	                $slide = $('<div class="fancybox-slide"></div>').appendTo(self.$refs.slider);
	
	                self.slides[pos] = $.extend(true, {}, self.group[index], {
	                    pos: pos,
	                    $slide: $slide,
	                    isMoved: false,
	                    isLoaded: false
	                });
	            }
	
	            return self.slides[pos];
	        },
	
	        zoomInOut: function zoomInOut(type, duration, callback) {
	
	            var self = this;
	            var current = self.current;
	            var $what = current.$placeholder;
	            var opacity = current.opts.opacity;
	            var $thumb = current.opts.$thumb;
	            var thumbPos = $thumb ? $thumb.offset() : 0;
	            var slidePos = current.$slide.offset();
	            var props;
	            var start;
	            var end;
	
	            if (!$what || !current.isMoved || !thumbPos || !isElementInViewport($thumb)) {
	                return false;
	            }
	
	            if (type === 'In' && !self.firstRun) {
	                return false;
	            }
	
	            $.fancybox.stop($what);
	
	            self.isAnimating = true;
	
	            props = {
	                top: thumbPos.top - slidePos.top + parseFloat($thumb.css("border-top-width") || 0),
	                left: thumbPos.left - slidePos.left + parseFloat($thumb.css("border-left-width") || 0),
	                width: $thumb.width(),
	                height: $thumb.height(),
	                scaleX: 1,
	                scaleY: 1
	            };
	
	            // Check if we need to animate opacity
	            if (opacity == 'auto') {
	                opacity = Math.abs(current.width / current.height - props.width / props.height) > 0.1;
	            }
	
	            if (type === 'In') {
	                start = props;
	                end = self.getFitPos(current);
	
	                end.scaleX = end.width / start.width;
	                end.scaleY = end.height / start.height;
	
	                if (opacity) {
	                    start.opacity = 0.1;
	                    end.opacity = 1;
	                }
	            } else {
	
	                start = $.fancybox.getTranslate($what);
	                end = props;
	
	                // Switch to thumbnail image to improve animation performance
	                if (current.$ghost) {
	                    current.$ghost.show();
	
	                    if (current.$image) {
	                        current.$image.remove();
	                    }
	                }
	
	                start.scaleX = start.width / end.width;
	                start.scaleY = start.height / end.height;
	
	                start.width = end.width;
	                start.height = end.height;
	
	                if (opacity) {
	                    end.opacity = 0;
	                }
	            }
	
	            self.updateCursor(end.width, end.height);
	
	            // There is no need to animate width/height properties
	            delete end.width;
	            delete end.height;
	
	            $.fancybox.setTranslate($what, start);
	
	            $what.show();
	
	            self.trigger('beforeZoom' + type);
	
	            $what.css('transition', 'all ' + duration + 'ms');
	
	            $.fancybox.setTranslate($what, end);
	
	            setTimeout(function () {
	                var reset;
	
	                $what.css('transition', 'none');
	
	                reset = $.fancybox.getTranslate($what);
	
	                reset.scaleX = 1;
	                reset.scaleY = 1;
	
	                // Reset scalex/scaleY values; this helps for perfomance
	                $.fancybox.setTranslate($what, reset);
	
	                self.trigger('afterZoom' + type);
	
	                callback.apply(self);
	
	                self.isAnimating = false;
	            }, duration);
	
	            return true;
	        },
	
	        // Check if image dimensions exceed parent element
	        // ===============================================
	
	        canPan: function canPan() {
	
	            var self = this;
	
	            var current = self.current;
	            var $what = current.$placeholder;
	
	            var rez = false;
	
	            if ($what) {
	                rez = self.getFitPos(current);
	                rez = Math.abs($what.width() - rez.width) > 1 || Math.abs($what.height() - rez.height) > 1;
	            }
	
	            return rez;
	        },
	
	        // Check if current image dimensions are smaller than actual
	        // =========================================================
	
	        isScaledDown: function isScaledDown() {
	
	            var self = this;
	
	            var current = self.current;
	            var $what = current.$placeholder;
	
	            var rez = false;
	
	            if ($what) {
	                rez = $.fancybox.getTranslate($what);
	                rez = rez.width < current.width || rez.height < current.height;
	            }
	
	            return rez;
	        },
	
	        // Scale image to the actual size of the image
	        // ===========================================
	
	        scaleToActual: function scaleToActual(x, y, duration) {
	
	            var self = this;
	
	            var current = self.current;
	            var $what = current.$placeholder;
	
	            var imgPos, posX, posY, scaleX, scaleY;
	
	            var canvasWidth = parseInt(current.$slide.width(), 10);
	            var canvasHeight = parseInt(current.$slide.height(), 10);
	
	            var newImgWidth = current.width;
	            var newImgHeight = current.height;
	
	            if (!$what) {
	                return;
	            }
	
	            self.isAnimating = true;
	
	            x = x === undefined ? canvasWidth * 0.5 : x;
	            y = y === undefined ? canvasHeight * 0.5 : y;
	
	            imgPos = $.fancybox.getTranslate($what);
	
	            scaleX = newImgWidth / imgPos.width;
	            scaleY = newImgHeight / imgPos.height;
	
	            // Get center position for original image
	            posX = canvasWidth * 0.5 - newImgWidth * 0.5;
	            posY = canvasHeight * 0.5 - newImgHeight * 0.5;
	
	            // Make sure image does not move away from edges
	
	            if (newImgWidth > canvasWidth) {
	                posX = imgPos.left * scaleX - (x * scaleX - x);
	
	                if (posX > 0) {
	                    posX = 0;
	                }
	
	                if (posX < canvasWidth - newImgWidth) {
	                    posX = canvasWidth - newImgWidth;
	                }
	            }
	
	            if (newImgHeight > canvasHeight) {
	                posY = imgPos.top * scaleY - (y * scaleY - y);
	
	                if (posY > 0) {
	                    posY = 0;
	                }
	
	                if (posY < canvasHeight - newImgHeight) {
	                    posY = canvasHeight - newImgHeight;
	                }
	            }
	
	            self.updateCursor(newImgWidth, newImgHeight);
	
	            $.fancybox.animate($what, null, {
	                top: posY,
	                left: posX,
	                scaleX: scaleX,
	                scaleY: scaleY
	            }, duration || current.opts.speed, function () {
	                self.isAnimating = false;
	            });
	        },
	
	        // Scale image to fit inside parent element
	        // ========================================
	
	        scaleToFit: function scaleToFit(duration) {
	
	            var self = this;
	
	            var current = self.current;
	            var $what = current.$placeholder;
	            var end;
	
	            if (!$what) {
	                return;
	            }
	
	            self.isAnimating = true;
	
	            end = self.getFitPos(current);
	
	            self.updateCursor(end.width, end.height);
	
	            $.fancybox.animate($what, null, {
	                top: end.top,
	                left: end.left,
	                scaleX: end.width / $what.width(),
	                scaleY: end.height / $what.height()
	            }, duration || current.opts.speed, function () {
	                self.isAnimating = false;
	            });
	        },
	
	        // Calculate image size to fit inside viewport
	        // ===========================================
	
	        getFitPos: function getFitPos(slide) {
	            var $what = slide.$placeholder || slide.$content;
	
	            var imgWidth = slide.width;
	            var imgHeight = slide.height;
	
	            var margin = slide.opts.margin;
	
	            var canvasWidth, canvasHeight, minRatio, top, left, width, height;
	
	            if (!$what || !$what.length || !imgWidth && !imgHeight) {
	                return false;
	            }
	
	            // Convert "margin to CSS style: [ top, right, bottom, left ]
	            if ($.type(margin) === "number") {
	                margin = [margin, margin];
	            }
	
	            if (margin.length == 2) {
	                margin = [margin[0], margin[1], margin[0], margin[1]];
	            }
	
	            if ($W.width() < 800) {
	                margin = [0, 0, 0, 0];
	            }
	
	            canvasWidth = parseInt(slide.$slide.width(), 10) - (margin[1] + margin[3]);
	            canvasHeight = parseInt(slide.$slide.height(), 10) - (margin[0] + margin[2]);
	
	            minRatio = Math.min(1, canvasWidth / imgWidth, canvasHeight / imgHeight);
	
	            // Use floor rounding to make sure it really fits
	
	            width = Math.floor(minRatio * imgWidth);
	            height = Math.floor(minRatio * imgHeight);
	
	            top = Math.floor((canvasHeight - height) * 0.5) + margin[0];
	            left = Math.floor((canvasWidth - width) * 0.5) + margin[3];
	
	            return {
	                top: top,
	                left: left,
	                width: width,
	                height: height
	            };
	        },
	
	        // Move slider to current position
	        // Update all slides (and their content)
	        // =====================================
	
	        update: function update(andSlides, andContent, duration, callback) {
	
	            var self = this;
	            var leftValue;
	
	            if (self.isAnimating === true || !self.current) {
	                return;
	            }
	
	            leftValue = self.current.pos * Math.floor(self.current.$slide.width()) * -1 - self.current.pos * self.current.opts.gutter;
	            duration = parseInt(duration, 10) || 0;
	
	            $.fancybox.stop(self.$refs.slider);
	
	            if (andSlides === false) {
	                self.updateSlide(self.current, andContent);
	            } else {
	
	                $.each(self.slides, function (key, slide) {
	                    self.updateSlide(slide, andContent);
	                });
	            }
	
	            if (duration) {
	
	                $.fancybox.animate(self.$refs.slider, null, {
	                    top: 0,
	                    left: leftValue
	                }, duration, function () {
	                    self.current.isMoved = true;
	
	                    if ($.type(callback) === 'function') {
	                        callback.apply(self);
	                    }
	                });
	            } else {
	
	                $.fancybox.setTranslate(self.$refs.slider, { top: 0, left: leftValue });
	
	                self.current.isMoved = true;
	
	                if ($.type(callback) === 'function') {
	                    callback.apply(self);
	                }
	            }
	        },
	
	        // Update slide position and scale content to fit
	        // ==============================================
	
	        updateSlide: function updateSlide(slide, andContent) {
	
	            var self = this;
	            var $what = slide.$placeholder;
	            var leftPos;
	
	            slide = slide || self.current;
	
	            if (!slide || self.isClosing) {
	                return;
	            }
	
	            leftPos = slide.pos * Math.floor(slide.$slide.width()) + slide.pos * slide.opts.gutter;
	
	            if (leftPos !== slide.leftPos) {
	                $.fancybox.setTranslate(slide.$slide, { top: 0, left: leftPos });
	
	                slide.leftPos = leftPos;
	            }
	
	            if (andContent !== false && $what) {
	                $.fancybox.setTranslate($what, self.getFitPos(slide));
	
	                if (slide.pos === self.currPos) {
	                    self.updateCursor();
	                }
	            }
	
	            slide.$slide.trigger('refresh');
	
	            self.trigger('onUpdate', slide);
	        },
	
	        // Update cursor style depending if content can be zoomed
	        // ======================================================
	
	        updateCursor: function updateCursor(nextWidth, nextHeight) {
	
	            var self = this;
	            var canScale;
	
	            var $container = self.$refs.container.removeClass('fancybox-controls--canzoomIn fancybox-controls--canzoomOut fancybox-controls--canGrab');
	
	            // hardcode disable zoom
	            return;
	
	            if (self.isClosing || !self.opts.touch) {
	                return;
	            }
	
	            if (nextWidth !== undefined && nextHeight !== undefined) {
	                canScale = nextWidth < self.current.width && nextHeight < self.current.height;
	            } else {
	                canScale = self.isScaledDown();
	            }
	
	            if (canScale) {
	                $container.addClass('fancybox-controls--canzoomIn');
	            } else if (self.group.length < 2) {
	                $container.addClass('fancybox-controls--canzoomOut');
	            } else {
	                $container.addClass('fancybox-controls--canGrab');
	            }
	        },
	
	        // Load content into the slide
	        // ===========================
	
	        loadSlide: function loadSlide(slide) {
	
	            var self = this,
	                type,
	                $slide;
	            var ajaxLoad;
	
	            if (!slide || slide.isLoaded || slide.isLoading) {
	                return;
	            }
	
	            slide.isLoading = true;
	
	            self.trigger('beforeLoad', slide);
	
	            type = slide.type;
	            $slide = slide.$slide;
	
	            $slide.off('refresh').trigger('onReset').addClass('fancybox-slide--' + (type || 'unknown')).addClass(slide.opts.slideClass);
	
	            // Create content depending on the type
	
	            switch (type) {
	
	                case 'image':
	
	                    self.setImage(slide);
	
	                    break;
	
	                case 'iframe':
	
	                    self.setIframe(slide);
	
	                    break;
	
	                case 'html':
	
	                    self.setContent(slide, slide.content);
	
	                    break;
	
	                case 'inline':
	
	                    if ($(slide.src).length) {
	                        self.setContent(slide, $(slide.src));
	                    } else {
	                        self.setError(slide);
	                    }
	
	                    break;
	
	                case 'ajax':
	
	                    self.showLoading(slide);
	
	                    ajaxLoad = $.ajax($.extend({}, slide.opts.ajax.settings, {
	
	                        url: slide.src,
	
	                        success: function success(data, textStatus) {
	
	                            if (textStatus === 'success') {
	                                self.setContent(slide, data);
	                            }
	                        },
	
	                        error: function error(jqXHR, textStatus) {
	
	                            if (jqXHR && textStatus !== 'abort') {
	                                self.setError(slide);
	                            }
	                        }
	
	                    }));
	
	                    $slide.one('onReset', function () {
	                        ajaxLoad.abort();
	                    });
	
	                    break;
	
	                default:
	
	                    self.setError(slide);
	
	                    break;
	
	            }
	
	            return true;
	        },
	
	        // Use thumbnail image, if possible
	        // ================================
	
	        setImage: function setImage(slide) {
	
	            var self = this;
	            var srcset = slide.opts.image.srcset;
	
	            var found, temp, pxRatio, windowWidth;
	
	            if (slide.isLoaded && !slide.hasError) {
	                self.afterLoad(slide);
	
	                return;
	            }
	
	            // If we have "srcset", then we need to find matching "src" value.
	            // This is necessary, because when you set an src attribute, the browser will preload the image
	            // before any javascript or even CSS is applied.
	            if (srcset) {
	                pxRatio = window.devicePixelRatio || 1;
	                windowWidth = window.innerWidth * pxRatio;
	
	                temp = srcset.split(',').map(function (el) {
	                    var ret = {};
	
	                    el.trim().split(/\s+/).forEach(function (el, i) {
	                        var value = parseInt(el.substring(0, el.length - 1), 10);
	
	                        if (i === 0) {
	                            return ret.url = el;
	                        }
	
	                        if (value) {
	                            ret.value = value;
	                            ret.postfix = el[el.length - 1];
	                        }
	                    });
	
	                    return ret;
	                });
	
	                // Sort by value
	                temp.sort(function (a, b) {
	                    return a.value - b.value;
	                });
	
	                // Ok, now we have an array of all srcset values
	                for (var j = 0; j < temp.length; j++) {
	                    var el = temp[j];
	
	                    if (el.postfix === 'w' && el.value >= windowWidth || el.postfix === 'x' && el.value >= pxRatio) {
	                        found = el;
	                        break;
	                    }
	                }
	
	                // If not found, take the last one
	                if (!found && temp.length) {
	                    found = temp[temp.length - 1];
	                }
	
	                if (found) {
	                    slide.src = found.url;
	
	                    // If we have default width/height values, we can calculate height for matching source
	                    if (slide.width && slide.height && found.postfix == 'w') {
	                        slide.height = slide.width / slide.height * found.value;
	                        slide.width = found.value;
	                    }
	                }
	            }
	
	            slide.$placeholder = $('<div class="fancybox-placeholder"></div>').hide().appendTo(slide.$slide);
	
	            if (slide.opts.preload !== false && slide.opts.width && slide.opts.height && (slide.opts.thumb || slide.opts.$thumb)) {
	
	                slide.width = slide.opts.width;
	                slide.height = slide.opts.height;
	
	                slide.$ghost = $('<img />').one('load error', function () {
	
	                    if (self.isClosing) {
	                        return;
	                    }
	
	                    // Start preloading full size image
	                    $('<img/>')[0].src = slide.src;
	
	                    // zoomIn or just show
	                    self.revealImage(slide, function () {
	
	                        self.setBigImage(slide);
	
	                        if (self.firstRun && slide.index === self.currIndex) {
	                            self.preload();
	                        }
	                    });
	                }).addClass('fancybox-image').appendTo(slide.$placeholder).attr('src', slide.opts.thumb || slide.opts.$thumb.attr('src'));
	            } else {
	
	                self.setBigImage(slide);
	            }
	        },
	
	        // Create full-size image
	        // ======================
	
	        setBigImage: function setBigImage(slide) {
	            var self = this;
	            var $img = $('<img />');
	
	            slide.$image = $img.one('error', function () {
	
	                self.setError(slide);
	            }).one('load', function () {
	
	                // Clear timeout that checks if loading icon needs to be displayed
	                clearTimeout(slide.timouts);
	
	                slide.timouts = null;
	
	                if (self.isClosing) {
	                    return;
	                }
	
	                slide.width = this.naturalWidth;
	                slide.height = this.naturalHeight;
	
	                if (slide.opts.image.srcset) {
	                    $img.attr('sizes', '100vw').attr('srcset', slide.opts.image.srcset);
	                }
	
	                self.afterLoad(slide);
	
	                if (slide.$ghost) {
	                    slide.timouts = setTimeout(function () {
	                        slide.$ghost.hide();
	                    }, 350);
	                }
	            }).addClass('fancybox-image').attr('src', slide.src).appendTo(slide.$placeholder);
	
	            if ($img[0].complete) {
	                $img.trigger('load');
	            } else if ($img[0].error) {
	                $img.trigger('error');
	            } else {
	
	                slide.timouts = setTimeout(function () {
	                    if (!$img[0].complete && !slide.hasError) {
	                        self.showLoading(slide);
	                    }
	                }, 150);
	            }
	
	            if (slide.opts.image.protect) {
	                $('<div class="fancybox-spaceball"></div>').appendTo(slide.$placeholder).on('contextmenu.fb', function (e) {
	                    if (e.button == 2) {
	                        e.preventDefault();
	                    }
	
	                    return true;
	                });
	            }
	        },
	
	        // Simply show image holder without animation
	        // It has been hidden initially to avoid flickering
	        // ================================================
	
	        revealImage: function revealImage(slide, callback) {
	
	            var self = this;
	
	            callback = callback || $.noop;
	
	            if (slide.type !== 'image' || slide.hasError || slide.isRevealed === true) {
	
	                callback.apply(self);
	
	                return;
	            }
	
	            slide.isRevealed = true;
	
	            if (!(slide.pos === self.currPos && self.zoomInOut('In', slide.opts.speed, callback))) {
	
	                if (slide.$ghost && !slide.isLoaded) {
	                    self.updateSlide(slide, true);
	                }
	
	                if (slide.pos === self.currPos) {
	                    $.fancybox.animate(slide.$placeholder, { opacity: 0 }, { opacity: 1 }, 300, callback);
	                } else {
	                    slide.$placeholder.show();
	                }
	
	                callback.apply(self);
	            }
	        },
	
	        // Create iframe wrapper, iframe and bindings
	        // ==========================================
	
	        setIframe: function setIframe(slide) {
	            var self = this,
	                opts = slide.opts.iframe,
	                $slide = slide.$slide,
	                $iframe;
	
	            slide.$content = $('<div class="fancybox-content"></div>').css(opts.css).appendTo($slide);
	
	            $iframe = $(opts.tpl.replace(/\{rnd\}/g, new Date().getTime())).attr('scrolling', $.fancybox.isTouch ? 'auto' : opts.scrolling).appendTo(slide.$content);
	
	            if (opts.preload) {
	                slide.$content.addClass('fancybox-tmp');
	
	                self.showLoading(slide);
	
	                // Unfortunately, it is not always possible to determine if iframe is successfully loaded
	                // (due to browser security policy)
	
	                $iframe.on('load.fb error.fb', function (e) {
	                    this.isReady = 1;
	
	                    slide.$slide.trigger('refresh');
	
	                    self.afterLoad(slide);
	                });
	
	                // Recalculate iframe content size
	
	                $slide.on('refresh.fb', function () {
	                    var $wrap = slide.$content,
	                        $contents,
	                        $body,
	                        scrollWidth,
	                        frameWidth,
	                        frameHeight;
	
	                    if ($iframe[0].isReady !== 1) {
	                        return;
	                    }
	
	                    // Check if content is accessible,
	                    // it will fail if frame is not with the same origin
	
	                    try {
	                        $contents = $iframe.contents();
	                        $body = $contents.find('body');
	                    } catch (ignore) {}
	
	                    // Calculate dimensions for the wrapper
	
	                    if ($body && $body.length && !(opts.css.width !== undefined && opts.css.height !== undefined)) {
	
	                        scrollWidth = $iframe[0].contentWindow.document.documentElement.scrollWidth;
	
	                        frameWidth = Math.ceil($body.outerWidth(true) + ($wrap.width() - scrollWidth));
	                        frameHeight = Math.ceil($body.outerHeight(true));
	
	                        // Resize wrapper to fit iframe content
	
	                        $wrap.css({
	                            'width': opts.css.width === undefined ? frameWidth + ($wrap.outerWidth() - $wrap.innerWidth()) : opts.css.width,
	                            'height': opts.css.height === undefined ? frameHeight + ($wrap.outerHeight() - $wrap.innerHeight()) : opts.css.height
	                        });
	                    }
	
	                    $wrap.removeClass('fancybox-tmp');
	                });
	            } else {
	
	                this.afterLoad(slide);
	            }
	
	            $iframe.attr('src', slide.src);
	
	            if (slide.opts.smallBtn) {
	                slide.$content.prepend(slide.opts.closeTpl);
	            }
	
	            // Remove iframe if closing or changing gallery item
	
	            $slide.one('onReset', function () {
	
	                // This helps IE not to throw errors when closing
	
	                try {
	
	                    $(this).find('iframe').hide().attr('src', '//about:blank');
	                } catch (ignore) {}
	
	                $(this).empty();
	
	                slide.isLoaded = false;
	            });
	        },
	
	        // Wrap and append content to the slide
	        // ======================================
	
	        setContent: function setContent(slide, content) {
	
	            var self = this;
	
	            if (self.isClosing) {
	                return;
	            }
	
	            self.hideLoading(slide);
	
	            slide.$slide.empty();
	
	            if (isQuery(content) && content.parent().length) {
	
	                // If it is a jQuery object, then it will be moved to the box.
	                // The placeholder is created so we will know where to put it back.
	                // If user is navigating gallery fast, then the content might be already moved to the box
	
	                if (content.data('placeholder')) {
	                    content.parents('.fancybox-slide').trigger('onReset');
	                }
	
	                content.data({ 'placeholder': $('<div></div>').hide().insertAfter(content) }).css('display', 'inline-block');
	            } else {
	
	                if ($.type(content) === 'string') {
	
	                    content = $('<div>').append(content).contents();
	
	                    if (content[0].nodeType === 3) {
	                        content = $('<div>').html(content);
	                    }
	                }
	
	                if (slide.opts.selector) {
	                    content = $('<div>').html(content).find(slide.opts.selector);
	                }
	            }
	
	            slide.$slide.one('onReset', function () {
	                var placeholder = isQuery(content) ? content.data('placeholder') : 0;
	
	                if (placeholder) {
	                    content.hide().replaceAll(placeholder);
	
	                    content.data('placeholder', null);
	                }
	
	                if (!slide.hasError) {
	                    $(this).empty();
	
	                    slide.isLoaded = false;
	                }
	            });
	
	            slide.$content = $(content).appendTo(slide.$slide);
	
	            if (slide.opts.smallBtn === true) {
	                slide.$content.find('.fancybox-close-small').remove().end().eq(0).append(slide.opts.closeTpl);
	            }
	
	            this.afterLoad(slide);
	        },
	
	        // Display error message
	        // =====================
	
	        setError: function setError(slide) {
	
	            slide.hasError = true;
	
	            this.setContent(slide, slide.opts.errorTpl);
	        },
	
	        showLoading: function showLoading(slide) {
	            var self = this;
	
	            slide = slide || self.current;
	
	            if (slide && !slide.$spinner) {
	                slide.$spinner = $(self.opts.spinnerTpl).appendTo(slide.$slide);
	            }
	        },
	
	        hideLoading: function hideLoading(slide) {
	
	            var self = this;
	
	            slide = slide || self.current;
	
	            if (slide && slide.$spinner) {
	                slide.$spinner.remove();
	
	                delete slide.$spinner;
	            }
	        },
	
	        afterMove: function afterMove() {
	
	            var self = this;
	            var current = self.current;
	            var slides = {};
	
	            if (!current) {
	                return;
	            }
	
	            current.$slide.siblings().trigger('onReset');
	
	            // Remove unnecessary slides
	            $.each(self.slides, function (key, slide) {
	
	                if (slide.pos >= self.currPos - 1 && slide.pos <= self.currPos + 1) {
	                    slides[slide.pos] = slide;
	                } else if (slide) {
	                    slide.$slide.remove();
	                }
	            });
	
	            self.slides = slides;
	
	            self.trigger('afterMove');
	
	            if (current.isLoaded) {
	                self.complete();
	            }
	        },
	
	        // Adjustments after slide has been loaded
	        // =======================================
	
	        afterLoad: function afterLoad(slide) {
	
	            var self = this;
	
	            if (self.isClosing) {
	                return;
	            }
	
	            slide.isLoading = false;
	            slide.isLoaded = true;
	
	            self.trigger('afterLoad', slide);
	
	            self.hideLoading(slide);
	
	            // Resize content to fit inside slide
	            // Skip if slide has an $ghost element, because then it has been already processed
	            if (!slide.$ghost) {
	                self.updateSlide(slide, true);
	            }
	
	            if (slide.index === self.currIndex && slide.isMoved) {
	                self.complete();
	            } else if (!slide.$ghost) {
	                self.revealImage(slide);
	            }
	        },
	
	        // Final adjustments after current gallery item is moved to position
	        // and it`s content is loaded
	        // ==================================================================
	
	        complete: function complete() {
	
	            var self = this;
	
	            var current = self.current;
	
	            self.revealImage(current, function () {
	                current.isComplete = true;
	
	                current.$slide.addClass('fancybox-slide--complete');
	
	                self.updateCursor();
	
	                self.trigger('onComplete');
	
	                // Try to focus on the first focusable element, skip for images and iframes
	                if (current.opts.focus && !(current.type === 'image' || current.type === 'iframe')) {
	                    self.focus();
	                }
	            });
	        },
	
	        // Preload next and previous slides
	        // ================================
	
	        preload: function preload() {
	            var self = this;
	            var next, prev;
	
	            if (self.group.length < 2) {
	                return;
	            }
	
	            next = self.slides[self.currPos + 1];
	            prev = self.slides[self.currPos - 1];
	
	            if (next && next.type === 'image') {
	                self.loadSlide(next);
	            }
	
	            if (prev && prev.type === 'image') {
	                self.loadSlide(prev);
	            }
	        },
	
	        // Try to find and focus on the first focusable element
	        // ====================================================
	
	        focus: function focus() {
	            var current = this.current;
	            var $el;
	
	            $el = current && current.isComplete ? current.$slide.find('button,:input,[tabindex],a:not(".disabled")').filter(':visible:first') : null;
	
	            if (!$el || !$el.length) {
	                $el = this.$refs.container;
	            }
	
	            $el.focus();
	
	            // Scroll position of wrapper element sometimes changes after focusing (IE)
	            this.$refs.slider_wrap.scrollLeft(0);
	
	            // And the same goes for slide element
	            if (current) {
	                current.$slide.scrollTop(0);
	            }
	        },
	
	        // Activates current instance - brings container to the front and enables keyboard,
	        // notifies other instances about deactivating
	        // =================================================================================
	
	        activate: function activate() {
	            var self = this;
	
	            // Deactivate all instances
	
	            $('.fancybox-container').each(function () {
	                var instance = $(this).data('FancyBox');
	
	                // Skip self and closing instances
	
	                if (instance && instance.uid !== self.uid && !instance.isClosing) {
	                    instance.trigger('onDeactivate');
	                }
	            });
	
	            if (self.current) {
	
	                if (self.$refs.container.index() > 0) {
	                    self.$refs.container.prependTo(document.body);
	                }
	
	                self.updateControls();
	            }
	
	            self.trigger('onActivate');
	
	            self.addEvents();
	        },
	
	        // Start closing procedure
	        // This will start "zoom-out" animation if needed and clean everything up afterwards
	        // =================================================================================
	
	        close: function close(e) {
	
	            var self = this;
	            var current = self.current;
	            var duration = current.opts.speed;
	
	            var done = $.proxy(function () {
	
	                self.cleanUp(e); // Now "this" is again our instance
	            }, this);
	
	            if (self.isAnimating || self.isClosing) {
	                return false;
	            }
	
	            // If beforeClose callback prevents closing, make sure content is centered
	            if (self.trigger('beforeClose', e) === false) {
	                $.fancybox.stop(self.$refs.slider);
	
	                requestAFrame(function () {
	                    self.update(true, true, 150);
	                });
	
	                return;
	            }
	
	            self.isClosing = true;
	
	            if (current.timouts) {
	                clearTimeout(current.timouts);
	            }
	
	            if (e !== true) {
	                $.fancybox.stop(self.$refs.slider);
	            }
	
	            self.$refs.container.removeClass('fancybox-container--active').addClass('fancybox-container--closing');
	
	            current.$slide.removeClass('fancybox-slide--complete').siblings().remove();
	
	            if (!current.isMoved) {
	                current.$slide.css('overflow', 'visible');
	            }
	
	            // Remove all events
	            // If there are multiple instances, they will be set again by "activate" method
	
	            self.removeEvents();
	
	            // Clean up
	
	            self.hideLoading(current);
	
	            self.hideControls();
	
	            self.updateCursor();
	
	            self.$refs.bg.css('transition-duration', duration + 'ms');
	
	            this.$refs.container.removeClass('fancybox-container--ready');
	
	            if (e === true) {
	                setTimeout(done, duration);
	            } else if (!self.zoomInOut('Out', duration, done)) {
	                $.fancybox.animate(self.$refs.container, null, { opacity: 0 }, duration, "easeInSine", done);
	            }
	        },
	
	        // Final adjustments after removing the instance
	        // =============================================
	
	        cleanUp: function cleanUp(e) {
	            var self = this,
	                instance;
	
	            self.$refs.slider.children().trigger('onReset');
	
	            self.$refs.container.empty().remove();
	
	            self.trigger('afterClose', e);
	
	            self.current = null;
	
	            // Check if there are other instances
	            instance = $.fancybox.getInstance();
	
	            if (instance) {
	                instance.activate();
	            } else {
	
	                $('html').removeClass('fancybox-enabled');
	                $('body').removeAttr('style');
	
	                $W.scrollTop(self.scrollTop).scrollLeft(self.scrollLeft);
	
	                $('#fancybox-noscroll').remove();
	            }
	
	            // Place back focus
	            if (self.$lastFocus) {
	                self.$lastFocus.focus();
	            }
	        },
	
	        // Call callback and trigger an event
	        // ==================================
	
	        trigger: function trigger(name, slide) {
	            var args = Array.prototype.slice.call(arguments, 1),
	                self = this,
	                obj = slide && slide.opts ? slide : self.current,
	                rez;
	
	            if (obj) {
	                args.unshift(obj);
	            } else {
	                obj = self;
	            }
	
	            args.unshift(self);
	
	            if ($.isFunction(obj.opts[name])) {
	                rez = obj.opts[name].apply(obj, args);
	            }
	
	            if (rez === false) {
	                return rez;
	            }
	
	            if (name === 'afterClose') {
	                $(document).trigger(name + '.fb', args);
	            } else {
	                self.$refs.container.trigger(name + '.fb', args);
	            }
	        },
	
	        // Toggle toolbar and caption
	        // ==========================
	
	        toggleControls: function toggleControls(force) {
	
	            if (this.isHiddenControls) {
	                this.updateControls(force);
	            } else {
	                this.hideControls();
	            }
	        },
	
	        // Hide toolbar and caption
	        // ========================
	
	        hideControls: function hideControls() {
	
	            this.isHiddenControls = true;
	
	            this.$refs.container.removeClass('fancybox-show-controls');
	
	            this.$refs.container.removeClass('fancybox-show-caption');
	        },
	
	        // Update infobar values, navigation button states and reveal caption
	        // ==================================================================
	
	        updateControls: function updateControls(force) {
	
	            var self = this;
	
	            var $container = self.$refs.container;
	            var $caption = self.$refs.caption;
	
	            // Toggle infobar and buttons
	
	            var current = self.current;
	            var index = current.index;
	            var opts = current.opts;
	            var caption = opts.caption;
	
	            if (this.isHiddenControls && force !== true) {
	                return;
	            }
	
	            this.isHiddenControls = false;
	
	            $container.addClass('fancybox-show-controls').toggleClass('fancybox-show-infobar', !!opts.infobar && self.group.length > 1).toggleClass('fancybox-show-buttons', !!opts.buttons).toggleClass('fancybox-is-modal', !!opts.modal);
	
	            $('.fancybox-button--left', $container).toggleClass('fancybox-button--disabled', !opts.loop && index <= 0);
	            $('.fancybox-button--right', $container).toggleClass('fancybox-button--disabled', !opts.loop && index >= self.group.length - 1);
	
	            $('.fancybox-button--play', $container).toggle(!!(opts.slideShow && self.group.length > 1));
	            $('.fancybox-button--close', $container).toggle(!!opts.closeBtn);
	
	            // Update infobar values
	
	            $('.js-fancybox-count', $container).html(self.group.length);
	            $('.js-fancybox-index', $container).html(index + 1);
	
	            // Recalculate content dimensions
	            current.$slide.trigger('refresh');
	
	            // Reveal or create new caption
	            if ($caption) {
	                $caption.empty();
	            }
	
	            if (caption && caption.length) {
	                $caption.html(caption);
	
	                this.$refs.container.addClass('fancybox-show-caption ');
	
	                self.$caption = $caption;
	            } else {
	                this.$refs.container.removeClass('fancybox-show-caption');
	            }
	        }
	
	    });
	
	    $.fancybox = {
	
	        version: "3.0.47",
	        defaults: defaults,
	
	        // Get current instance and execute a command.
	        //
	        // Examples of usage:
	        //
	        //   $instance = $.fancybox.getInstance();
	        //   $.fancybox.getInstance().jumpTo( 1 );
	        //   $.fancybox.getInstance( 'jumpTo', 1 );
	        //   $.fancybox.getInstance( function() {
	        //       console.info( this.currIndex );
	        //   });
	        // ======================================================
	
	        getInstance: function getInstance(command) {
	            var instance = $('.fancybox-container:not(".fancybox-container--closing"):first').data('FancyBox');
	            var args = Array.prototype.slice.call(arguments, 1);
	
	            if (instance instanceof FancyBox) {
	
	                if ($.type(command) === 'string') {
	                    instance[command].apply(instance, args);
	                } else if ($.type(command) === 'function') {
	                    command.apply(instance, args);
	                }
	
	                return instance;
	            }
	
	            return false;
	        },
	
	        // Create new instance
	        // ===================
	
	        open: function open(items, opts, index) {
	            return new FancyBox(items, opts, index);
	        },
	
	        // Close current or all instances
	        // ==============================
	
	        close: function close(all) {
	            var instance = this.getInstance();
	
	            if (instance) {
	                instance.close();
	
	                // Try to find and close next instance
	
	                if (all === true) {
	                    this.close();
	                }
	            }
	        },
	
	        // Test for the existence of touch events in the browser
	        // Limit to mobile devices
	        // ====================================================
	
	        isTouch: document.createTouch !== undefined && /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),
	
	        // Detect if 'translate3d' support is available
	        // ============================================
	
	        use3d: function () {
	            var div = document.createElement('div');
	
	            return window.getComputedStyle(div).getPropertyValue('transform') && !(document.documentMode && document.documentMode <= 11);
	        }(),
	
	        // Helper function to get current visual state of an element
	        // returns array[ top, left, horizontal-scale, vertical-scale, opacity ]
	        // =====================================================================
	
	        getTranslate: function getTranslate($el) {
	            var position, matrix;
	
	            if (!$el || !$el.length) {
	                return false;
	            }
	
	            position = $el.get(0).getBoundingClientRect();
	            matrix = $el.eq(0).css('transform');
	
	            if (matrix && matrix.indexOf('matrix') !== -1) {
	                matrix = matrix.split('(')[1];
	                matrix = matrix.split(')')[0];
	                matrix = matrix.split(',');
	            } else {
	                matrix = [];
	            }
	
	            if (matrix.length) {
	
	                // If IE
	                if (matrix.length > 10) {
	                    matrix = [matrix[13], matrix[12], matrix[0], matrix[5]];
	                } else {
	                    matrix = [matrix[5], matrix[4], matrix[0], matrix[3]];
	                }
	
	                matrix = matrix.map(parseFloat);
	            } else {
	                matrix = [0, 0, 1, 1];
	            }
	
	            return {
	                top: matrix[0],
	                left: matrix[1],
	                scaleX: matrix[2],
	                scaleY: matrix[3],
	                opacity: parseFloat($el.css('opacity')),
	                width: position.width,
	                height: position.height
	            };
	        },
	
	        // Shortcut for setting "translate3d" properties for element
	        // Can set be used to set opacity, too
	        // ========================================================
	
	        setTranslate: function setTranslate($el, props) {
	            var str = '';
	            var css = {};
	
	            if (!$el || !props) {
	                return;
	            }
	
	            if (props.left !== undefined || props.top !== undefined) {
	
	                str = (props.left === undefined ? $el.position().top : props.left) + 'px, ' + (props.top === undefined ? $el.position().top : props.top) + 'px';
	
	                if (this.use3d) {
	                    str = 'translate3d(' + str + ', 0px)';
	                } else {
	                    str = 'translate(' + str + ')';
	                }
	            }
	
	            if (props.scaleX !== undefined && props.scaleY !== undefined) {
	                str = (str.length ? str + ' ' : '') + 'scale(' + props.scaleX + ', ' + props.scaleY + ')';
	            }
	
	            if (str.length) {
	                css.transform = str;
	            }
	
	            if (props.opacity !== undefined) {
	                css.opacity = props.opacity;
	            }
	
	            if (props.width !== undefined) {
	                css.width = props.width;
	            }
	
	            if (props.height !== undefined) {
	                css.height = props.height;
	            }
	
	            return $el.css(css);
	        },
	
	        // Common easings for entrances and exits
	        // t: current time, b: begInnIng value, c: change In value, d: duration
	        // ====================================================================
	
	        easing: {
	            easeOutCubic: function easeOutCubic(t, b, c, d) {
	                return c * ((t = t / d - 1) * t * t + 1) + b;
	            },
	            easeInCubic: function easeInCubic(t, b, c, d) {
	                return c * (t /= d) * t * t + b;
	            },
	            easeOutSine: function easeOutSine(t, b, c, d) {
	                return c * Math.sin(t / d * (Math.PI / 2)) + b;
	            },
	            easeInSine: function easeInSine(t, b, c, d) {
	                return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	            }
	        },
	
	        // Stop fancyBox animation
	        // =======================
	
	        stop: function stop($el) {
	
	            $el.removeData('animateID');
	        },
	
	        // Animate element using "translate3d"
	        // Usage:
	        // animate( element, start properties, end properties, duration, easing, callback )
	        // or
	        // animate( element, start properties, end properties, duration, callback )
	        // =================================================================================
	
	        animate: function animate($el, from, to, duration, easing, done) {
	
	            var self = this;
	
	            var lastTime = null;
	            var animTime = 0;
	
	            var curr;
	            var diff;
	            var id;
	
	            var finish = function finish() {
	                if (to.scaleX !== undefined && to.scaleY !== undefined && from && from.width !== undefined && from.height !== undefined) {
	                    to.width = from.width * to.scaleX;
	                    to.height = from.height * to.scaleY;
	
	                    to.scaleX = 1;
	                    to.scaleY = 1;
	                }
	
	                self.setTranslate($el, to);
	
	                done();
	            };
	
	            var frame = function frame(timestamp) {
	                curr = [];
	                diff = 0;
	
	                // If "stop" method has been called on this element, then just stop
	                if (!$el.length || $el.data('animateID') !== id) {
	                    return;
	                }
	
	                timestamp = timestamp || Date.now();
	
	                if (lastTime) {
	                    diff = timestamp - lastTime;
	                }
	
	                lastTime = timestamp;
	                animTime += diff;
	
	                // Are we done?
	                if (animTime >= duration) {
	
	                    finish();
	
	                    return;
	                }
	
	                for (var prop in to) {
	
	                    if (to.hasOwnProperty(prop) && from[prop] !== undefined) {
	
	                        if (from[prop] == to[prop]) {
	                            curr[prop] = to[prop];
	                        } else {
	                            curr[prop] = self.easing[easing](animTime, from[prop], to[prop] - from[prop], duration);
	                        }
	                    }
	                }
	
	                self.setTranslate($el, curr);
	
	                requestAFrame(frame);
	            };
	
	            self.animateID = id = self.animateID === undefined ? 1 : self.animateID + 1;
	
	            $el.data('animateID', id);
	
	            if (done === undefined && $.type(easing) == 'function') {
	                done = easing;
	                easing = undefined;
	            }
	
	            if (!easing) {
	                easing = "easeOutCubic";
	            }
	
	            done = done || $.noop;
	
	            if (from) {
	                this.setTranslate($el, from);
	            } else {
	
	                // We need current values to calculate change in time
	                from = this.getTranslate($el);
	            }
	
	            if (duration) {
	                $el.show();
	
	                requestAFrame(frame);
	            } else {
	                finish();
	            }
	        }
	
	    };
	
	    // Event handler for click event to "fancyboxed" links
	    // ===================================================
	
	    function _run(e) {
	        var target = e.currentTarget,
	            opts = e.data ? e.data.options : {},
	            items = e.data ? e.data.items : [],
	            value = '',
	            index = 0;
	
	        e.preventDefault();
	        e.stopPropagation();
	
	        // Get all related items and find index for clicked one
	
	        if ($(target).attr('data-fancybox')) {
	            value = $(target).data('fancybox');
	        }
	
	        if (value) {
	            items = items.length ? items.filter('[data-fancybox="' + value + '"]') : $('[data-fancybox=' + value + ']');
	            index = items.index(target);
	        } else {
	            items = [target];
	        }
	
	        $.fancybox.open(items, opts, index);
	    }
	
	    // Create a jQuery plugin
	    // ======================
	
	    $.fn.fancybox = function (options) {
	
	        this.off('click.fb-start').on('click.fb-start', {
	            items: this,
	            options: options || {}
	        }, _run);
	
	        return this;
	    };
	
	    // Self initializing plugin
	    // ========================
	
	    $(document).on('click.fb-start', '[data-fancybox]', _run);
	})(window, document, window.jQuery);
	
	// ==========================================================================
	//
	// Media
	// Adds additional media type support
	//
	// ==========================================================================
	;(function ($) {
	
	    'use strict';
	
	    // Formats matching url to final form
	
	    var format = function format(url, rez, params) {
	        if (!url) {
	            return;
	        }
	
	        params = params || '';
	
	        if ($.type(params) === "object") {
	            params = $.param(params, true);
	        }
	
	        $.each(rez, function (key, value) {
	            url = url.replace('$' + key, value || '');
	        });
	
	        if (params.length) {
	            url += (url.indexOf('?') > 0 ? '&' : '?') + params;
	        }
	
	        return url;
	    };
	
	    // Object containing properties for each media type
	
	    var media = {
	        youtube: {
	            matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,
	            params: {
	                autoplay: 1,
	                autohide: 1,
	                fs: 1,
	                rel: 0,
	                hd: 1,
	                wmode: 'transparent',
	                enablejsapi: 1,
	                html5: 1
	            },
	            paramPlace: 8,
	            type: 'iframe',
	            url: '//www.youtube.com/embed/$4',
	            thumb: '//img.youtube.com/vi/$4/hqdefault.jpg'
	        },
	
	        vimeo: {
	            matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,
	            params: {
	                autoplay: 1,
	                hd: 1,
	                show_title: 1,
	                show_byline: 1,
	                show_portrait: 0,
	                fullscreen: 1,
	                api: 1
	            },
	            paramPlace: 3,
	            type: 'iframe',
	            url: '//player.vimeo.com/video/$2'
	        },
	
	        metacafe: {
	            matcher: /metacafe.com\/watch\/(\d+)\/(.*)?/,
	            type: 'iframe',
	            url: '//www.metacafe.com/embed/$1/?ap=1'
	        },
	
	        dailymotion: {
	            matcher: /dailymotion.com\/video\/(.*)\/?(.*)/,
	            params: {
	                additionalInfos: 0,
	                autoStart: 1
	            },
	            type: 'iframe',
	            url: '//www.dailymotion.com/embed/video/$1'
	        },
	
	        vine: {
	            matcher: /vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,
	            type: 'iframe',
	            url: '//vine.co/v/$1/embed/simple'
	        },
	
	        instagram: {
	            matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
	            type: 'image',
	            url: '//$1/p/$2/media/?size=l'
	        },
	
	        // Examples:
	        // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
	        // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
	        // https://www.google.lv/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572
	        google_maps: {
	            matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,
	            type: 'iframe',
	            url: function url(rez) {
	                return '//maps.google.' + rez[2] + '/?ll=' + (rez[9] ? rez[9] + '&z=' + Math.floor(rez[10]) + (rez[12] ? rez[12].replace(/^\//, "&") : '') : rez[12]) + '&output=' + (rez[12] && rez[12].indexOf('layer=c') > 0 ? 'svembed' : 'embed');
	            }
	        }
	    };
	
	    $(document).on('onInit.fb', function (e, instance) {
	
	        $.each(instance.group, function (i, item) {
	
	            var url = item.src || '',
	                type = false,
	                thumb,
	                rez,
	                params,
	                urlParams,
	                o,
	                provider;
	
	            // Skip items that already have content type
	            if (item.type) {
	                return;
	            }
	
	            // Look for any matching media type
	
	            $.each(media, function (n, el) {
	                rez = url.match(el.matcher);
	                o = {};
	                provider = n;
	
	                if (!rez) {
	                    return;
	                }
	
	                type = el.type;
	
	                if (el.paramPlace && rez[el.paramPlace]) {
	                    urlParams = rez[el.paramPlace];
	
	                    if (urlParams[0] == '?') {
	                        urlParams = urlParams.substring(1);
	                    }
	
	                    urlParams = urlParams.split('&');
	
	                    for (var m = 0; m < urlParams.length; ++m) {
	                        var p = urlParams[m].split('=', 2);
	
	                        if (p.length == 2) {
	                            o[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
	                        }
	                    }
	                }
	
	                params = $.extend(true, {}, el.params, item.opts[n], o);
	
	                url = $.type(el.url) === "function" ? el.url.call(this, rez, params, item) : format(el.url, rez, params);
	                thumb = $.type(el.thumb) === "function" ? el.thumb.call(this, rez, params, item) : format(el.thumb, rez);
	
	                if (provider === 'vimeo') {
	                    url = url.replace('&%23', '#');
	                }
	
	                return false;
	            });
	
	            // If it is found, then change content type and update the url
	
	            if (type) {
	                item.src = url;
	                item.type = type;
	
	                if (!item.opts.thumb && !(item.opts.$thumb && item.opts.$thumb.length)) {
	                    item.opts.thumb = thumb;
	                }
	
	                if (type === 'iframe') {
	                    $.extend(true, item.opts, {
	                        iframe: {
	                            preload: false,
	                            scrolling: "no"
	                        },
	                        smallBtn: false,
	                        closeBtn: true,
	                        fullScreen: false,
	                        slideShow: false
	                    });
	
	                    item.opts.slideClass += ' fancybox-slide--video';
	                }
	            } else {
	
	                // If no content type is found, then set it to `iframe` as fallback
	                item.type = 'iframe';
	            }
	        });
	    });
	})(window.jQuery);
	
	// ==========================================================================
	//
	// Guestures
	// Adds touch guestures, handles click and tap events
	//
	// ==========================================================================
	;(function (window, document, $) {
	    'use strict';
	
	    var requestAFrame = function () {
	        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
	            window.setTimeout(callback, 1000 / 60);
	        };
	    }();
	
	    var pointers = function pointers(e) {
	        var result = [];
	
	        e = e.originalEvent || e || window.e;
	        e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];
	
	        for (var key in e) {
	
	            if (e[key].pageX) {
	                result.push({ x: e[key].pageX, y: e[key].pageY });
	            } else if (e[key].clientX) {
	                result.push({ x: e[key].clientX, y: e[key].clientY });
	            }
	        }
	
	        return result;
	    };
	
	    var distance = function distance(point2, point1, what) {
	
	        if (!point1 || !point2) {
	            return 0;
	        }
	
	        if (what === 'x') {
	            return point2.x - point1.x;
	        } else if (what === 'y') {
	            return point2.y - point1.y;
	        }
	
	        return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
	    };
	
	    var isClickable = function isClickable($el) {
	
	        return $el.is('a') || $el.is('button') || $el.is('input') || $el.is('select') || $el.is('textarea') || $.isFunction($el.get(0).onclick);
	    };
	
	    var hasScrollbars = function hasScrollbars(el) {
	        var overflowY = window.getComputedStyle(el)['overflow-y'];
	        var overflowX = window.getComputedStyle(el)['overflow-x'];
	
	        var vertical = (overflowY === 'scroll' || overflowY === 'auto') && el.scrollHeight > el.clientHeight;
	        var horizontal = (overflowX === 'scroll' || overflowX === 'auto') && el.scrollWidth > el.clientWidth;
	
	        return vertical || horizontal;
	    };
	
	    var isScrollable = function isScrollable($el) {
	
	        var rez = false;
	
	        while (true) {
	            rez = hasScrollbars($el.get(0));
	
	            if (rez) {
	                break;
	            }
	
	            $el = $el.parent();
	
	            if (!$el.length || $el.hasClass('fancybox-slider') || $el.is('body')) {
	                break;
	            }
	        }
	
	        return rez;
	    };
	
	    var Guestures = function Guestures(instance) {
	
	        var self = this;
	
	        self.instance = instance;
	
	        self.$wrap = instance.$refs.slider_wrap;
	        self.$slider = instance.$refs.slider;
	        self.$container = instance.$refs.container;
	
	        self.destroy();
	
	        self.$wrap.on('touchstart.fb mousedown.fb', $.proxy(self, "ontouchstart"));
	    };
	
	    Guestures.prototype.destroy = function () {
	
	        this.$wrap.off('touchstart.fb mousedown.fb touchmove.fb mousemove.fb touchend.fb touchcancel.fb mouseup.fb mouseleave.fb');
	    };
	
	    Guestures.prototype.ontouchstart = function (e) {
	
	        var self = this;
	
	        var $target = $(e.target);
	        var instance = self.instance;
	        var current = instance.current;
	        var $content = current.$content || current.$placeholder;
	
	        self.startPoints = pointers(e);
	
	        self.$target = $target;
	        self.$content = $content;
	
	        self.canvasWidth = Math.round(current.$slide[0].clientWidth);
	        self.canvasHeight = Math.round(current.$slide[0].clientHeight);
	
	        self.startEvent = e;
	
	        // Skip if clicked on the scrollbar
	        if (e.originalEvent.clientX > self.canvasWidth + current.$slide.offset().left) {
	            return true;
	        }
	
	        // Ignore taping on links, buttons and scrollable items
	        if (isClickable($target) || isClickable($target.parent()) || isScrollable($target)) {
	            return;
	        }
	
	        // If "touch" is disabled, then handle click event
	        if (!current.opts.touch) {
	            self.endPoints = self.startPoints;
	
	            return self.ontap();
	        }
	
	        // Ignore right click
	        if (e.originalEvent && e.originalEvent.button == 2) {
	            return;
	        }
	
	        e.stopPropagation();
	        e.preventDefault();
	
	        if (!current || self.instance.isAnimating || self.instance.isClosing) {
	            return;
	        }
	
	        // Prevent zooming if already swiping
	        if (!self.startPoints || self.startPoints.length > 1 && !current.isMoved) {
	            return;
	        }
	
	        self.$wrap.off('touchmove.fb mousemove.fb', $.proxy(self, "ontouchmove"));
	        self.$wrap.off('touchend.fb touchcancel.fb mouseup.fb mouseleave.fb', $.proxy(self, "ontouchend"));
	
	        self.$wrap.on('touchend.fb touchcancel.fb mouseup.fb mouseleave.fb', $.proxy(self, "ontouchend"));
	        self.$wrap.on('touchmove.fb mousemove.fb', $.proxy(self, "ontouchmove"));
	
	        self.startTime = new Date().getTime();
	        self.distanceX = self.distanceY = self.distance = 0;
	
	        self.canTap = false;
	        self.isPanning = false;
	        self.isSwiping = false;
	        self.isZooming = false;
	
	        self.sliderStartPos = $.fancybox.getTranslate(self.$slider);
	
	        self.contentStartPos = $.fancybox.getTranslate(self.$content);
	        self.contentLastPos = null;
	
	        if (self.startPoints.length === 1 && !self.isZooming) {
	            self.canTap = current.isMoved;
	
	            if (current.type === 'image' && (self.contentStartPos.width > self.canvasWidth + 1 || self.contentStartPos.height > self.canvasHeight + 1)) {
	
	                $.fancybox.stop(self.$content);
	
	                self.isPanning = true;
	            } else {
	
	                $.fancybox.stop(self.$slider);
	
	                self.isSwiping = true;
	            }
	
	            self.$container.addClass('fancybox-controls--isGrabbing');
	        }
	
	        if (self.startPoints.length === 2 && current.isMoved && !current.hasError && current.type === 'image' && (current.isLoaded || current.$ghost)) {
	
	            self.isZooming = true;
	
	            self.isSwiping = false;
	            self.isPanning = false;
	
	            $.fancybox.stop(self.$content);
	
	            self.centerPointStartX = (self.startPoints[0].x + self.startPoints[1].x) * 0.5 - $(window).scrollLeft();
	            self.centerPointStartY = (self.startPoints[0].y + self.startPoints[1].y) * 0.5 - $(window).scrollTop();
	
	            self.percentageOfImageAtPinchPointX = (self.centerPointStartX - self.contentStartPos.left) / self.contentStartPos.width;
	            self.percentageOfImageAtPinchPointY = (self.centerPointStartY - self.contentStartPos.top) / self.contentStartPos.height;
	
	            self.startDistanceBetweenFingers = distance(self.startPoints[0], self.startPoints[1]);
	        }
	    };
	
	    Guestures.prototype.ontouchmove = function (e) {
	
	        var self = this;
	
	        e.preventDefault();
	
	        self.newPoints = pointers(e);
	
	        if (!self.newPoints || !self.newPoints.length) {
	            return;
	        }
	
	        self.distanceX = distance(self.newPoints[0], self.startPoints[0], 'x');
	        self.distanceY = distance(self.newPoints[0], self.startPoints[0], 'y');
	
	        self.distance = distance(self.newPoints[0], self.startPoints[0]);
	
	        // Skip false ontouchmove events (Chrome)
	        if (self.distance > 0) {
	
	            if (self.isSwiping) {
	                self.onSwipe();
	            } else if (self.isPanning) {
	                self.onPan();
	            } else if (self.isZooming) {
	                self.onZoom();
	            }
	        }
	    };
	
	    Guestures.prototype.onSwipe = function () {
	
	        var self = this;
	
	        var swiping = self.isSwiping;
	        var left = self.sliderStartPos.left;
	        var angle;
	
	        if (swiping === true) {
	
	            if (Math.abs(self.distance) > 10) {
	
	                if (self.instance.group.length < 2) {
	                    self.isSwiping = 'y';
	                } else if (!self.instance.current.isMoved || self.instance.opts.touch.vertical === false || self.instance.opts.touch.vertical === 'auto' && $(window).width() > 800) {
	                    self.isSwiping = 'x';
	                } else {
	                    angle = Math.abs(Math.atan2(self.distanceY, self.distanceX) * 180 / Math.PI);
	
	                    self.isSwiping = angle > 45 && angle < 135 ? 'y' : 'x';
	                }
	
	                self.canTap = false;
	
	                self.instance.current.isMoved = false;
	
	                // Reset points to avoid jumping, because we dropped first swipes to calculate the angle
	                self.startPoints = self.newPoints;
	            }
	        } else {
	
	            if (swiping == 'x') {
	
	                // Sticky edges
	                if (!self.instance.current.opts.loop && self.instance.current.index === 0 && self.distanceX > 0) {
	                    left = left + Math.pow(self.distanceX, 0.8);
	                } else if (!self.instance.current.opts.loop && self.instance.current.index === self.instance.group.length - 1 && self.distanceX < 0) {
	                    left = left - Math.pow(-self.distanceX, 0.8);
	                } else {
	                    left = left + self.distanceX;
	                }
	            }
	
	            self.sliderLastPos = {
	                top: swiping == 'x' ? 0 : self.sliderStartPos.top + self.distanceY,
	                left: left
	            };
	
	            requestAFrame(function () {
	                $.fancybox.setTranslate(self.$slider, self.sliderLastPos);
	            });
	        }
	    };
	
	    Guestures.prototype.onPan = function () {
	
	        var self = this;
	
	        var newOffsetX, newOffsetY, newPos;
	
	        self.canTap = false;
	
	        if (self.contentStartPos.width > self.canvasWidth) {
	            newOffsetX = self.contentStartPos.left + self.distanceX;
	        } else {
	            newOffsetX = self.contentStartPos.left;
	        }
	
	        newOffsetY = self.contentStartPos.top + self.distanceY;
	
	        newPos = self.limitMovement(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height);
	
	        newPos.scaleX = self.contentStartPos.scaleX;
	        newPos.scaleY = self.contentStartPos.scaleY;
	
	        self.contentLastPos = newPos;
	
	        requestAFrame(function () {
	            $.fancybox.setTranslate(self.$content, self.contentLastPos);
	        });
	    };
	
	    // Make panning sticky to the edges
	    Guestures.prototype.limitMovement = function (newOffsetX, newOffsetY, newWidth, newHeight) {
	
	        var self = this;
	
	        var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY;
	
	        var canvasWidth = self.canvasWidth;
	        var canvasHeight = self.canvasHeight;
	
	        var currentOffsetX = self.contentStartPos.left;
	        var currentOffsetY = self.contentStartPos.top;
	
	        var distanceX = self.distanceX;
	        var distanceY = self.distanceY;
	
	        // Slow down proportionally to traveled distance
	
	        minTranslateX = Math.max(0, canvasWidth * 0.5 - newWidth * 0.5);
	        minTranslateY = Math.max(0, canvasHeight * 0.5 - newHeight * 0.5);
	
	        maxTranslateX = Math.min(canvasWidth - newWidth, canvasWidth * 0.5 - newWidth * 0.5);
	        maxTranslateY = Math.min(canvasHeight - newHeight, canvasHeight * 0.5 - newHeight * 0.5);
	
	        if (newWidth > canvasWidth) {
	
	            //   ->
	            if (distanceX > 0 && newOffsetX > minTranslateX) {
	                newOffsetX = minTranslateX - 1 + Math.pow(-minTranslateX + currentOffsetX + distanceX, 0.8) || 0;
	            }
	
	            //    <-
	            if (distanceX < 0 && newOffsetX < maxTranslateX) {
	                newOffsetX = maxTranslateX + 1 - Math.pow(maxTranslateX - currentOffsetX - distanceX, 0.8) || 0;
	            }
	        }
	
	        if (newHeight > canvasHeight) {
	
	            //   \/
	            if (distanceY > 0 && newOffsetY > minTranslateY) {
	                newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8) || 0;
	            }
	
	            //   /\
	            if (distanceY < 0 && newOffsetY < maxTranslateY) {
	                newOffsetY = maxTranslateY + 1 - Math.pow(maxTranslateY - currentOffsetY - distanceY, 0.8) || 0;
	            }
	        }
	
	        return {
	            top: newOffsetY,
	            left: newOffsetX
	        };
	    };
	
	    Guestures.prototype.limitPosition = function (newOffsetX, newOffsetY, newWidth, newHeight) {
	
	        var self = this;
	
	        var canvasWidth = self.canvasWidth;
	        var canvasHeight = self.canvasHeight;
	
	        if (newWidth > canvasWidth) {
	            newOffsetX = newOffsetX > 0 ? 0 : newOffsetX;
	            newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX;
	        } else {
	
	            // Center horizontally
	            newOffsetX = Math.max(0, canvasWidth / 2 - newWidth / 2);
	        }
	
	        if (newHeight > canvasHeight) {
	            newOffsetY = newOffsetY > 0 ? 0 : newOffsetY;
	            newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY;
	        } else {
	
	            // Center vertically
	            newOffsetY = Math.max(0, canvasHeight / 2 - newHeight / 2);
	        }
	
	        return {
	            top: newOffsetY,
	            left: newOffsetX
	        };
	    };
	
	    Guestures.prototype.onZoom = function () {
	        // hardcode disable zoom
	        // return;
	
	        var self = this;
	
	        // Calculate current distance between points to get pinch ratio and new width and height
	
	        var currentWidth = self.contentStartPos.width;
	        var currentHeight = self.contentStartPos.height;
	
	        var currentOffsetX = self.contentStartPos.left;
	        var currentOffsetY = self.contentStartPos.top;
	
	        var endDistanceBetweenFingers = distance(self.newPoints[0], self.newPoints[1]);
	
	        var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers;
	
	        var newWidth = Math.floor(currentWidth * pinchRatio);
	        var newHeight = Math.floor(currentHeight * pinchRatio);
	
	        // This is the translation due to pinch-zooming
	        var translateFromZoomingX = (currentWidth - newWidth) * self.percentageOfImageAtPinchPointX;
	        var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY;
	
	        //Point between the two touches
	
	        var centerPointEndX = (self.newPoints[0].x + self.newPoints[1].x) / 2 - $(window).scrollLeft();
	        var centerPointEndY = (self.newPoints[0].y + self.newPoints[1].y) / 2 - $(window).scrollTop();
	
	        // And this is the translation due to translation of the centerpoint
	        // between the two fingers
	
	        var translateFromTranslatingX = centerPointEndX - self.centerPointStartX;
	        var translateFromTranslatingY = centerPointEndY - self.centerPointStartY;
	
	        // The new offset is the old/current one plus the total translation
	
	        var newOffsetX = currentOffsetX + (translateFromZoomingX + translateFromTranslatingX);
	        var newOffsetY = currentOffsetY + (translateFromZoomingY + translateFromTranslatingY);
	
	        var newPos = {
	            top: newOffsetY,
	            left: newOffsetX,
	            scaleX: self.contentStartPos.scaleX * pinchRatio,
	            scaleY: self.contentStartPos.scaleY * pinchRatio
	        };
	
	        self.canTap = false;
	
	        self.newWidth = newWidth;
	        self.newHeight = newHeight;
	
	        self.contentLastPos = newPos;
	
	        requestAFrame(function () {
	            $.fancybox.setTranslate(self.$content, self.contentLastPos);
	        });
	    };
	
	    Guestures.prototype.ontouchend = function (e) {
	
	        var self = this;
	
	        var current = self.instance.current;
	
	        var dMs = Math.max(new Date().getTime() - self.startTime, 1);
	
	        var swiping = self.isSwiping;
	        var panning = self.isPanning;
	        var zooming = self.isZooming;
	
	        self.endPoints = pointers(e);
	
	        self.$container.removeClass('fancybox-controls--isGrabbing');
	
	        self.$wrap.off('touchmove.fb mousemove.fb', $.proxy(this, "ontouchmove"));
	        self.$wrap.off('touchend.fb touchcancel.fb mouseup.fb mouseleave.fb', $.proxy(this, "ontouchend"));
	
	        self.isSwiping = false;
	        self.isPanning = false;
	        self.isZooming = false;
	
	        if (self.canTap) {
	            return self.ontap();
	        }
	
	        // Speed in px/ms
	        self.velocityX = self.distanceX / dMs * 0.5;
	        self.velocityY = self.distanceY / dMs * 0.5;
	
	        self.speed = current.opts.speed || 330;
	
	        self.speedX = Math.max(self.speed * 0.75, Math.min(self.speed * 1.5, 1 / Math.abs(self.velocityX) * self.speed));
	        self.speedY = Math.max(self.speed * 0.75, Math.min(self.speed * 1.5, 1 / Math.abs(self.velocityY) * self.speed));
	
	        if (panning) {
	            self.endPanning();
	        } else if (zooming) {
	            self.endZooming();
	        } else {
	            self.endSwiping(swiping);
	        }
	
	        return;
	    };
	
	    Guestures.prototype.endSwiping = function (swiping) {
	
	        var self = this;
	
	        // Close if swiped vertically / navigate if horizontally
	
	        if (swiping == 'y' && Math.abs(self.distanceY) > 50) {
	
	            // Continue vertical movement
	
	            $.fancybox.animate(self.$slider, null, {
	                top: self.sliderStartPos.top + self.distanceY + self.velocityY * 150,
	                left: self.sliderStartPos.left,
	                opacity: 0
	            }, self.speedY);
	
	            self.instance.close(true);
	        } else if (swiping == 'x' && self.distanceX > 50) {
	            self.instance.previous(self.speedX);
	        } else if (swiping == 'x' && self.distanceX < -50) {
	            self.instance.next(self.speedX);
	        } else {
	
	            // Move back to center
	            self.instance.update(false, true, 150);
	        }
	    };
	
	    Guestures.prototype.endPanning = function () {
	
	        var self = this;
	        var newOffsetX, newOffsetY, newPos;
	
	        if (!self.contentLastPos) {
	            return;
	        }
	
	        newOffsetX = self.contentLastPos.left + self.velocityX * self.speed * 2;
	        newOffsetY = self.contentLastPos.top + self.velocityY * self.speed * 2;
	
	        newPos = self.limitPosition(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height);
	
	        newPos.width = self.contentStartPos.width;
	        newPos.height = self.contentStartPos.height;
	
	        $.fancybox.animate(self.$content, null, newPos, self.speed, "easeOutSine");
	    };
	
	    Guestures.prototype.endZooming = function () {
	
	        var self = this;
	
	        var current = self.instance.current;
	
	        var newOffsetX, newOffsetY, newPos, reset;
	
	        var newWidth = self.newWidth;
	        var newHeight = self.newHeight;
	
	        if (!self.contentLastPos) {
	            return;
	        }
	
	        newOffsetX = self.contentLastPos.left;
	        newOffsetY = self.contentLastPos.top;
	
	        reset = {
	            top: newOffsetY,
	            left: newOffsetX,
	            width: newWidth,
	            height: newHeight,
	            scaleX: 1,
	            scaleY: 1
	        };
	
	        // Reset scalex/scaleY values; this helps for perfomance and does not break animation
	        $.fancybox.setTranslate(self.$content, reset);
	
	        if (newWidth < self.canvasWidth && newHeight < self.canvasHeight) {
	            self.instance.scaleToFit(150);
	        } else if (newWidth > current.width || newHeight > current.height) {
	            self.instance.scaleToActual(self.centerPointStartX, self.centerPointStartY, 150);
	        } else {
	
	            newPos = self.limitPosition(newOffsetX, newOffsetY, newWidth, newHeight);
	
	            $.fancybox.animate(self.$content, null, newPos, self.speed, "easeOutSine");
	        }
	    };
	
	    Guestures.prototype.ontap = function () {
	
	        var self = this;
	
	        var instance = self.instance;
	        var current = instance.current;
	
	        var x = self.endPoints[0].x;
	        var y = self.endPoints[0].y;
	
	        x = x - self.$wrap.offset().left;
	        y = y - self.$wrap.offset().top;
	
	        // Stop slideshow
	        if (instance.SlideShow && instance.SlideShow.isActive) {
	            instance.SlideShow.stop();
	        }
	
	        if (!$.fancybox.isTouch) {
	
	            if (current.opts.closeClickOutside && self.$target.is('.fancybox-slide')) {
	                instance.close(self.startEvent);
	
	                return;
	            }
	
	            if (current.type == 'image' && current.isMoved) {
	
	                // if ( instance.canPan() ) {
	                // 	instance.scaleToFit();
	
	                // } else if ( instance.isScaledDown() ) {
	                // 	instance.scaleToActual( x, y );
	
	                // } else
	                if (instance.group.length < 2) {
	                    instance.close(self.startEvent);
	                }
	            }
	
	            return;
	        }
	
	        // Double tap
	        if (self.tapped) {
	
	            clearTimeout(self.tapped);
	
	            self.tapped = null;
	
	            if (Math.abs(x - self.x) > 50 || Math.abs(y - self.y) > 50 || !current.isMoved) {
	                return this;
	            }
	
	            if (current.type == 'image' && (current.isLoaded || current.$ghost)) {
	
	                if (instance.canPan()) {
	                    instance.scaleToFit();
	                } else if (instance.isScaledDown()) {
	                    instance.scaleToActual(x, y);
	                }
	            }
	        } else {
	
	            // Single tap
	
	            self.x = x;
	            self.y = y;
	
	            self.tapped = setTimeout(function () {
	                self.tapped = null;
	
	                instance.toggleControls(true);
	            }, 300);
	        }
	
	        return this;
	    };
	
	    $(document).on('onActivate.fb', function (e, instance) {
	
	        if (instance && !instance.Guestures) {
	            instance.Guestures = new Guestures(instance);
	        }
	    });
	
	    $(document).on('beforeClose.fb', function (e, instance) {
	
	        if (instance && instance.Guestures) {
	            instance.Guestures.destroy();
	        }
	    });
	})(window, document, window.jQuery);
	
	// ==========================================================================
	//
	// SlideShow
	// Enables slideshow functionality
	//
	// Example of usage:
	// $.fancybox.getInstance().slideShow.start()
	//
	// ==========================================================================
	;(function (document, $) {
	    'use strict';
	
	    var SlideShow = function SlideShow(instance) {
	
	        this.instance = instance;
	
	        this.init();
	    };
	
	    $.extend(SlideShow.prototype, {
	        timer: null,
	        isActive: false,
	        $button: null,
	        speed: 3000,
	
	        init: function init() {
	            var self = this;
	
	            self.$button = $('<button data-fancybox-play class="fancybox-button fancybox-button--play" title="Slideshow (P)"></button>').appendTo(self.instance.$refs.buttons);
	
	            self.instance.$refs.container.on('click', '[data-fancybox-play]', function () {
	                self.toggle();
	            });
	        },
	
	        set: function set() {
	            var self = this;
	
	            // Check if reached last element
	            if (self.instance && self.instance.current && (self.instance.current.opts.loop || self.instance.currIndex < self.instance.group.length - 1)) {
	
	                self.timer = setTimeout(function () {
	                    self.instance.next();
	                }, self.instance.current.opts.slideShow.speed || self.speed);
	            } else {
	                self.stop();
	            }
	        },
	
	        clear: function clear() {
	            var self = this;
	
	            clearTimeout(self.timer);
	
	            self.timer = null;
	        },
	
	        start: function start() {
	            var self = this;
	
	            self.stop();
	
	            if (self.instance && self.instance.current && (self.instance.current.opts.loop || self.instance.currIndex < self.instance.group.length - 1)) {
	
	                self.instance.$refs.container.on({
	                    'beforeLoad.fb.player': $.proxy(self, "clear"),
	                    'onComplete.fb.player': $.proxy(self, "set")
	                });
	
	                self.isActive = true;
	
	                if (self.instance.current.isComplete) {
	                    self.set();
	                }
	
	                self.instance.$refs.container.trigger('onPlayStart');
	
	                self.$button.addClass('fancybox-button--pause');
	            }
	        },
	
	        stop: function stop() {
	            var self = this;
	
	            self.clear();
	
	            self.instance.$refs.container.trigger('onPlayEnd').off('.player');
	
	            self.$button.removeClass('fancybox-button--pause');
	
	            self.isActive = false;
	        },
	
	        toggle: function toggle() {
	            var self = this;
	
	            if (self.isActive) {
	                self.stop();
	            } else {
	                self.start();
	            }
	        }
	
	    });
	
	    $(document).on('onInit.fb', function (e, instance) {
	
	        if (instance && instance.group.length > 1 && !!instance.opts.slideShow && !instance.SlideShow) {
	            instance.SlideShow = new SlideShow(instance);
	        }
	    });
	
	    $(document).on('beforeClose.fb onDeactivate.fb', function (e, instance) {
	
	        if (instance && instance.SlideShow) {
	            instance.SlideShow.stop();
	        }
	    });
	})(document, window.jQuery);
	
	// ==========================================================================
	//
	// FullScreen
	// Adds fullscreen functionality
	//
	// ==========================================================================
	;(function (document, $) {
	    'use strict';
	
	    // Collection of methods supported by user browser
	
	    var fn = function () {
	
	        var fnMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
	        // new WebKit
	        ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	        // old WebKit (Safari 5.1)
	        ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];
	
	        var val;
	        var ret = {};
	        var i, j;
	
	        for (i = 0; i < fnMap.length; i++) {
	            val = fnMap[i];
	
	            if (val && val[1] in document) {
	                for (j = 0; j < val.length; j++) {
	                    ret[fnMap[0][j]] = val[j];
	                }
	
	                return ret;
	            }
	        }
	
	        return false;
	    }();
	
	    if (!fn) {
	        return;
	    }
	
	    var FullScreen = {
	        request: function request(elem) {
	
	            elem = elem || document.documentElement;
	
	            elem[fn.requestFullscreen](elem.ALLOW_KEYBOARD_INPUT);
	        },
	        exit: function exit() {
	            document[fn.exitFullscreen]();
	        },
	        toggle: function toggle(elem) {
	
	            if (this.isFullscreen()) {
	                this.exit();
	            } else {
	                this.request(elem);
	            }
	        },
	        isFullscreen: function isFullscreen() {
	            return Boolean(document[fn.fullscreenElement]);
	        },
	        enabled: function enabled() {
	            return Boolean(document[fn.fullscreenEnabled]);
	        }
	    };
	
	    $(document).on({
	        'onInit.fb': function onInitFb(e, instance) {
	            var $container;
	
	            if (instance && !!instance.opts.fullScreen && !instance.FullScreen) {
	                $container = instance.$refs.container;
	
	                instance.$refs.button_fs = $('<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="Full screen (F)"></button>').appendTo(instance.$refs.buttons);
	
	                $container.on('click.fb-fullscreen', '[data-fancybox-fullscreen]', function (e) {
	
	                    e.stopPropagation();
	                    e.preventDefault();
	
	                    FullScreen.toggle($container[0]);
	                });
	
	                if (instance.opts.fullScreen.requestOnStart === true) {
	                    FullScreen.request($container[0]);
	                }
	            }
	        }, 'beforeMove.fb': function beforeMoveFb(e, instance) {
	
	            if (instance && instance.$refs.button_fs) {
	                instance.$refs.button_fs.toggle(!!instance.current.opts.fullScreen);
	            }
	        }, 'beforeClose.fb': function beforeCloseFb() {
	            FullScreen.exit();
	        }
	    });
	
	    $(document).on(fn.fullscreenchange, function () {
	        var instance = $.fancybox.getInstance();
	        var $what = instance ? instance.current.$placeholder : null;
	
	        if ($what) {
	
	            // If image is zooming, then this will force it to stop and reposition properly
	            $what.css('transition', 'none');
	
	            instance.isAnimating = false;
	
	            instance.update(true, true, 0);
	        }
	    });
	})(document, window.jQuery);
	
	// ==========================================================================
	//
	// Thumbs
	// Displays thumbnails in a grid
	//
	// ==========================================================================
	;(function (document, $) {
	    'use strict';
	
	    var FancyThumbs = function FancyThumbs(instance) {
	
	        this.instance = instance;
	
	        this.init();
	    };
	
	    $.extend(FancyThumbs.prototype, {
	
	        $button: null,
	        $grid: null,
	        $list: null,
	        isVisible: false,
	
	        init: function init() {
	            var self = this;
	
	            self.$button = $('<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="Thumbnails (G)"></button>').appendTo(this.instance.$refs.buttons).on('touchend click', function (e) {
	                e.stopPropagation();
	                e.preventDefault();
	
	                self.toggle();
	            });
	        },
	
	        create: function create() {
	            var instance = this.instance,
	                list,
	                src;
	
	            this.$grid = $('<div class="fancybox-thumbs"></div>').appendTo(instance.$refs.container);
	
	            list = '<ul>';
	
	            $.each(instance.group, function (i, item) {
	
	                src = item.opts.thumb || (item.opts.$thumb ? item.opts.$thumb.attr('src') : null);
	
	                if (!src && item.type === 'image') {
	                    src = item.src;
	                }
	
	                if (src && src.length) {
	                    list += '<li data-index="' + i + '"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="' + src + '" /></li>';
	                }
	            });
	
	            list += '</ul>';
	
	            this.$list = $(list).appendTo(this.$grid).on('click touchstart', 'li', function () {
	
	                instance.jumpTo($(this).data('index'));
	            });
	
	            this.$list.find('img').hide().one('load', function () {
	
	                var $parent = $(this).parent().removeClass('fancybox-thumbs-loading'),
	                    thumbWidth = $parent.outerWidth(),
	                    thumbHeight = $parent.outerHeight(),
	                    width,
	                    height,
	                    widthRatio,
	                    heightRatio;
	
	                width = this.naturalWidth || this.width;
	                height = this.naturalHeight || this.height;
	
	                //Calculate thumbnail width/height and center it
	
	                widthRatio = width / thumbWidth;
	                heightRatio = height / thumbHeight;
	
	                if (widthRatio >= 1 && heightRatio >= 1) {
	                    if (widthRatio > heightRatio) {
	                        width = width / heightRatio;
	                        height = thumbHeight;
	                    } else {
	                        width = thumbWidth;
	                        height = height / widthRatio;
	                    }
	                }
	
	                $(this).css({
	                    width: Math.floor(width),
	                    height: Math.floor(height),
	                    'margin-top': Math.min(0, Math.floor(thumbHeight * 0.3 - height * 0.3)),
	                    'margin-left': Math.min(0, Math.floor(thumbWidth * 0.5 - width * 0.5))
	                }).show();
	            }).each(function () {
	                this.src = $(this).data('src');
	            });
	        },
	
	        focus: function focus() {
	
	            if (this.instance.current) {
	                this.$list.children().removeClass('fancybox-thumbs-active').filter('[data-index="' + this.instance.current.index + '"]').addClass('fancybox-thumbs-active').focus();
	            }
	        },
	
	        close: function close() {
	
	            this.$grid.hide();
	        },
	
	        update: function update() {
	
	            this.instance.$refs.container.toggleClass('fancybox-container--thumbs', this.isVisible);
	
	            if (this.isVisible) {
	
	                if (!this.$grid) {
	                    this.create();
	                }
	
	                this.$grid.show();
	
	                this.focus();
	            } else if (this.$grid) {
	                this.$grid.hide();
	            }
	
	            this.instance.update();
	        },
	
	        hide: function hide() {
	
	            this.isVisible = false;
	
	            this.update();
	        },
	
	        show: function show() {
	
	            this.isVisible = true;
	
	            this.update();
	        },
	
	        toggle: function toggle() {
	
	            if (this.isVisible) {
	                this.hide();
	            } else {
	                this.show();
	            }
	        }
	
	    });
	
	    $(document).on('onInit.fb', function (e, instance) {
	        var first = instance.group[0],
	            second = instance.group[1];
	
	        if (!!instance.opts.thumbs && !instance.Thumbs && instance.group.length > 1 && (first.type == 'image' || first.opts.thumb || first.opts.$thumb) && (second.type == 'image' || second.opts.thumb || second.opts.$thumb)) {
	
	            instance.Thumbs = new FancyThumbs(instance);
	        }
	    });
	
	    $(document).on('beforeMove.fb', function (e, instance, item) {
	        var self = instance && instance.Thumbs;
	
	        if (!self) {
	            return;
	        }
	
	        if (item.modal) {
	
	            self.$button.hide();
	
	            self.hide();
	        } else {
	
	            if (instance.opts.thumbs.showOnStart === true && instance.firstRun) {
	                self.show();
	            }
	
	            self.$button.show();
	
	            if (self.isVisible) {
	                self.focus();
	            }
	        }
	    });
	
	    $(document).on('beforeClose.fb', function (e, instance) {
	
	        if (instance && instance.Thumbs) {
	            if (instance.Thumbs.isVisible && instance.opts.thumbs.hideOnClosing !== false) {
	                instance.Thumbs.close();
	            }
	
	            instance.Thumbs = null;
	        }
	    });
	})(document, window.jQuery);
	
	// ==========================================================================
	//
	// Hash
	// Enables linking to each modal
	//
	// ==========================================================================
	;(function (document, window, $) {
	    'use strict';
	
	    // Simple $.escapeSelector polyfill (for jQuery prior v3)
	
	    if (!$.escapeSelector) {
	        $.escapeSelector = function (sel) {
	            var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
	            var fcssescape = function fcssescape(ch, asCodePoint) {
	                if (asCodePoint) {
	                    // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
	                    if (ch === "\0") {
	                        return '\uFFFD';
	                    }
	
	                    // Control characters and (dependent upon position) numbers get escaped as code points
	                    return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
	                }
	
	                // Other potentially-special ASCII characters get backslash-escaped
	                return "\\" + ch;
	            };
	
	            return (sel + "").replace(rcssescape, fcssescape);
	        };
	    }
	
	    // Variable containing last hash value set by fancyBox
	    // It will be used to determine if fancyBox needs to close after hash change is detected
	    var currentHash = null;
	
	    // Get info about gallery name and current index from url
	    function parseUrl() {
	        var hash = window.location.hash.substr(1);
	        var rez = hash.split('-');
	        var index = rez.length > 1 && /^\+?\d+$/.test(rez[rez.length - 1]) ? parseInt(rez.pop(-1), 10) || 1 : 1;
	        var gallery = rez.join('-');
	
	        // Index is starting from 1
	        if (index < 1) {
	            index = 1;
	        }
	
	        return {
	            hash: hash,
	            index: index,
	            gallery: gallery
	        };
	    }
	
	    // Trigger click evnt on links to open new fancyBox instance
	    function triggerFromUrl(url) {
	        var $el;
	
	        if (url.gallery !== '') {
	
	            // If we can find element matching 'data-fancybox' atribute, then trigger click event for that ..
	            $el = $("[data-fancybox='" + $.escapeSelector(url.gallery) + "']").eq(url.index - 1);
	
	            if ($el.length) {
	                $el.trigger('click');
	            } else {
	
	                // .. if not, try finding element by ID
	                $("#" + $.escapeSelector(url.gallery) + "").trigger('click');
	            }
	        }
	    }
	
	    // Get gallery name from current instance
	    function getGallery(instance) {
	        var opts;
	
	        if (!instance) {
	            return false;
	        }
	
	        opts = instance.current ? instance.current.opts : instance.opts;
	
	        return opts.$orig ? opts.$orig.data('fancybox') : opts.hash || '';
	    }
	
	    // Star when DOM becomes ready
	    $(function () {
	
	        // Small delay is used to allow other scripts to process "dom ready" event
	        setTimeout(function () {
	
	            // Check if this module is not disabled
	            if ($.fancybox.defaults.hash === false) {
	                return;
	            }
	
	            // Check if need to close after url has changed
	            $(window).on('hashchange.fb', function () {
	                var url = parseUrl();
	
	                if ($.fancybox.getInstance()) {
	                    if (currentHash && currentHash !== url.gallery + '-' + url.index) {
	                        currentHash = null;
	
	                        $.fancybox.close();
	                    }
	                } else if (url.gallery !== '') {
	                    triggerFromUrl(url);
	                }
	            });
	
	            // Update hash when opening/closing fancyBox
	            $(document).on({
	                'onInit.fb': function onInitFb(e, instance) {
	                    var url = parseUrl();
	                    var gallery = getGallery(instance);
	
	                    // Make sure gallery start index matches index from hash
	                    if (gallery && url.gallery && gallery == url.gallery) {
	                        instance.currIndex = url.index - 1;
	                    }
	                }, 'beforeMove.fb': function beforeMoveFb(e, instance, current) {
	                    var gallery = getGallery(instance);
	
	                    // Update window hash
	                    if (gallery && gallery !== '') {
	
	                        if (window.location.hash.indexOf(gallery) < 0) {
	                            instance.opts.origHash = window.location.hash;
	                        }
	
	                        currentHash = gallery + (instance.group.length > 1 ? '-' + (current.index + 1) : '');
	
	                        if ("pushState" in history) {
	                            history.pushState('', document.title, window.location.pathname + window.location.search + '#' + currentHash);
	                        } else {
	                            window.location.hash = currentHash;
	                        }
	                    }
	                }, 'beforeClose.fb': function beforeCloseFb(e, instance, current) {
	                    var gallery = getGallery(instance);
	                    var origHash = instance && instance.opts.origHash ? instance.opts.origHash : '';
	
	                    // Remove hash from location bar
	                    if (gallery && gallery !== '') {
	                        if ("pushState" in history) {
	                            history.pushState('', document.title, window.location.pathname + window.location.search + origHash);
	                        } else {
	                            window.location.hash = origHash;
	                        }
	                    }
	
	                    currentHash = null;
	                }
	            });
	
	            // Check current hash and trigger click event on matching element to start fancyBox, if needed
	            triggerFromUrl(parseUrl());
	        }, 50);
	    });
	})(document, window, window.jQuery);

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	     _ _      _       _
	 ___| (_) ___| | __  (_)___
	/ __| | |/ __| |/ /  | / __|
	\__ \ | | (__|   < _ | \__ \
	|___/_|_|\___|_|\_(_)/ |___/
	                   |__/
	
	 Version: 1.6.0
	  Author: Ken Wheeler
	 Website: http://kenwheeler.github.io
	    Docs: http://kenwheeler.github.io/slick
	    Repo: http://github.com/kenwheeler/slick
	  Issues: http://github.com/kenwheeler/slick/issues
	
	 */
	/* global window, document, define, jQuery, setInterval, clearInterval */
	(function(factory) {
	    'use strict';
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(56)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== 'undefined') {
	        module.exports = factory(require('jquery'));
	    } else {
	        factory(jQuery);
	    }
	
	}(function($) {
	    'use strict';
	    var Slick = window.Slick || {};
	
	    Slick = (function() {
	
	        var instanceUid = 0;
	
	        function Slick(element, settings) {
	
	            var _ = this, dataSettings;
	
	            _.defaults = {
	                accessibility: true,
	                adaptiveHeight: false,
	                appendArrows: $(element),
	                appendDots: $(element),
	                arrows: true,
	                asNavFor: null,
	                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
	                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
	                autoplay: false,
	                autoplaySpeed: 3000,
	                centerMode: false,
	                centerPadding: '50px',
	                cssEase: 'ease',
	                customPaging: function(slider, i) {
	                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
	                },
	                dots: false,
	                dotsClass: 'slick-dots',
	                draggable: true,
	                easing: 'linear',
	                edgeFriction: 0.35,
	                fade: false,
	                focusOnSelect: false,
	                infinite: true,
	                initialSlide: 0,
	                lazyLoad: 'ondemand',
	                mobileFirst: false,
	                pauseOnHover: true,
	                pauseOnFocus: true,
	                pauseOnDotsHover: false,
	                respondTo: 'window',
	                responsive: null,
	                rows: 1,
	                rtl: false,
	                slide: '',
	                slidesPerRow: 1,
	                slidesToShow: 1,
	                slidesToScroll: 1,
	                speed: 500,
	                swipe: true,
	                swipeToSlide: false,
	                touchMove: true,
	                touchThreshold: 5,
	                useCSS: true,
	                useTransform: true,
	                variableWidth: false,
	                vertical: false,
	                verticalSwiping: false,
	                waitForAnimate: true,
	                zIndex: 1000
	            };
	
	            _.initials = {
	                animating: false,
	                dragging: false,
	                autoPlayTimer: null,
	                currentDirection: 0,
	                currentLeft: null,
	                currentSlide: 0,
	                direction: 1,
	                $dots: null,
	                listWidth: null,
	                listHeight: null,
	                loadIndex: 0,
	                $nextArrow: null,
	                $prevArrow: null,
	                slideCount: null,
	                slideWidth: null,
	                $slideTrack: null,
	                $slides: null,
	                sliding: false,
	                slideOffset: 0,
	                swipeLeft: null,
	                $list: null,
	                touchObject: {},
	                transformsEnabled: false,
	                unslicked: false
	            };
	
	            $.extend(_, _.initials);
	
	            _.activeBreakpoint = null;
	            _.animType = null;
	            _.animProp = null;
	            _.breakpoints = [];
	            _.breakpointSettings = [];
	            _.cssTransitions = false;
	            _.focussed = false;
	            _.interrupted = false;
	            _.hidden = 'hidden';
	            _.paused = true;
	            _.positionProp = null;
	            _.respondTo = null;
	            _.rowCount = 1;
	            _.shouldClick = true;
	            _.$slider = $(element);
	            _.$slidesCache = null;
	            _.transformType = null;
	            _.transitionType = null;
	            _.visibilityChange = 'visibilitychange';
	            _.windowWidth = 0;
	            _.windowTimer = null;
	
	            dataSettings = $(element).data('slick') || {};
	
	            _.options = $.extend({}, _.defaults, settings, dataSettings);
	
	            _.currentSlide = _.options.initialSlide;
	
	            _.originalSettings = _.options;
	
	            if (typeof document.mozHidden !== 'undefined') {
	                _.hidden = 'mozHidden';
	                _.visibilityChange = 'mozvisibilitychange';
	            } else if (typeof document.webkitHidden !== 'undefined') {
	                _.hidden = 'webkitHidden';
	                _.visibilityChange = 'webkitvisibilitychange';
	            }
	
	            _.autoPlay = $.proxy(_.autoPlay, _);
	            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
	            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
	            _.changeSlide = $.proxy(_.changeSlide, _);
	            _.clickHandler = $.proxy(_.clickHandler, _);
	            _.selectHandler = $.proxy(_.selectHandler, _);
	            _.setPosition = $.proxy(_.setPosition, _);
	            _.swipeHandler = $.proxy(_.swipeHandler, _);
	            _.dragHandler = $.proxy(_.dragHandler, _);
	            _.keyHandler = $.proxy(_.keyHandler, _);
	
	            _.instanceUid = instanceUid++;
	
	            // A simple way to check for HTML strings
	            // Strict HTML recognition (must start with <)
	            // Extracted from jQuery v1.11 source
	            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
	
	
	            _.registerBreakpoints();
	            _.init(true);
	
	        }
	
	        return Slick;
	
	    }());
	
	    Slick.prototype.activateADA = function() {
	        var _ = this;
	
	        _.$slideTrack.find('.slick-active').attr({
	            'aria-hidden': 'false'
	        }).find('a, input, button, select').attr({
	            'tabindex': '0'
	        });
	
	    };
	
	    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
	
	        var _ = this;
	
	        if (typeof(index) === 'boolean') {
	            addBefore = index;
	            index = null;
	        } else if (index < 0 || (index >= _.slideCount)) {
	            return false;
	        }
	
	        _.unload();
	
	        if (typeof(index) === 'number') {
	            if (index === 0 && _.$slides.length === 0) {
	                $(markup).appendTo(_.$slideTrack);
	            } else if (addBefore) {
	                $(markup).insertBefore(_.$slides.eq(index));
	            } else {
	                $(markup).insertAfter(_.$slides.eq(index));
	            }
	        } else {
	            if (addBefore === true) {
	                $(markup).prependTo(_.$slideTrack);
	            } else {
	                $(markup).appendTo(_.$slideTrack);
	            }
	        }
	
	        _.$slides = _.$slideTrack.children(this.options.slide);
	
	        _.$slideTrack.children(this.options.slide).detach();
	
	        _.$slideTrack.append(_.$slides);
	
	        _.$slides.each(function(index, element) {
	            $(element).attr('data-slick-index', index);
	        });
	
	        _.$slidesCache = _.$slides;
	
	        _.reinit();
	
	    };
	
	    Slick.prototype.animateHeight = function() {
	        var _ = this;
	        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
	            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
	            _.$list.animate({
	                height: targetHeight
	            }, _.options.speed);
	        }
	    };
	
	    Slick.prototype.animateSlide = function(targetLeft, callback) {
	
	        var animProps = {},
	            _ = this;
	
	        _.animateHeight();
	
	        if (_.options.rtl === true && _.options.vertical === false) {
	            targetLeft = -targetLeft;
	        }
	        if (_.transformsEnabled === false) {
	            if (_.options.vertical === false) {
	                _.$slideTrack.animate({
	                    left: targetLeft
	                }, _.options.speed, _.options.easing, callback);
	            } else {
	                _.$slideTrack.animate({
	                    top: targetLeft
	                }, _.options.speed, _.options.easing, callback);
	            }
	
	        } else {
	
	            if (_.cssTransitions === false) {
	                if (_.options.rtl === true) {
	                    _.currentLeft = -(_.currentLeft);
	                }
	                $({
	                    animStart: _.currentLeft
	                }).animate({
	                    animStart: targetLeft
	                }, {
	                    duration: _.options.speed,
	                    easing: _.options.easing,
	                    step: function(now) {
	                        now = Math.ceil(now);
	                        if (_.options.vertical === false) {
	                            animProps[_.animType] = 'translate(' +
	                                now + 'px, 0px)';
	                            _.$slideTrack.css(animProps);
	                        } else {
	                            animProps[_.animType] = 'translate(0px,' +
	                                now + 'px)';
	                            _.$slideTrack.css(animProps);
	                        }
	                    },
	                    complete: function() {
	                        if (callback) {
	                            callback.call();
	                        }
	                    }
	                });
	
	            } else {
	
	                _.applyTransition();
	                targetLeft = Math.ceil(targetLeft);
	
	                if (_.options.vertical === false) {
	                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
	                } else {
	                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
	                }
	                _.$slideTrack.css(animProps);
	
	                if (callback) {
	                    setTimeout(function() {
	
	                        _.disableTransition();
	
	                        callback.call();
	                    }, _.options.speed);
	                }
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.getNavTarget = function() {
	
	        var _ = this,
	            asNavFor = _.options.asNavFor;
	
	        if ( asNavFor && asNavFor !== null ) {
	            asNavFor = $(asNavFor).not(_.$slider);
	        }
	
	        return asNavFor;
	
	    };
	
	    Slick.prototype.asNavFor = function(index) {
	
	        var _ = this,
	            asNavFor = _.getNavTarget();
	
	        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
	            asNavFor.each(function() {
	                var target = $(this).slick('getSlick');
	                if(!target.unslicked) {
	                    target.slideHandler(index, true);
	                }
	            });
	        }
	
	    };
	
	    Slick.prototype.applyTransition = function(slide) {
	
	        var _ = this,
	            transition = {};
	
	        if (_.options.fade === false) {
	            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
	        } else {
	            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
	        }
	
	        if (_.options.fade === false) {
	            _.$slideTrack.css(transition);
	        } else {
	            _.$slides.eq(slide).css(transition);
	        }
	
	    };
	
	    Slick.prototype.autoPlay = function() {
	
	        var _ = this;
	
	        _.autoPlayClear();
	
	        if ( _.slideCount > _.options.slidesToShow ) {
	            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
	        }
	
	    };
	
	    Slick.prototype.autoPlayClear = function() {
	
	        var _ = this;
	
	        if (_.autoPlayTimer) {
	            clearInterval(_.autoPlayTimer);
	        }
	
	    };
	
	    Slick.prototype.autoPlayIterator = function() {
	
	        var _ = this,
	            slideTo = _.currentSlide + _.options.slidesToScroll;
	
	        if ( !_.paused && !_.interrupted && !_.focussed ) {
	
	            if ( _.options.infinite === false ) {
	
	                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
	                    _.direction = 0;
	                }
	
	                else if ( _.direction === 0 ) {
	
	                    slideTo = _.currentSlide - _.options.slidesToScroll;
	
	                    if ( _.currentSlide - 1 === 0 ) {
	                        _.direction = 1;
	                    }
	
	                }
	
	            }
	
	            _.slideHandler( slideTo );
	
	        }
	
	    };
	
	    Slick.prototype.buildArrows = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true ) {
	
	            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
	            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');
	
	            if( _.slideCount > _.options.slidesToShow ) {
	
	                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
	                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
	
	                if (_.htmlExpr.test(_.options.prevArrow)) {
	                    _.$prevArrow.prependTo(_.options.appendArrows);
	                }
	
	                if (_.htmlExpr.test(_.options.nextArrow)) {
	                    _.$nextArrow.appendTo(_.options.appendArrows);
	                }
	
	                if (_.options.infinite !== true) {
	                    _.$prevArrow
	                        .addClass('slick-disabled')
	                        .attr('aria-disabled', 'true');
	                }
	
	            } else {
	
	                _.$prevArrow.add( _.$nextArrow )
	
	                    .addClass('slick-hidden')
	                    .attr({
	                        'aria-disabled': 'true',
	                        'tabindex': '-1'
	                    });
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.buildDots = function() {
	
	        var _ = this,
	            i, dot;
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$slider.addClass('slick-dotted');
	
	            dot = $('<ul />').addClass(_.options.dotsClass);
	
	            for (i = 0; i <= _.getDotCount(); i += 1) {
	                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
	            }
	
	            _.$dots = dot.appendTo(_.options.appendDots);
	
	            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
	
	        }
	
	    };
	
	    Slick.prototype.buildOut = function() {
	
	        var _ = this;
	
	        _.$slides =
	            _.$slider
	                .children( _.options.slide + ':not(.slick-cloned)')
	                .addClass('slick-slide');
	
	        _.slideCount = _.$slides.length;
	
	        _.$slides.each(function(index, element) {
	            $(element)
	                .attr('data-slick-index', index)
	                .data('originalStyling', $(element).attr('style') || '');
	        });
	
	        _.$slider.addClass('slick-slider');
	
	        _.$slideTrack = (_.slideCount === 0) ?
	            $('<div class="slick-track"/>').appendTo(_.$slider) :
	            _.$slides.wrapAll('<div class="slick-track"/>').parent();
	
	        _.$list = _.$slideTrack.wrap(
	            '<div aria-live="polite" class="slick-list"/>').parent();
	        _.$slideTrack.css('opacity', 0);
	
	        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
	            _.options.slidesToScroll = 1;
	        }
	
	        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');
	
	        _.setupInfinite();
	
	        _.buildArrows();
	
	        _.buildDots();
	
	        _.updateDots();
	
	
	        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
	
	        if (_.options.draggable === true) {
	            _.$list.addClass('draggable');
	        }
	
	    };
	
	    Slick.prototype.buildRows = function() {
	
	        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;
	
	        newSlides = document.createDocumentFragment();
	        originalSlides = _.$slider.children();
	
	        if(_.options.rows > 1) {
	
	            slidesPerSection = _.options.slidesPerRow * _.options.rows;
	            numOfSlides = Math.ceil(
	                originalSlides.length / slidesPerSection
	            );
	
	            for(a = 0; a < numOfSlides; a++){
	                var slide = document.createElement('div');
	                for(b = 0; b < _.options.rows; b++) {
	                    var row = document.createElement('div');
	                    for(c = 0; c < _.options.slidesPerRow; c++) {
	                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
	                        if (originalSlides.get(target)) {
	                            row.appendChild(originalSlides.get(target));
	                        }
	                    }
	                    slide.appendChild(row);
	                }
	                newSlides.appendChild(slide);
	            }
	
	            _.$slider.empty().append(newSlides);
	            _.$slider.children().children().children()
	                .css({
	                    'width':(100 / _.options.slidesPerRow) + '%',
	                    'display': 'inline-block'
	                });
	
	        }
	
	    };
	
	    Slick.prototype.checkResponsive = function(initial, forceUpdate) {
	
	        var _ = this,
	            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
	        var sliderWidth = _.$slider.width();
	        var windowWidth = window.innerWidth || $(window).width();
	
	        if (_.respondTo === 'window') {
	            respondToWidth = windowWidth;
	        } else if (_.respondTo === 'slider') {
	            respondToWidth = sliderWidth;
	        } else if (_.respondTo === 'min') {
	            respondToWidth = Math.min(windowWidth, sliderWidth);
	        }
	
	        if ( _.options.responsive &&
	            _.options.responsive.length &&
	            _.options.responsive !== null) {
	
	            targetBreakpoint = null;
	
	            for (breakpoint in _.breakpoints) {
	                if (_.breakpoints.hasOwnProperty(breakpoint)) {
	                    if (_.originalSettings.mobileFirst === false) {
	                        if (respondToWidth < _.breakpoints[breakpoint]) {
	                            targetBreakpoint = _.breakpoints[breakpoint];
	                        }
	                    } else {
	                        if (respondToWidth > _.breakpoints[breakpoint]) {
	                            targetBreakpoint = _.breakpoints[breakpoint];
	                        }
	                    }
	                }
	            }
	
	            if (targetBreakpoint !== null) {
	                if (_.activeBreakpoint !== null) {
	                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
	                        _.activeBreakpoint =
	                            targetBreakpoint;
	                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
	                            _.unslick(targetBreakpoint);
	                        } else {
	                            _.options = $.extend({}, _.originalSettings,
	                                _.breakpointSettings[
	                                    targetBreakpoint]);
	                            if (initial === true) {
	                                _.currentSlide = _.options.initialSlide;
	                            }
	                            _.refresh(initial);
	                        }
	                        triggerBreakpoint = targetBreakpoint;
	                    }
	                } else {
	                    _.activeBreakpoint = targetBreakpoint;
	                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
	                        _.unslick(targetBreakpoint);
	                    } else {
	                        _.options = $.extend({}, _.originalSettings,
	                            _.breakpointSettings[
	                                targetBreakpoint]);
	                        if (initial === true) {
	                            _.currentSlide = _.options.initialSlide;
	                        }
	                        _.refresh(initial);
	                    }
	                    triggerBreakpoint = targetBreakpoint;
	                }
	            } else {
	                if (_.activeBreakpoint !== null) {
	                    _.activeBreakpoint = null;
	                    _.options = _.originalSettings;
	                    if (initial === true) {
	                        _.currentSlide = _.options.initialSlide;
	                    }
	                    _.refresh(initial);
	                    triggerBreakpoint = targetBreakpoint;
	                }
	            }
	
	            // only trigger breakpoints during an actual break. not on initialize.
	            if( !initial && triggerBreakpoint !== false ) {
	                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
	            }
	        }
	
	    };
	
	    Slick.prototype.changeSlide = function(event, dontAnimate) {
	
	        var _ = this,
	            $target = $(event.currentTarget),
	            indexOffset, slideOffset, unevenOffset;
	
	        // If target is a link, prevent default action.
	        if($target.is('a')) {
	            event.preventDefault();
	        }
	
	        // If target is not the <li> element (ie: a child), find the <li>.
	        if(!$target.is('li')) {
	            $target = $target.closest('li');
	        }
	
	        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
	        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
	
	        switch (event.data.message) {
	
	            case 'previous':
	                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
	                if (_.slideCount > _.options.slidesToShow) {
	                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
	                }
	                break;
	
	            case 'next':
	                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
	                if (_.slideCount > _.options.slidesToShow) {
	                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
	                }
	                break;
	
	            case 'index':
	                var index = event.data.index === 0 ? 0 :
	                    event.data.index || $target.index() * _.options.slidesToScroll;
	
	                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
	                $target.children().trigger('focus');
	                break;
	
	            default:
	                return;
	        }
	
	    };
	
	    Slick.prototype.checkNavigable = function(index) {
	
	        var _ = this,
	            navigables, prevNavigable;
	
	        navigables = _.getNavigableIndexes();
	        prevNavigable = 0;
	        if (index > navigables[navigables.length - 1]) {
	            index = navigables[navigables.length - 1];
	        } else {
	            for (var n in navigables) {
	                if (index < navigables[n]) {
	                    index = prevNavigable;
	                    break;
	                }
	                prevNavigable = navigables[n];
	            }
	        }
	
	        return index;
	    };
	
	    Slick.prototype.cleanUpEvents = function() {
	
	        var _ = this;
	
	        if (_.options.dots && _.$dots !== null) {
	
	            $('li', _.$dots)
	                .off('click.slick', _.changeSlide)
	                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
	                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	        }
	
	        _.$slider.off('focus.slick blur.slick');
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
	            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
	        }
	
	        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
	        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
	        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
	        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);
	
	        _.$list.off('click.slick', _.clickHandler);
	
	        $(document).off(_.visibilityChange, _.visibility);
	
	        _.cleanUpSlideEvents();
	
	        if (_.options.accessibility === true) {
	            _.$list.off('keydown.slick', _.keyHandler);
	        }
	
	        if (_.options.focusOnSelect === true) {
	            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
	        }
	
	        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
	
	        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
	
	        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
	
	        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
	        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
	
	    };
	
	    Slick.prototype.cleanUpSlideEvents = function() {
	
	        var _ = this;
	
	        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
	        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	    };
	
	    Slick.prototype.cleanUpRows = function() {
	
	        var _ = this, originalSlides;
	
	        if(_.options.rows > 1) {
	            originalSlides = _.$slides.children().children();
	            originalSlides.removeAttr('style');
	            _.$slider.empty().append(originalSlides);
	        }
	
	    };
	
	    Slick.prototype.clickHandler = function(event) {
	
	        var _ = this;
	
	        if (_.shouldClick === false) {
	            event.stopImmediatePropagation();
	            event.stopPropagation();
	            event.preventDefault();
	        }
	
	    };
	
	    Slick.prototype.destroy = function(refresh) {
	
	        var _ = this;
	
	        _.autoPlayClear();
	
	        _.touchObject = {};
	
	        _.cleanUpEvents();
	
	        $('.slick-cloned', _.$slider).detach();
	
	        if (_.$dots) {
	            _.$dots.remove();
	        }
	
	
	        if ( _.$prevArrow && _.$prevArrow.length ) {
	
	            _.$prevArrow
	                .removeClass('slick-disabled slick-arrow slick-hidden')
	                .removeAttr('aria-hidden aria-disabled tabindex')
	                .css('display','');
	
	            if ( _.htmlExpr.test( _.options.prevArrow )) {
	                _.$prevArrow.remove();
	            }
	        }
	
	        if ( _.$nextArrow && _.$nextArrow.length ) {
	
	            _.$nextArrow
	                .removeClass('slick-disabled slick-arrow slick-hidden')
	                .removeAttr('aria-hidden aria-disabled tabindex')
	                .css('display','');
	
	            if ( _.htmlExpr.test( _.options.nextArrow )) {
	                _.$nextArrow.remove();
	            }
	
	        }
	
	
	        if (_.$slides) {
	
	            _.$slides
	                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
	                .removeAttr('aria-hidden')
	                .removeAttr('data-slick-index')
	                .each(function(){
	                    $(this).attr('style', $(this).data('originalStyling'));
	                });
	
	            _.$slideTrack.children(this.options.slide).detach();
	
	            _.$slideTrack.detach();
	
	            _.$list.detach();
	
	            _.$slider.append(_.$slides);
	        }
	
	        _.cleanUpRows();
	
	        _.$slider.removeClass('slick-slider');
	        _.$slider.removeClass('slick-initialized');
	        _.$slider.removeClass('slick-dotted');
	
	        _.unslicked = true;
	
	        if(!refresh) {
	            _.$slider.trigger('destroy', [_]);
	        }
	
	    };
	
	    Slick.prototype.disableTransition = function(slide) {
	
	        var _ = this,
	            transition = {};
	
	        transition[_.transitionType] = '';
	
	        if (_.options.fade === false) {
	            _.$slideTrack.css(transition);
	        } else {
	            _.$slides.eq(slide).css(transition);
	        }
	
	    };
	
	    Slick.prototype.fadeSlide = function(slideIndex, callback) {
	
	        var _ = this;
	
	        if (_.cssTransitions === false) {
	
	            _.$slides.eq(slideIndex).css({
	                zIndex: _.options.zIndex
	            });
	
	            _.$slides.eq(slideIndex).animate({
	                opacity: 1
	            }, _.options.speed, _.options.easing, callback);
	
	        } else {
	
	            _.applyTransition(slideIndex);
	
	            _.$slides.eq(slideIndex).css({
	                opacity: 1,
	                zIndex: _.options.zIndex
	            });
	
	            if (callback) {
	                setTimeout(function() {
	
	                    _.disableTransition(slideIndex);
	
	                    callback.call();
	                }, _.options.speed);
	            }
	
	        }
	
	    };
	
	    Slick.prototype.fadeSlideOut = function(slideIndex) {
	
	        var _ = this;
	
	        if (_.cssTransitions === false) {
	
	            _.$slides.eq(slideIndex).animate({
	                opacity: 0,
	                zIndex: _.options.zIndex - 2
	            }, _.options.speed, _.options.easing);
	
	        } else {
	
	            _.applyTransition(slideIndex);
	
	            _.$slides.eq(slideIndex).css({
	                opacity: 0,
	                zIndex: _.options.zIndex - 2
	            });
	
	        }
	
	    };
	
	    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
	
	        var _ = this;
	
	        if (filter !== null) {
	
	            _.$slidesCache = _.$slides;
	
	            _.unload();
	
	            _.$slideTrack.children(this.options.slide).detach();
	
	            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
	
	            _.reinit();
	
	        }
	
	    };
	
	    Slick.prototype.focusHandler = function() {
	
	        var _ = this;
	
	        _.$slider
	            .off('focus.slick blur.slick')
	            .on('focus.slick blur.slick',
	                '*:not(.slick-arrow)', function(event) {
	
	            event.stopImmediatePropagation();
	            var $sf = $(this);
	
	            setTimeout(function() {
	
	                if( _.options.pauseOnFocus ) {
	                    _.focussed = $sf.is(':focus');
	                    _.autoPlay();
	                }
	
	            }, 0);
	
	        });
	    };
	
	    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
	
	        var _ = this;
	        return _.currentSlide;
	
	    };
	
	    Slick.prototype.getDotCount = function() {
	
	        var _ = this;
	
	        var breakPoint = 0;
	        var counter = 0;
	        var pagerQty = 0;
	
	        if (_.options.infinite === true) {
	            while (breakPoint < _.slideCount) {
	                ++pagerQty;
	                breakPoint = counter + _.options.slidesToScroll;
	                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
	            }
	        } else if (_.options.centerMode === true) {
	            pagerQty = _.slideCount;
	        } else if(!_.options.asNavFor) {
	            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
	        }else {
	            while (breakPoint < _.slideCount) {
	                ++pagerQty;
	                breakPoint = counter + _.options.slidesToScroll;
	                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
	            }
	        }
	
	        return pagerQty - 1;
	
	    };
	
	    Slick.prototype.getLeft = function(slideIndex) {
	
	        var _ = this,
	            targetLeft,
	            verticalHeight,
	            verticalOffset = 0,
	            targetSlide;
	
	        _.slideOffset = 0;
	        verticalHeight = _.$slides.first().outerHeight(true);
	
	        if (_.options.infinite === true) {
	            if (_.slideCount > _.options.slidesToShow) {
	                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
	                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
	            }
	            if (_.slideCount % _.options.slidesToScroll !== 0) {
	                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
	                    if (slideIndex > _.slideCount) {
	                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
	                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
	                    } else {
	                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
	                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
	                    }
	                }
	            }
	        } else {
	            if (slideIndex + _.options.slidesToShow > _.slideCount) {
	                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
	                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
	            }
	        }
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            _.slideOffset = 0;
	            verticalOffset = 0;
	        }
	
	        if (_.options.centerMode === true && _.options.infinite === true) {
	            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
	        } else if (_.options.centerMode === true) {
	            _.slideOffset = 0;
	            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
	        }
	
	        if (_.options.vertical === false) {
	            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
	        } else {
	            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
	        }
	
	        if (_.options.variableWidth === true) {
	
	            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
	                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
	            } else {
	                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
	            }
	
	            if (_.options.rtl === true) {
	                if (targetSlide[0]) {
	                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
	                } else {
	                    targetLeft =  0;
	                }
	            } else {
	                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
	            }
	
	            if (_.options.centerMode === true) {
	                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
	                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
	                } else {
	                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
	                }
	
	                if (_.options.rtl === true) {
	                    if (targetSlide[0]) {
	                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
	                    } else {
	                        targetLeft =  0;
	                    }
	                } else {
	                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
	                }
	
	                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
	            }
	        }
	
	        return targetLeft;
	
	    };
	
	    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
	
	        var _ = this;
	
	        return _.options[option];
	
	    };
	
	    Slick.prototype.getNavigableIndexes = function() {
	
	        var _ = this,
	            breakPoint = 0,
	            counter = 0,
	            indexes = [],
	            max;
	
	        if (_.options.infinite === false) {
	            max = _.slideCount;
	        } else {
	            breakPoint = _.options.slidesToScroll * -1;
	            counter = _.options.slidesToScroll * -1;
	            max = _.slideCount * 2;
	        }
	
	        while (breakPoint < max) {
	            indexes.push(breakPoint);
	            breakPoint = counter + _.options.slidesToScroll;
	            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
	        }
	
	        return indexes;
	
	    };
	
	    Slick.prototype.getSlick = function() {
	
	        return this;
	
	    };
	
	    Slick.prototype.getSlideCount = function() {
	
	        var _ = this,
	            slidesTraversed, swipedSlide, centerOffset;
	
	        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;
	
	        if (_.options.swipeToSlide === true) {
	            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
	                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
	                    swipedSlide = slide;
	                    return false;
	                }
	            });
	
	            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
	
	            return slidesTraversed;
	
	        } else {
	            return _.options.slidesToScroll;
	        }
	
	    };
	
	    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
	
	        var _ = this;
	
	        _.changeSlide({
	            data: {
	                message: 'index',
	                index: parseInt(slide)
	            }
	        }, dontAnimate);
	
	    };
	
	    Slick.prototype.init = function(creation) {
	
	        var _ = this;
	
	        if (!$(_.$slider).hasClass('slick-initialized')) {
	
	            $(_.$slider).addClass('slick-initialized');
	
	            _.buildRows();
	            _.buildOut();
	            _.setProps();
	            _.startLoad();
	            _.loadSlider();
	            _.initializeEvents();
	            _.updateArrows();
	            _.updateDots();
	            _.checkResponsive(true);
	            _.focusHandler();
	
	        }
	
	        if (creation) {
	            _.$slider.trigger('init', [_]);
	        }
	
	        if (_.options.accessibility === true) {
	            _.initADA();
	        }
	
	        if ( _.options.autoplay ) {
	
	            _.paused = false;
	            _.autoPlay();
	
	        }
	
	    };
	
	    Slick.prototype.initADA = function() {
	        var _ = this;
	        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
	            'aria-hidden': 'true',
	            'tabindex': '-1'
	        }).find('a, input, button, select').attr({
	            'tabindex': '-1'
	        });
	
	        _.$slideTrack.attr('role', 'listbox');
	
	        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
	            $(this).attr({
	                'role': 'option',
	                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
	            });
	        });
	
	        if (_.$dots !== null) {
	            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
	                $(this).attr({
	                    'role': 'presentation',
	                    'aria-selected': 'false',
	                    'aria-controls': 'navigation' + _.instanceUid + i + '',
	                    'id': 'slick-slide' + _.instanceUid + i + ''
	                });
	            })
	                .first().attr('aria-selected', 'true').end()
	                .find('button').attr('role', 'button').end()
	                .closest('div').attr('role', 'toolbar');
	        }
	        _.activateADA();
	
	    };
	
	    Slick.prototype.initArrowEvents = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	            _.$prevArrow
	               .off('click.slick')
	               .on('click.slick', {
	                    message: 'previous'
	               }, _.changeSlide);
	            _.$nextArrow
	               .off('click.slick')
	               .on('click.slick', {
	                    message: 'next'
	               }, _.changeSlide);
	        }
	
	    };
	
	    Slick.prototype.initDotEvents = function() {
	
	        var _ = this;
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	            $('li', _.$dots).on('click.slick', {
	                message: 'index'
	            }, _.changeSlide);
	        }
	
	        if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {
	
	            $('li', _.$dots)
	                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
	                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	        }
	
	    };
	
	    Slick.prototype.initSlideEvents = function() {
	
	        var _ = this;
	
	        if ( _.options.pauseOnHover ) {
	
	            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
	            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
	
	        }
	
	    };
	
	    Slick.prototype.initializeEvents = function() {
	
	        var _ = this;
	
	        _.initArrowEvents();
	
	        _.initDotEvents();
	        _.initSlideEvents();
	
	        _.$list.on('touchstart.slick mousedown.slick', {
	            action: 'start'
	        }, _.swipeHandler);
	        _.$list.on('touchmove.slick mousemove.slick', {
	            action: 'move'
	        }, _.swipeHandler);
	        _.$list.on('touchend.slick mouseup.slick', {
	            action: 'end'
	        }, _.swipeHandler);
	        _.$list.on('touchcancel.slick mouseleave.slick', {
	            action: 'end'
	        }, _.swipeHandler);
	
	        _.$list.on('click.slick', _.clickHandler);
	
	        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
	
	        if (_.options.accessibility === true) {
	            _.$list.on('keydown.slick', _.keyHandler);
	        }
	
	        if (_.options.focusOnSelect === true) {
	            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
	        }
	
	        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));
	
	        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));
	
	        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
	
	        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
	        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
	
	    };
	
	    Slick.prototype.initUI = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$prevArrow.show();
	            _.$nextArrow.show();
	
	        }
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$dots.show();
	
	        }
	
	    };
	
	    Slick.prototype.keyHandler = function(event) {
	
	        var _ = this;
	         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
	        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
	            if (event.keyCode === 37 && _.options.accessibility === true) {
	                _.changeSlide({
	                    data: {
	                        message: _.options.rtl === true ? 'next' :  'previous'
	                    }
	                });
	            } else if (event.keyCode === 39 && _.options.accessibility === true) {
	                _.changeSlide({
	                    data: {
	                        message: _.options.rtl === true ? 'previous' : 'next'
	                    }
	                });
	            }
	        }
	
	    };
	
	    Slick.prototype.lazyLoad = function() {
	
	        var _ = this,
	            loadRange, cloneRange, rangeStart, rangeEnd;
	
	        function loadImages(imagesScope) {
	
	            $('img[data-lazy]', imagesScope).each(function() {
	
	                var image = $(this),
	                    imageSource = $(this).attr('data-lazy'),
	                    imageToLoad = document.createElement('img');
	
	                imageToLoad.onload = function() {
	
	                    image
	                        .animate({ opacity: 0 }, 100, function() {
	                            image
	                                .attr('src', imageSource)
	                                .animate({ opacity: 1 }, 200, function() {
	                                    image
	                                        .removeAttr('data-lazy')
	                                        .removeClass('slick-loading');
	                                });
	                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
	                        });
	
	                };
	
	                imageToLoad.onerror = function() {
	
	                    image
	                        .removeAttr( 'data-lazy' )
	                        .removeClass( 'slick-loading' )
	                        .addClass( 'slick-lazyload-error' );
	
	                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
	
	                };
	
	                imageToLoad.src = imageSource;
	
	            });
	
	        }
	
	        if (_.options.centerMode === true) {
	            if (_.options.infinite === true) {
	                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
	                rangeEnd = rangeStart + _.options.slidesToShow + 2;
	            } else {
	                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
	                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
	            }
	        } else {
	            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
	            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
	            if (_.options.fade === true) {
	                if (rangeStart > 0) rangeStart--;
	                if (rangeEnd <= _.slideCount) rangeEnd++;
	            }
	        }
	
	        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
	        loadImages(loadRange);
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            cloneRange = _.$slider.find('.slick-slide');
	            loadImages(cloneRange);
	        } else
	        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
	            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
	            loadImages(cloneRange);
	        } else if (_.currentSlide === 0) {
	            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
	            loadImages(cloneRange);
	        }
	
	    };
	
	    Slick.prototype.loadSlider = function() {
	
	        var _ = this;
	
	        _.setPosition();
	
	        _.$slideTrack.css({
	            opacity: 1
	        });
	
	        _.$slider.removeClass('slick-loading');
	
	        _.initUI();
	
	        if (_.options.lazyLoad === 'progressive') {
	            _.progressiveLazyLoad();
	        }
	
	    };
	
	    Slick.prototype.next = Slick.prototype.slickNext = function() {
	
	        var _ = this;
	
	        _.changeSlide({
	            data: {
	                message: 'next'
	            }
	        });
	
	    };
	
	    Slick.prototype.orientationChange = function() {
	
	        var _ = this;
	
	        _.checkResponsive();
	        _.setPosition();
	
	    };
	
	    Slick.prototype.pause = Slick.prototype.slickPause = function() {
	
	        var _ = this;
	
	        _.autoPlayClear();
	        _.paused = true;
	
	    };
	
	    Slick.prototype.play = Slick.prototype.slickPlay = function() {
	
	        var _ = this;
	
	        _.autoPlay();
	        _.options.autoplay = true;
	        _.paused = false;
	        _.focussed = false;
	        _.interrupted = false;
	
	    };
	
	    Slick.prototype.postSlide = function(index) {
	
	        var _ = this;
	
	        if( !_.unslicked ) {
	
	            _.$slider.trigger('afterChange', [_, index]);
	
	            _.animating = false;
	
	            _.setPosition();
	
	            _.swipeLeft = null;
	
	            if ( _.options.autoplay ) {
	                _.autoPlay();
	            }
	
	            if (_.options.accessibility === true) {
	                _.initADA();
	            }
	
	        }
	
	    };
	
	    Slick.prototype.prev = Slick.prototype.slickPrev = function() {
	
	        var _ = this;
	
	        _.changeSlide({
	            data: {
	                message: 'previous'
	            }
	        });
	
	    };
	
	    Slick.prototype.preventDefault = function(event) {
	
	        event.preventDefault();
	
	    };
	
	    Slick.prototype.progressiveLazyLoad = function( tryCount ) {
	
	        tryCount = tryCount || 1;
	
	        var _ = this,
	            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
	            image,
	            imageSource,
	            imageToLoad;
	
	        if ( $imgsToLoad.length ) {
	
	            image = $imgsToLoad.first();
	            imageSource = image.attr('data-lazy');
	            imageToLoad = document.createElement('img');
	
	            imageToLoad.onload = function() {
	
	                image
	                    .attr( 'src', imageSource )
	                    .removeAttr('data-lazy')
	                    .removeClass('slick-loading');
	
	                if ( _.options.adaptiveHeight === true ) {
	                    _.setPosition();
	                }
	
	                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
	                _.progressiveLazyLoad();
	
	            };
	
	            imageToLoad.onerror = function() {
	
	                if ( tryCount < 3 ) {
	
	                    /**
	                     * try to load the image 3 times,
	                     * leave a slight delay so we don't get
	                     * servers blocking the request.
	                     */
	                    setTimeout( function() {
	                        _.progressiveLazyLoad( tryCount + 1 );
	                    }, 500 );
	
	                } else {
	
	                    image
	                        .removeAttr( 'data-lazy' )
	                        .removeClass( 'slick-loading' )
	                        .addClass( 'slick-lazyload-error' );
	
	                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
	
	                    _.progressiveLazyLoad();
	
	                }
	
	            };
	
	            imageToLoad.src = imageSource;
	
	        } else {
	
	            _.$slider.trigger('allImagesLoaded', [ _ ]);
	
	        }
	
	    };
	
	    Slick.prototype.refresh = function( initializing ) {
	
	        var _ = this, currentSlide, lastVisibleIndex;
	
	        lastVisibleIndex = _.slideCount - _.options.slidesToShow;
	
	        // in non-infinite sliders, we don't want to go past the
	        // last visible index.
	        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
	            _.currentSlide = lastVisibleIndex;
	        }
	
	        // if less slides than to show, go to start.
	        if ( _.slideCount <= _.options.slidesToShow ) {
	            _.currentSlide = 0;
	
	        }
	
	        currentSlide = _.currentSlide;
	
	        _.destroy(true);
	
	        $.extend(_, _.initials, { currentSlide: currentSlide });
	
	        _.init();
	
	        if( !initializing ) {
	
	            _.changeSlide({
	                data: {
	                    message: 'index',
	                    index: currentSlide
	                }
	            }, false);
	
	        }
	
	    };
	
	    Slick.prototype.registerBreakpoints = function() {
	
	        var _ = this, breakpoint, currentBreakpoint, l,
	            responsiveSettings = _.options.responsive || null;
	
	        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {
	
	            _.respondTo = _.options.respondTo || 'window';
	
	            for ( breakpoint in responsiveSettings ) {
	
	                l = _.breakpoints.length-1;
	                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;
	
	                if (responsiveSettings.hasOwnProperty(breakpoint)) {
	
	                    // loop through the breakpoints and cut out any existing
	                    // ones with the same breakpoint number, we don't want dupes.
	                    while( l >= 0 ) {
	                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
	                            _.breakpoints.splice(l,1);
	                        }
	                        l--;
	                    }
	
	                    _.breakpoints.push(currentBreakpoint);
	                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
	
	                }
	
	            }
	
	            _.breakpoints.sort(function(a, b) {
	                return ( _.options.mobileFirst ) ? a-b : b-a;
	            });
	
	        }
	
	    };
	
	    Slick.prototype.reinit = function() {
	
	        var _ = this;
	
	        _.$slides =
	            _.$slideTrack
	                .children(_.options.slide)
	                .addClass('slick-slide');
	
	        _.slideCount = _.$slides.length;
	
	        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
	            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
	        }
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            _.currentSlide = 0;
	        }
	
	        _.registerBreakpoints();
	
	        _.setProps();
	        _.setupInfinite();
	        _.buildArrows();
	        _.updateArrows();
	        _.initArrowEvents();
	        _.buildDots();
	        _.updateDots();
	        _.initDotEvents();
	        _.cleanUpSlideEvents();
	        _.initSlideEvents();
	
	        _.checkResponsive(false, true);
	
	        if (_.options.focusOnSelect === true) {
	            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
	        }
	
	        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
	
	        _.setPosition();
	        _.focusHandler();
	
	        _.paused = !_.options.autoplay;
	        _.autoPlay();
	
	        _.$slider.trigger('reInit', [_]);
	
	    };
	
	    Slick.prototype.resize = function() {
	
	        var _ = this;
	
	        if ($(window).width() !== _.windowWidth) {
	            clearTimeout(_.windowDelay);
	            _.windowDelay = window.setTimeout(function() {
	                _.windowWidth = $(window).width();
	                _.checkResponsive();
	                if( !_.unslicked ) { _.setPosition(); }
	            }, 50);
	        }
	    };
	
	    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
	
	        var _ = this;
	
	        if (typeof(index) === 'boolean') {
	            removeBefore = index;
	            index = removeBefore === true ? 0 : _.slideCount - 1;
	        } else {
	            index = removeBefore === true ? --index : index;
	        }
	
	        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
	            return false;
	        }
	
	        _.unload();
	
	        if (removeAll === true) {
	            _.$slideTrack.children().remove();
	        } else {
	            _.$slideTrack.children(this.options.slide).eq(index).remove();
	        }
	
	        _.$slides = _.$slideTrack.children(this.options.slide);
	
	        _.$slideTrack.children(this.options.slide).detach();
	
	        _.$slideTrack.append(_.$slides);
	
	        _.$slidesCache = _.$slides;
	
	        _.reinit();
	
	    };
	
	    Slick.prototype.setCSS = function(position) {
	
	        var _ = this,
	            positionProps = {},
	            x, y;
	
	        if (_.options.rtl === true) {
	            position = -position;
	        }
	        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
	        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
	
	        positionProps[_.positionProp] = position;
	
	        if (_.transformsEnabled === false) {
	            _.$slideTrack.css(positionProps);
	        } else {
	            positionProps = {};
	            if (_.cssTransitions === false) {
	                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
	                _.$slideTrack.css(positionProps);
	            } else {
	                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
	                _.$slideTrack.css(positionProps);
	            }
	        }
	
	    };
	
	    Slick.prototype.setDimensions = function() {
	
	        var _ = this;
	
	        if (_.options.vertical === false) {
	            if (_.options.centerMode === true) {
	                _.$list.css({
	                    padding: ('0px ' + _.options.centerPadding)
	                });
	            }
	        } else {
	            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
	            if (_.options.centerMode === true) {
	                _.$list.css({
	                    padding: (_.options.centerPadding + ' 0px')
	                });
	            }
	        }
	
	        _.listWidth = _.$list.width();
	        _.listHeight = _.$list.height();
	
	
	        if (_.options.vertical === false && _.options.variableWidth === false) {
	            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
	            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));
	
	        } else if (_.options.variableWidth === true) {
	            _.$slideTrack.width(5000 * _.slideCount);
	        } else {
	            _.slideWidth = Math.ceil(_.listWidth);
	            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
	        }
	
	        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
	        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
	
	    };
	
	    Slick.prototype.setFade = function() {
	
	        var _ = this,
	            targetLeft;
	
	        _.$slides.each(function(index, element) {
	            targetLeft = (_.slideWidth * index) * -1;
	            if (_.options.rtl === true) {
	                $(element).css({
	                    position: 'relative',
	                    right: targetLeft,
	                    top: 0,
	                    zIndex: _.options.zIndex - 2,
	                    opacity: 0
	                });
	            } else {
	                $(element).css({
	                    position: 'relative',
	                    left: targetLeft,
	                    top: 0,
	                    zIndex: _.options.zIndex - 2,
	                    opacity: 0
	                });
	            }
	        });
	
	        _.$slides.eq(_.currentSlide).css({
	            zIndex: _.options.zIndex - 1,
	            opacity: 1
	        });
	
	    };
	
	    Slick.prototype.setHeight = function() {
	
	        var _ = this;
	
	        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
	            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
	            _.$list.css('height', targetHeight);
	        }
	
	    };
	
	    Slick.prototype.setOption =
	    Slick.prototype.slickSetOption = function() {
	
	        /**
	         * accepts arguments in format of:
	         *
	         *  - for changing a single option's value:
	         *     .slick("setOption", option, value, refresh )
	         *
	         *  - for changing a set of responsive options:
	         *     .slick("setOption", 'responsive', [{}, ...], refresh )
	         *
	         *  - for updating multiple values at once (not responsive)
	         *     .slick("setOption", { 'option': value, ... }, refresh )
	         */
	
	        var _ = this, l, item, option, value, refresh = false, type;
	
	        if( $.type( arguments[0] ) === 'object' ) {
	
	            option =  arguments[0];
	            refresh = arguments[1];
	            type = 'multiple';
	
	        } else if ( $.type( arguments[0] ) === 'string' ) {
	
	            option =  arguments[0];
	            value = arguments[1];
	            refresh = arguments[2];
	
	            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {
	
	                type = 'responsive';
	
	            } else if ( typeof arguments[1] !== 'undefined' ) {
	
	                type = 'single';
	
	            }
	
	        }
	
	        if ( type === 'single' ) {
	
	            _.options[option] = value;
	
	
	        } else if ( type === 'multiple' ) {
	
	            $.each( option , function( opt, val ) {
	
	                _.options[opt] = val;
	
	            });
	
	
	        } else if ( type === 'responsive' ) {
	
	            for ( item in value ) {
	
	                if( $.type( _.options.responsive ) !== 'array' ) {
	
	                    _.options.responsive = [ value[item] ];
	
	                } else {
	
	                    l = _.options.responsive.length-1;
	
	                    // loop through the responsive object and splice out duplicates.
	                    while( l >= 0 ) {
	
	                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {
	
	                            _.options.responsive.splice(l,1);
	
	                        }
	
	                        l--;
	
	                    }
	
	                    _.options.responsive.push( value[item] );
	
	                }
	
	            }
	
	        }
	
	        if ( refresh ) {
	
	            _.unload();
	            _.reinit();
	
	        }
	
	    };
	
	    Slick.prototype.setPosition = function() {
	
	        var _ = this;
	
	        _.setDimensions();
	
	        _.setHeight();
	
	        if (_.options.fade === false) {
	            _.setCSS(_.getLeft(_.currentSlide));
	        } else {
	            _.setFade();
	        }
	
	        _.$slider.trigger('setPosition', [_]);
	
	    };
	
	    Slick.prototype.setProps = function() {
	
	        var _ = this,
	            bodyStyle = document.body.style;
	
	        _.positionProp = _.options.vertical === true ? 'top' : 'left';
	
	        if (_.positionProp === 'top') {
	            _.$slider.addClass('slick-vertical');
	        } else {
	            _.$slider.removeClass('slick-vertical');
	        }
	
	        if (bodyStyle.WebkitTransition !== undefined ||
	            bodyStyle.MozTransition !== undefined ||
	            bodyStyle.msTransition !== undefined) {
	            if (_.options.useCSS === true) {
	                _.cssTransitions = true;
	            }
	        }
	
	        if ( _.options.fade ) {
	            if ( typeof _.options.zIndex === 'number' ) {
	                if( _.options.zIndex < 3 ) {
	                    _.options.zIndex = 3;
	                }
	            } else {
	                _.options.zIndex = _.defaults.zIndex;
	            }
	        }
	
	        if (bodyStyle.OTransform !== undefined) {
	            _.animType = 'OTransform';
	            _.transformType = '-o-transform';
	            _.transitionType = 'OTransition';
	            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
	        }
	        if (bodyStyle.MozTransform !== undefined) {
	            _.animType = 'MozTransform';
	            _.transformType = '-moz-transform';
	            _.transitionType = 'MozTransition';
	            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
	        }
	        if (bodyStyle.webkitTransform !== undefined) {
	            _.animType = 'webkitTransform';
	            _.transformType = '-webkit-transform';
	            _.transitionType = 'webkitTransition';
	            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
	        }
	        if (bodyStyle.msTransform !== undefined) {
	            _.animType = 'msTransform';
	            _.transformType = '-ms-transform';
	            _.transitionType = 'msTransition';
	            if (bodyStyle.msTransform === undefined) _.animType = false;
	        }
	        if (bodyStyle.transform !== undefined && _.animType !== false) {
	            _.animType = 'transform';
	            _.transformType = 'transform';
	            _.transitionType = 'transition';
	        }
	        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
	    };
	
	
	    Slick.prototype.setSlideClasses = function(index) {
	
	        var _ = this,
	            centerOffset, allSlides, indexOffset, remainder;
	
	        allSlides = _.$slider
	            .find('.slick-slide')
	            .removeClass('slick-active slick-center slick-current')
	            .attr('aria-hidden', 'true');
	
	        _.$slides
	            .eq(index)
	            .addClass('slick-current');
	
	        if (_.options.centerMode === true) {
	
	            centerOffset = Math.floor(_.options.slidesToShow / 2);
	
	            if (_.options.infinite === true) {
	
	                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
	
	                    _.$slides
	                        .slice(index - centerOffset, index + centerOffset + 1)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                } else {
	
	                    indexOffset = _.options.slidesToShow + index;
	                    allSlides
	                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                }
	
	                if (index === 0) {
	
	                    allSlides
	                        .eq(allSlides.length - 1 - _.options.slidesToShow)
	                        .addClass('slick-center');
	
	                } else if (index === _.slideCount - 1) {
	
	                    allSlides
	                        .eq(_.options.slidesToShow)
	                        .addClass('slick-center');
	
	                }
	
	            }
	
	            _.$slides
	                .eq(index)
	                .addClass('slick-center');
	
	        } else {
	
	            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {
	
	                _.$slides
	                    .slice(index, index + _.options.slidesToShow)
	                    .addClass('slick-active')
	                    .attr('aria-hidden', 'false');
	
	            } else if (allSlides.length <= _.options.slidesToShow) {
	
	                allSlides
	                    .addClass('slick-active')
	                    .attr('aria-hidden', 'false');
	
	            } else {
	
	                remainder = _.slideCount % _.options.slidesToShow;
	                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
	
	                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {
	
	                    allSlides
	                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                } else {
	
	                    allSlides
	                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
	                        .addClass('slick-active')
	                        .attr('aria-hidden', 'false');
	
	                }
	
	            }
	
	        }
	
	        if (_.options.lazyLoad === 'ondemand') {
	            _.lazyLoad();
	        }
	
	    };
	
	    Slick.prototype.setupInfinite = function() {
	
	        var _ = this,
	            i, slideIndex, infiniteCount;
	
	        if (_.options.fade === true) {
	            _.options.centerMode = false;
	        }
	
	        if (_.options.infinite === true && _.options.fade === false) {
	
	            slideIndex = null;
	
	            if (_.slideCount > _.options.slidesToShow) {
	
	                if (_.options.centerMode === true) {
	                    infiniteCount = _.options.slidesToShow + 1;
	                } else {
	                    infiniteCount = _.options.slidesToShow;
	                }
	
	                for (i = _.slideCount; i > (_.slideCount -
	                        infiniteCount); i -= 1) {
	                    slideIndex = i - 1;
	                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
	                        .attr('data-slick-index', slideIndex - _.slideCount)
	                        .prependTo(_.$slideTrack).addClass('slick-cloned');
	                }
	                for (i = 0; i < infiniteCount; i += 1) {
	                    slideIndex = i;
	                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
	                        .attr('data-slick-index', slideIndex + _.slideCount)
	                        .appendTo(_.$slideTrack).addClass('slick-cloned');
	                }
	                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
	                    $(this).attr('id', '');
	                });
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.interrupt = function( toggle ) {
	
	        var _ = this;
	
	        if( !toggle ) {
	            _.autoPlay();
	        }
	        _.interrupted = toggle;
	
	    };
	
	    Slick.prototype.selectHandler = function(event) {
	
	        var _ = this;
	
	        var targetElement =
	            $(event.target).is('.slick-slide') ?
	                $(event.target) :
	                $(event.target).parents('.slick-slide');
	
	        var index = parseInt(targetElement.attr('data-slick-index'));
	
	        if (!index) index = 0;
	
	        if (_.slideCount <= _.options.slidesToShow) {
	
	            _.setSlideClasses(index);
	            _.asNavFor(index);
	            return;
	
	        }
	
	        _.slideHandler(index);
	
	    };
	
	    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
	
	        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
	            _ = this, navTarget;
	
	        sync = sync || false;
	
	        if (_.animating === true && _.options.waitForAnimate === true) {
	            return;
	        }
	
	        if (_.options.fade === true && _.currentSlide === index) {
	            return;
	        }
	
	        if (_.slideCount <= _.options.slidesToShow) {
	            return;
	        }
	
	        if (sync === false) {
	            _.asNavFor(index);
	        }
	
	        targetSlide = index;
	        targetLeft = _.getLeft(targetSlide);
	        slideLeft = _.getLeft(_.currentSlide);
	
	        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
	
	        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
	            if (_.options.fade === false) {
	                targetSlide = _.currentSlide;
	                if (dontAnimate !== true) {
	                    _.animateSlide(slideLeft, function() {
	                        _.postSlide(targetSlide);
	                    });
	                } else {
	                    _.postSlide(targetSlide);
	                }
	            }
	            return;
	        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
	            if (_.options.fade === false) {
	                targetSlide = _.currentSlide;
	                if (dontAnimate !== true) {
	                    _.animateSlide(slideLeft, function() {
	                        _.postSlide(targetSlide);
	                    });
	                } else {
	                    _.postSlide(targetSlide);
	                }
	            }
	            return;
	        }
	
	        if ( _.options.autoplay ) {
	            clearInterval(_.autoPlayTimer);
	        }
	
	        if (targetSlide < 0) {
	            if (_.slideCount % _.options.slidesToScroll !== 0) {
	                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
	            } else {
	                animSlide = _.slideCount + targetSlide;
	            }
	        } else if (targetSlide >= _.slideCount) {
	            if (_.slideCount % _.options.slidesToScroll !== 0) {
	                animSlide = 0;
	            } else {
	                animSlide = targetSlide - _.slideCount;
	            }
	        } else {
	            animSlide = targetSlide;
	        }
	
	        _.animating = true;
	
	        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);
	
	        oldSlide = _.currentSlide;
	        _.currentSlide = animSlide;
	
	        _.setSlideClasses(_.currentSlide);
	
	        if ( _.options.asNavFor ) {
	
	            navTarget = _.getNavTarget();
	            navTarget = navTarget.slick('getSlick');
	
	            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
	                navTarget.setSlideClasses(_.currentSlide);
	            }
	
	        }
	
	        _.updateDots();
	        _.updateArrows();
	
	        if (_.options.fade === true) {
	            if (dontAnimate !== true) {
	
	                _.fadeSlideOut(oldSlide);
	
	                _.fadeSlide(animSlide, function() {
	                    _.postSlide(animSlide);
	                });
	
	            } else {
	                _.postSlide(animSlide);
	            }
	            _.animateHeight();
	            return;
	        }
	
	        if (dontAnimate !== true) {
	            _.animateSlide(targetLeft, function() {
	                _.postSlide(animSlide);
	            });
	        } else {
	            _.postSlide(animSlide);
	        }
	
	    };
	
	    Slick.prototype.startLoad = function() {
	
	        var _ = this;
	
	        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$prevArrow.hide();
	            _.$nextArrow.hide();
	
	        }
	
	        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
	
	            _.$dots.hide();
	
	        }
	
	        _.$slider.addClass('slick-loading');
	
	    };
	
	    Slick.prototype.swipeDirection = function() {
	
	        var xDist, yDist, r, swipeAngle, _ = this;
	
	        xDist = _.touchObject.startX - _.touchObject.curX;
	        yDist = _.touchObject.startY - _.touchObject.curY;
	        r = Math.atan2(yDist, xDist);
	
	        swipeAngle = Math.round(r * 180 / Math.PI);
	        if (swipeAngle < 0) {
	            swipeAngle = 360 - Math.abs(swipeAngle);
	        }
	
	        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
	            return (_.options.rtl === false ? 'left' : 'right');
	        }
	        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
	            return (_.options.rtl === false ? 'left' : 'right');
	        }
	        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
	            return (_.options.rtl === false ? 'right' : 'left');
	        }
	        if (_.options.verticalSwiping === true) {
	            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
	                return 'down';
	            } else {
	                return 'up';
	            }
	        }
	
	        return 'vertical';
	
	    };
	
	    Slick.prototype.swipeEnd = function(event) {
	
	        var _ = this,
	            slideCount,
	            direction;
	
	        _.dragging = false;
	        _.interrupted = false;
	        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;
	
	        if ( _.touchObject.curX === undefined ) {
	            return false;
	        }
	
	        if ( _.touchObject.edgeHit === true ) {
	            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
	        }
	
	        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {
	
	            direction = _.swipeDirection();
	
	            switch ( direction ) {
	
	                case 'left':
	                case 'down':
	
	                    slideCount =
	                        _.options.swipeToSlide ?
	                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
	                            _.currentSlide + _.getSlideCount();
	
	                    _.currentDirection = 0;
	
	                    break;
	
	                case 'right':
	                case 'up':
	
	                    slideCount =
	                        _.options.swipeToSlide ?
	                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
	                            _.currentSlide - _.getSlideCount();
	
	                    _.currentDirection = 1;
	
	                    break;
	
	                default:
	
	
	            }
	
	            if( direction != 'vertical' ) {
	
	                _.slideHandler( slideCount );
	                _.touchObject = {};
	                _.$slider.trigger('swipe', [_, direction ]);
	
	            }
	
	        } else {
	
	            if ( _.touchObject.startX !== _.touchObject.curX ) {
	
	                _.slideHandler( _.currentSlide );
	                _.touchObject = {};
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.swipeHandler = function(event) {
	
	        var _ = this;
	
	        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
	            return;
	        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
	            return;
	        }
	
	        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
	            event.originalEvent.touches.length : 1;
	
	        _.touchObject.minSwipe = _.listWidth / _.options
	            .touchThreshold;
	
	        if (_.options.verticalSwiping === true) {
	            _.touchObject.minSwipe = _.listHeight / _.options
	                .touchThreshold;
	        }
	
	        switch (event.data.action) {
	
	            case 'start':
	                _.swipeStart(event);
	                break;
	
	            case 'move':
	                _.swipeMove(event);
	                break;
	
	            case 'end':
	                _.swipeEnd(event);
	                break;
	
	        }
	
	    };
	
	    Slick.prototype.swipeMove = function(event) {
	
	        var _ = this,
	            edgeWasHit = false,
	            curLeft, swipeDirection, swipeLength, positionOffset, touches;
	
	        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
	
	        if (!_.dragging || touches && touches.length !== 1) {
	            return false;
	        }
	
	        curLeft = _.getLeft(_.currentSlide);
	
	        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
	        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
	
	        _.touchObject.swipeLength = Math.round(Math.sqrt(
	            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
	
	        if (_.options.verticalSwiping === true) {
	            _.touchObject.swipeLength = Math.round(Math.sqrt(
	                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
	        }
	
	        swipeDirection = _.swipeDirection();
	
	        if (swipeDirection === 'vertical') {
	            return;
	        }
	
	        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
	            event.preventDefault();
	        }
	
	        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
	        if (_.options.verticalSwiping === true) {
	            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
	        }
	
	
	        swipeLength = _.touchObject.swipeLength;
	
	        _.touchObject.edgeHit = false;
	
	        if (_.options.infinite === false) {
	            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
	                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
	                _.touchObject.edgeHit = true;
	            }
	        }
	
	        if (_.options.vertical === false) {
	            _.swipeLeft = curLeft + swipeLength * positionOffset;
	        } else {
	            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
	        }
	        if (_.options.verticalSwiping === true) {
	            _.swipeLeft = curLeft + swipeLength * positionOffset;
	        }
	
	        if (_.options.fade === true || _.options.touchMove === false) {
	            return false;
	        }
	
	        if (_.animating === true) {
	            _.swipeLeft = null;
	            return false;
	        }
	
	        _.setCSS(_.swipeLeft);
	
	    };
	
	    Slick.prototype.swipeStart = function(event) {
	
	        var _ = this,
	            touches;
	
	        _.interrupted = true;
	
	        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
	            _.touchObject = {};
	            return false;
	        }
	
	        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
	            touches = event.originalEvent.touches[0];
	        }
	
	        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
	        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
	
	        _.dragging = true;
	
	    };
	
	    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
	
	        var _ = this;
	
	        if (_.$slidesCache !== null) {
	
	            _.unload();
	
	            _.$slideTrack.children(this.options.slide).detach();
	
	            _.$slidesCache.appendTo(_.$slideTrack);
	
	            _.reinit();
	
	        }
	
	    };
	
	    Slick.prototype.unload = function() {
	
	        var _ = this;
	
	        $('.slick-cloned', _.$slider).remove();
	
	        if (_.$dots) {
	            _.$dots.remove();
	        }
	
	        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
	            _.$prevArrow.remove();
	        }
	
	        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
	            _.$nextArrow.remove();
	        }
	
	        _.$slides
	            .removeClass('slick-slide slick-active slick-visible slick-current')
	            .attr('aria-hidden', 'true')
	            .css('width', '');
	
	    };
	
	    Slick.prototype.unslick = function(fromBreakpoint) {
	
	        var _ = this;
	        _.$slider.trigger('unslick', [_, fromBreakpoint]);
	        _.destroy();
	
	    };
	
	    Slick.prototype.updateArrows = function() {
	
	        var _ = this,
	            centerOffset;
	
	        centerOffset = Math.floor(_.options.slidesToShow / 2);
	
	        if ( _.options.arrows === true &&
	            _.slideCount > _.options.slidesToShow &&
	            !_.options.infinite ) {
	
	            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            if (_.currentSlide === 0) {
	
	                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
	                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
	
	                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
	                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
	
	                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
	                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
	
	            }
	
	        }
	
	    };
	
	    Slick.prototype.updateDots = function() {
	
	        var _ = this;
	
	        if (_.$dots !== null) {
	
	            _.$dots
	                .find('li')
	                .removeClass('slick-active')
	                .attr('aria-hidden', 'true');
	
	            _.$dots
	                .find('li')
	                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
	                .addClass('slick-active')
	                .attr('aria-hidden', 'false');
	
	        }
	
	    };
	
	    Slick.prototype.visibility = function() {
	
	        var _ = this;
	
	        if ( _.options.autoplay ) {
	
	            if ( document[_.hidden] ) {
	
	                _.interrupted = true;
	
	            } else {
	
	                _.interrupted = false;
	
	            }
	
	        }
	
	    };
	
	    $.fn.slick = function() {
	        var _ = this,
	            opt = arguments[0],
	            args = Array.prototype.slice.call(arguments, 1),
	            l = _.length,
	            i,
	            ret;
	        for (i = 0; i < l; i++) {
	            if (typeof opt == 'object' || typeof opt == 'undefined')
	                _[i].slick = new Slick(_[i], opt);
	            else
	                ret = _[i].slick[opt].apply(_[i].slick, args);
	            if (typeof ret != 'undefined') return ret;
	        }
	        return _;
	    };
	
	}));


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof2 = __webpack_require__(62);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
	    window.setTimeout(callback, 1000 / 60);
	};
	
	var utils = function () {
	    var me = {};
	
	    var _elementStyle = document.createElement('div').style;
	    var _vendor = function () {
	        var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
	            transform,
	            i = 0,
	            l = vendors.length;
	
	        for (; i < l; i++) {
	            transform = vendors[i] + 'ransform';
	            if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
	        }
	
	        return false;
	    }();
	
	    function _prefixStyle(style) {
	        if (_vendor === false) return false;
	        if (_vendor === '') return style;
	        return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	    }
	
	    me.getTime = Date.now || function getTime() {
	        return new Date().getTime();
	    };
	
	    me.extend = function (target, obj) {
	        for (var i in obj) {
	            target[i] = obj[i];
	        }
	    };
	
	    me.addEvent = function (el, type, fn, capture) {
	        el.addEventListener(type, fn, !!capture);
	    };
	
	    me.removeEvent = function (el, type, fn, capture) {
	        el.removeEventListener(type, fn, !!capture);
	    };
	
	    me.prefixPointerEvent = function (pointerEvent) {
	        return window.MSPointerEvent ? 'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8) : pointerEvent;
	    };
	
	    me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
	        var distance = current - start,
	            speed = Math.abs(distance) / time,
	            destination,
	            duration;
	
	        deceleration = deceleration === undefined ? 0.0006 : deceleration;
	
	        destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
	        duration = speed / deceleration;
	
	        if (destination < lowerMargin) {
	            destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;
	            distance = Math.abs(destination - current);
	            duration = distance / speed;
	        } else if (destination > 0) {
	            destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;
	            distance = Math.abs(current) + destination;
	            duration = distance / speed;
	        }
	
	        return {
	            destination: Math.round(destination),
	            duration: duration
	        };
	    };
	
	    var _transform = _prefixStyle('transform');
	
	    me.extend(me, {
	        hasTransform: _transform !== false,
	        hasPerspective: _prefixStyle('perspective') in _elementStyle,
	        hasTouch: 'ontouchstart' in window,
	        hasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed
	        hasTransition: _prefixStyle('transition') in _elementStyle
	    });
	
	    /*
	    This should find all Android browsers lower than build 535.19 (both stock browser and webview)
	    - galaxy S2 is ok
	    - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`
	    - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	    - galaxy S3 is badAndroid (stock brower, webview)
	     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	    - galaxy S4 is badAndroid (stock brower, webview)
	     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	    - galaxy S5 is OK
	     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
	    - galaxy S6 is OK
	     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
	    */
	    me.isBadAndroid = function () {
	        var appVersion = window.navigator.appVersion;
	        // Android browser is not a chrome browser.
	        if (/Android/.test(appVersion) && !/Chrome\/\d/.test(appVersion)) {
	            var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
	            if (safariVersion && (typeof safariVersion === 'undefined' ? 'undefined' : (0, _typeof3.default)(safariVersion)) === "object" && safariVersion.length >= 2) {
	                return parseFloat(safariVersion[1]) < 535.19;
	            } else {
	                return true;
	            }
	        } else {
	            return false;
	        }
	    }();
	
	    me.extend(me.style = {}, {
	        transform: _transform,
	        transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
	        transitionDuration: _prefixStyle('transitionDuration'),
	        transitionDelay: _prefixStyle('transitionDelay'),
	        transformOrigin: _prefixStyle('transformOrigin')
	    });
	
	    me.hasClass = function (e, c) {
	        var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
	        return re.test(e.className);
	    };
	
	    me.addClass = function (e, c) {
	        if (me.hasClass(e, c)) {
	            return;
	        }
	
	        var newclass = e.className.split(' ');
	        newclass.push(c);
	        e.className = newclass.join(' ');
	    };
	
	    me.removeClass = function (e, c) {
	        if (!me.hasClass(e, c)) {
	            return;
	        }
	
	        var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
	        e.className = e.className.replace(re, ' ');
	    };
	
	    me.offset = function (el) {
	        var left = -el.offsetLeft,
	            top = -el.offsetTop;
	
	        // jshint -W084
	        while (el = el.offsetParent) {
	            left -= el.offsetLeft;
	            top -= el.offsetTop;
	        }
	        // jshint +W084
	
	        return {
	            left: left,
	            top: top
	        };
	    };
	
	    me.preventDefaultException = function (el, exceptions) {
	        for (var i in exceptions) {
	            if (exceptions[i].test(el[i])) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	
	    me.extend(me.eventType = {}, {
	        touchstart: 1,
	        touchmove: 1,
	        touchend: 1,
	
	        mousedown: 2,
	        mousemove: 2,
	        mouseup: 2,
	
	        pointerdown: 3,
	        pointermove: 3,
	        pointerup: 3,
	
	        MSPointerDown: 3,
	        MSPointerMove: 3,
	        MSPointerUp: 3
	    });
	
	    me.extend(me.ease = {}, {
	        quadratic: {
	            style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
	            fn: function fn(k) {
	                return k * (2 - k);
	            }
	        },
	        circular: {
	            style: 'cubic-bezier(0.1, 0.57, 0.1, 1)', // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
	            fn: function fn(k) {
	                return Math.sqrt(1 - --k * k);
	            }
	        },
	        back: {
	            style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	            fn: function fn(k) {
	                var b = 4;
	                return (k = k - 1) * k * ((b + 1) * k + b) + 1;
	            }
	        },
	        bounce: {
	            style: '',
	            fn: function fn(k) {
	                if ((k /= 1) < 1 / 2.75) {
	                    return 7.5625 * k * k;
	                } else if (k < 2 / 2.75) {
	                    return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	                } else if (k < 2.5 / 2.75) {
	                    return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	                } else {
	                    return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	                }
	            }
	        },
	        elastic: {
	            style: '',
	            fn: function fn(k) {
	                var f = 0.22,
	                    e = 0.4;
	
	                if (k === 0) {
	                    return 0;
	                }
	                if (k == 1) {
	                    return 1;
	                }
	
	                return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;
	            }
	        },
	        linear: {
	            style: 'linear',
	            fn: function fn(k) {
	                return k;
	            }
	        }
	    });
	
	    me.tap = function (e, eventName) {
	        var ev = document.createEvent('Event');
	        ev.initEvent(eventName, true, true);
	        ev.pageX = e.pageX;
	        ev.pageY = e.pageY;
	        e.target.dispatchEvent(ev);
	    };
	
	    me.click = function (e) {
	        var target = e.target,
	            ev;
	
	        if (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {
	            // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent
	            // initMouseEvent is deprecated.
	            ev = document.createEvent(window.MouseEvent ? 'MouseEvents' : 'Event');
	            ev.initEvent('click', true, true);
	            ev.view = e.view || window;
	            ev.detail = 1;
	            ev.screenX = target.screenX || 0;
	            ev.screenY = target.screenY || 0;
	            ev.clientX = target.clientX || 0;
	            ev.clientY = target.clientY || 0;
	            ev.ctrlKey = !!e.ctrlKey;
	            ev.altKey = !!e.altKey;
	            ev.shiftKey = !!e.shiftKey;
	            ev.metaKey = !!e.metaKey;
	            ev.button = 0;
	            ev.relatedTarget = null;
	            ev._constructed = true;
	            target.dispatchEvent(ev);
	        }
	    };
	
	    return me;
	}();
	function IScroll(el, options) {
	    this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
	    this.scroller = this.wrapper.children[0];
	    this.scrollerStyle = this.scroller.style; // cache style for better performance
	
	    this.options = {
	
	        resizeScrollbars: true,
	
	        mouseWheelSpeed: 20,
	
	        snapThreshold: 0.334,
	
	        // INSERT POINT: OPTIONS
	        disablePointer: !utils.hasPointer,
	        disableTouch: utils.hasPointer || !utils.hasTouch,
	        disableMouse: utils.hasPointer || utils.hasTouch,
	        startX: 0,
	        startY: 0,
	        scrollY: true,
	        directionLockThreshold: 5,
	        momentum: true,
	
	        bounce: true,
	        bounceTime: 600,
	        bounceEasing: '',
	
	        preventDefault: true,
	        preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },
	
	        HWCompositing: true,
	        useTransition: true,
	        useTransform: true,
	        bindToWrapper: typeof window.onmousedown === "undefined"
	    };
	
	    for (var i in options) {
	        this.options[i] = options[i];
	    }
	
	    // Normalize options
	    this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';
	
	    this.options.useTransition = utils.hasTransition && this.options.useTransition;
	    this.options.useTransform = utils.hasTransform && this.options.useTransform;
	
	    this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
	    this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;
	
	    // If you want eventPassthrough I have to lock one of the axes
	    this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
	    this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;
	
	    // With eventPassthrough we also need lockDirection mechanism
	    this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
	    this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;
	
	    this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;
	
	    this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;
	
	    if (this.options.tap === true) {
	        this.options.tap = 'tap';
	    }
	
	    // https://github.com/cubiq/iscroll/issues/1029
	    if (!this.options.useTransition && !this.options.useTransform) {
	        if (!/relative|absolute/i.test(this.scrollerStyle.position)) {
	            this.scrollerStyle.position = "relative";
	        }
	    }
	
	    if (this.options.shrinkScrollbars == 'scale') {
	        this.options.useTransition = false;
	    }
	
	    this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;
	
	    // INSERT POINT: NORMALIZATION
	
	    // Some defaults
	    this.x = 0;
	    this.y = 0;
	    this.directionX = 0;
	    this.directionY = 0;
	    this._events = {};
	
	    // INSERT POINT: DEFAULTS
	
	    this._init();
	    this.refresh();
	
	    this.scrollTo(this.options.startX, this.options.startY);
	    this.enable();
	}
	
	IScroll.prototype = {
	    version: '5.2.0',
	
	    _init: function _init() {
	        this._initEvents();
	
	        if (this.options.scrollbars || this.options.indicators) {
	            this._initIndicators();
	        }
	
	        if (this.options.mouseWheel) {
	            this._initWheel();
	        }
	
	        if (this.options.snap) {
	            this._initSnap();
	        }
	
	        if (this.options.keyBindings) {
	            this._initKeys();
	        }
	
	        // INSERT POINT: _init
	    },
	
	    destroy: function destroy() {
	        this._initEvents(true);
	        clearTimeout(this.resizeTimeout);
	        this.resizeTimeout = null;
	        this._execEvent('destroy');
	    },
	
	    _transitionEnd: function _transitionEnd(e) {
	        if (e.target != this.scroller || !this.isInTransition) {
	            return;
	        }
	
	        this._transitionTime();
	        if (!this.resetPosition(this.options.bounceTime)) {
	            this.isInTransition = false;
	            this._execEvent('scrollEnd');
	        }
	    },
	
	    _start: function _start(e) {
	        // React to left mouse button only
	        if (utils.eventType[e.type] != 1) {
	            // for button property
	            // http://unixpapa.com/js/mouse.html
	            var button;
	            if (!e.which) {
	                /* IE case */
	                button = e.button < 2 ? 0 : e.button == 4 ? 1 : 2;
	            } else {
	                /* All others */
	                button = e.button;
	            }
	            if (button !== 0) {
	                return;
	            }
	        }
	
	        if (!this.enabled || this.initiated && utils.eventType[e.type] !== this.initiated) {
	            return;
	        }
	
	        if (this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
	            e.preventDefault();
	        }
	
	        var point = e.touches ? e.touches[0] : e,
	            pos;
	
	        this.initiated = utils.eventType[e.type];
	        this.moved = false;
	        this.distX = 0;
	        this.distY = 0;
	        this.directionX = 0;
	        this.directionY = 0;
	        this.directionLocked = 0;
	
	        this.startTime = utils.getTime();
	
	        if (this.options.useTransition && this.isInTransition) {
	            this._transitionTime();
	            this.isInTransition = false;
	            pos = this.getComputedPosition();
	            this._translate(Math.round(pos.x), Math.round(pos.y));
	            this._execEvent('scrollEnd');
	        } else if (!this.options.useTransition && this.isAnimating) {
	            this.isAnimating = false;
	            this._execEvent('scrollEnd');
	        }
	
	        this.startX = this.x;
	        this.startY = this.y;
	        this.absStartX = this.x;
	        this.absStartY = this.y;
	        this.pointX = point.pageX;
	        this.pointY = point.pageY;
	
	        this._execEvent('beforeScrollStart');
	    },
	
	    _move: function _move(e) {
	        if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
	            return;
	        }
	
	        if (this.options.preventDefault) {
	            // increases performance on Android? TODO: check!
	            e.preventDefault();
	        }
	
	        var point = e.touches ? e.touches[0] : e,
	            deltaX = point.pageX - this.pointX,
	            deltaY = point.pageY - this.pointY,
	            timestamp = utils.getTime(),
	            newX,
	            newY,
	            absDistX,
	            absDistY;
	
	        this.pointX = point.pageX;
	        this.pointY = point.pageY;
	
	        this.distX += deltaX;
	        this.distY += deltaY;
	        absDistX = Math.abs(this.distX);
	        absDistY = Math.abs(this.distY);
	
	        // We need to move at least 10 pixels for the scrolling to initiate
	        if (timestamp - this.endTime > 300 && absDistX < 10 && absDistY < 10) {
	            return;
	        }
	
	        // If you are scrolling in one direction lock the other
	        if (!this.directionLocked && !this.options.freeScroll) {
	            if (absDistX > absDistY + this.options.directionLockThreshold) {
	                this.directionLocked = 'h'; // lock horizontally
	            } else if (absDistY >= absDistX + this.options.directionLockThreshold) {
	                this.directionLocked = 'v'; // lock vertically
	            } else {
	                this.directionLocked = 'n'; // no lock
	            }
	        }
	
	        if (this.directionLocked == 'h') {
	            if (this.options.eventPassthrough == 'vertical') {
	                e.preventDefault();
	            } else if (this.options.eventPassthrough == 'horizontal') {
	                this.initiated = false;
	                return;
	            }
	
	            deltaY = 0;
	        } else if (this.directionLocked == 'v') {
	            if (this.options.eventPassthrough == 'horizontal') {
	                e.preventDefault();
	            } else if (this.options.eventPassthrough == 'vertical') {
	                this.initiated = false;
	                return;
	            }
	
	            deltaX = 0;
	        }
	
	        deltaX = this.hasHorizontalScroll ? deltaX : 0;
	        deltaY = this.hasVerticalScroll ? deltaY : 0;
	
	        newX = this.x + deltaX;
	        newY = this.y + deltaY;
	
	        // Slow down if outside of the boundaries
	        if (newX > 0 || newX < this.maxScrollX) {
	            newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
	        }
	        if (newY > 0 || newY < this.maxScrollY) {
	            newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
	        }
	
	        this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
	        this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;
	
	        if (!this.moved) {
	            this._execEvent('scrollStart');
	        }
	
	        this.moved = true;
	
	        this._translate(newX, newY);
	
	        /* REPLACE START: _move */
	
	        if (timestamp - this.startTime > 300) {
	            this.startTime = timestamp;
	            this.startX = this.x;
	            this.startY = this.y;
	        }
	
	        /* REPLACE END: _move */
	    },
	
	    _end: function _end(e) {
	        if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
	            return;
	        }
	
	        if (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
	            e.preventDefault();
	        }
	
	        var point = e.changedTouches ? e.changedTouches[0] : e,
	            momentumX,
	            momentumY,
	            duration = utils.getTime() - this.startTime,
	            newX = Math.round(this.x),
	            newY = Math.round(this.y),
	            distanceX = Math.abs(newX - this.startX),
	            distanceY = Math.abs(newY - this.startY),
	            time = 0,
	            easing = '';
	
	        this.isInTransition = 0;
	        this.initiated = 0;
	        this.endTime = utils.getTime();
	
	        // reset if we are outside of the boundaries
	        if (this.resetPosition(this.options.bounceTime)) {
	            return;
	        }
	
	        this.scrollTo(newX, newY); // ensures that the last position is rounded
	
	        // we scrolled less than 10 pixels
	        if (!this.moved) {
	            if (this.options.tap) {
	                utils.tap(e, this.options.tap);
	            }
	
	            if (this.options.click) {
	                utils.click(e);
	            }
	
	            this._execEvent('scrollCancel');
	            return;
	        }
	
	        if (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {
	            this._execEvent('flick');
	            return;
	        }
	
	        // start momentum animation if needed
	        if (this.options.momentum && duration < 300) {
	            momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };
	            momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };
	            newX = momentumX.destination;
	            newY = momentumY.destination;
	            time = Math.max(momentumX.duration, momentumY.duration);
	            this.isInTransition = 1;
	        }
	
	        if (this.options.snap) {
	            var snap = this._nearestSnap(newX, newY);
	            this.currentPage = snap;
	            time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);
	            newX = snap.x;
	            newY = snap.y;
	
	            this.directionX = 0;
	            this.directionY = 0;
	            easing = this.options.bounceEasing;
	        }
	
	        // INSERT POINT: _end
	
	        if (newX != this.x || newY != this.y) {
	            // change easing function when scroller goes out of the boundaries
	            if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {
	                easing = utils.ease.quadratic;
	            }
	
	            this.scrollTo(newX, newY, time, easing);
	            return;
	        }
	
	        this._execEvent('scrollEnd');
	    },
	
	    _resize: function _resize() {
	        var that = this;
	
	        clearTimeout(this.resizeTimeout);
	
	        this.resizeTimeout = setTimeout(function () {
	            that.refresh();
	        }, this.options.resizePolling);
	    },
	
	    resetPosition: function resetPosition(time) {
	        var x = this.x,
	            y = this.y;
	
	        time = time || 0;
	
	        if (!this.hasHorizontalScroll || this.x > 0) {
	            x = 0;
	        } else if (this.x < this.maxScrollX) {
	            x = this.maxScrollX;
	        }
	
	        if (!this.hasVerticalScroll || this.y > 0) {
	            y = 0;
	        } else if (this.y < this.maxScrollY) {
	            y = this.maxScrollY;
	        }
	
	        if (x == this.x && y == this.y) {
	            return false;
	        }
	
	        this.scrollTo(x, y, time, this.options.bounceEasing);
	
	        return true;
	    },
	
	    disable: function disable() {
	        this.enabled = false;
	    },
	
	    enable: function enable() {
	        this.enabled = true;
	    },
	
	    refresh: function refresh() {
	        var rf = this.wrapper.offsetHeight; // Force reflow
	
	        this.wrapperWidth = this.wrapper.clientWidth;
	        this.wrapperHeight = this.wrapper.clientHeight;
	
	        /* REPLACE START: refresh */
	
	        this.scrollerWidth = this.scroller.offsetWidth;
	        this.scrollerHeight = this.scroller.offsetHeight;
	
	        this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
	        this.maxScrollY = this.wrapperHeight - this.scrollerHeight;
	
	        /* REPLACE END: refresh */
	
	        this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
	        this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;
	
	        if (!this.hasHorizontalScroll) {
	            this.maxScrollX = 0;
	            this.scrollerWidth = this.wrapperWidth;
	        }
	
	        if (!this.hasVerticalScroll) {
	            this.maxScrollY = 0;
	            this.scrollerHeight = this.wrapperHeight;
	        }
	
	        this.endTime = 0;
	        this.directionX = 0;
	        this.directionY = 0;
	
	        this.wrapperOffset = utils.offset(this.wrapper);
	
	        this._execEvent('refresh');
	
	        this.resetPosition();
	
	        // INSERT POINT: _refresh
	    },
	
	    on: function on(type, fn) {
	        if (!this._events[type]) {
	            this._events[type] = [];
	        }
	
	        this._events[type].push(fn);
	    },
	
	    off: function off(type, fn) {
	        if (!this._events[type]) {
	            return;
	        }
	
	        var index = this._events[type].indexOf(fn);
	
	        if (index > -1) {
	            this._events[type].splice(index, 1);
	        }
	    },
	
	    _execEvent: function _execEvent(type) {
	        if (!this._events[type]) {
	            return;
	        }
	
	        var i = 0,
	            l = this._events[type].length;
	
	        if (!l) {
	            return;
	        }
	
	        for (; i < l; i++) {
	            this._events[type][i].apply(this, [].slice.call(arguments, 1));
	        }
	    },
	
	    scrollBy: function scrollBy(x, y, time, easing) {
	        x = this.x + x;
	        y = this.y + y;
	        time = time || 0;
	
	        this.scrollTo(x, y, time, easing);
	    },
	
	    scrollTo: function scrollTo(x, y, time, easing) {
	        easing = easing || utils.ease.circular;
	
	        this.isInTransition = this.options.useTransition && time > 0;
	        var transitionType = this.options.useTransition && easing.style;
	        if (!time || transitionType) {
	            if (transitionType) {
	                this._transitionTimingFunction(easing.style);
	                this._transitionTime(time);
	            }
	            this._translate(x, y);
	        } else {
	            this._animate(x, y, time, easing.fn);
	        }
	        window.onFuckingScroll(Math.abs(x / this.maxScrollX), Math.abs(y / this.maxScrollY));
	    },
	
	    scrollToElement: function scrollToElement(el, time, offsetX, offsetY, easing) {
	        el = el.nodeType ? el : this.scroller.querySelector(el);
	
	        if (!el) {
	            return;
	        }
	
	        var pos = utils.offset(el);
	
	        pos.left -= this.wrapperOffset.left;
	        pos.top -= this.wrapperOffset.top;
	
	        // if offsetX/Y are true we center the element to the screen
	        if (offsetX === true) {
	            offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
	        }
	        if (offsetY === true) {
	            offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
	        }
	
	        pos.left -= offsetX || 0;
	        pos.top -= offsetY || 0;
	
	        pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
	        pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;
	
	        time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;
	
	        this.scrollTo(pos.left, pos.top, time, easing);
	    },
	
	    _transitionTime: function _transitionTime(time) {
	        if (!this.options.useTransition) {
	            return;
	        }
	        time = time || 0;
	        var durationProp = utils.style.transitionDuration;
	        if (!durationProp) {
	            return;
	        }
	
	        this.scrollerStyle[durationProp] = time + 'ms';
	
	        if (!time && utils.isBadAndroid) {
	            this.scrollerStyle[durationProp] = '0.0001ms';
	            // remove 0.0001ms
	            var self = this;
	            rAF(function () {
	                if (self.scrollerStyle[durationProp] === '0.0001ms') {
	                    self.scrollerStyle[durationProp] = '0s';
	                }
	            });
	        }
	
	        if (this.indicators) {
	            for (var i = this.indicators.length; i--;) {
	                this.indicators[i].transitionTime(time);
	            }
	        }
	
	        // INSERT POINT: _transitionTime
	    },
	
	    _transitionTimingFunction: function _transitionTimingFunction(easing) {
	        this.scrollerStyle[utils.style.transitionTimingFunction] = easing;
	
	        if (this.indicators) {
	            for (var i = this.indicators.length; i--;) {
	                this.indicators[i].transitionTimingFunction(easing);
	            }
	        }
	
	        // INSERT POINT: _transitionTimingFunction
	    },
	
	    _translate: function _translate(x, y) {
	        if (this.options.useTransform) {
	
	            /* REPLACE START: _translate */
	
	            this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;
	
	            /* REPLACE END: _translate */
	        } else {
	            x = Math.round(x);
	            y = Math.round(y);
	            this.scrollerStyle.left = x + 'px';
	            this.scrollerStyle.top = y + 'px';
	        }
	
	        this.x = x;
	        this.y = y;
	
	        if (this.indicators) {
	            for (var i = this.indicators.length; i--;) {
	                this.indicators[i].updatePosition();
	            }
	        }
	
	        // INSERT POINT: _translate
	    },
	
	    _initEvents: function _initEvents(remove) {
	        var eventType = remove ? utils.removeEvent : utils.addEvent,
	            target = this.options.bindToWrapper ? this.wrapper : window;
	
	        eventType(window, 'orientationchange', this);
	        eventType(window, 'resize', this);
	
	        if (this.options.click) {
	            eventType(this.wrapper, 'click', this, true);
	        }
	
	        if (!this.options.disableMouse) {
	            eventType(this.wrapper, 'mousedown', this);
	            eventType(target, 'mousemove', this);
	            eventType(target, 'mousecancel', this);
	            eventType(target, 'mouseup', this);
	        }
	
	        if (utils.hasPointer && !this.options.disablePointer) {
	            eventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);
	            eventType(target, utils.prefixPointerEvent('pointermove'), this);
	            eventType(target, utils.prefixPointerEvent('pointercancel'), this);
	            eventType(target, utils.prefixPointerEvent('pointerup'), this);
	        }
	
	        if (utils.hasTouch && !this.options.disableTouch) {
	            eventType(this.wrapper, 'touchstart', this);
	            eventType(target, 'touchmove', this);
	            eventType(target, 'touchcancel', this);
	            eventType(target, 'touchend', this);
	        }
	
	        eventType(this.scroller, 'transitionend', this);
	        eventType(this.scroller, 'webkitTransitionEnd', this);
	        eventType(this.scroller, 'oTransitionEnd', this);
	        eventType(this.scroller, 'MSTransitionEnd', this);
	    },
	
	    getComputedPosition: function getComputedPosition() {
	        var matrix = window.getComputedStyle(this.scroller, null),
	            x,
	            y;
	
	        if (this.options.useTransform) {
	            matrix = matrix[utils.style.transform].split(')')[0].split(', ');
	            x = +(matrix[12] || matrix[4]);
	            y = +(matrix[13] || matrix[5]);
	        } else {
	            x = +matrix.left.replace(/[^-\d.]/g, '');
	            y = +matrix.top.replace(/[^-\d.]/g, '');
	        }
	
	        return { x: x, y: y };
	    },
	    _initIndicators: function _initIndicators() {
	        var interactive = this.options.interactiveScrollbars,
	            customStyle = typeof this.options.scrollbars != 'string',
	            indicators = [],
	            indicator;
	
	        var that = this;
	
	        this.indicators = [];
	
	        if (this.options.scrollbars) {
	            // Vertical scrollbar
	            if (this.options.scrollY) {
	                indicator = {
	                    el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
	                    interactive: interactive,
	                    defaultScrollbars: true,
	                    customStyle: customStyle,
	                    resize: this.options.resizeScrollbars,
	                    shrink: this.options.shrinkScrollbars,
	                    fade: this.options.fadeScrollbars,
	                    listenX: false
	                };
	
	                this.wrapper.appendChild(indicator.el);
	                indicators.push(indicator);
	            }
	
	            // Horizontal scrollbar
	            if (this.options.scrollX) {
	                indicator = {
	                    el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
	                    interactive: interactive,
	                    defaultScrollbars: true,
	                    customStyle: customStyle,
	                    resize: this.options.resizeScrollbars,
	                    shrink: this.options.shrinkScrollbars,
	                    fade: this.options.fadeScrollbars,
	                    listenY: false
	                };
	
	                this.wrapper.appendChild(indicator.el);
	                indicators.push(indicator);
	            }
	        }
	
	        if (this.options.indicators) {
	            // TODO: check concat compatibility
	            indicators = indicators.concat(this.options.indicators);
	        }
	
	        for (var i = indicators.length; i--;) {
	            this.indicators.push(new Indicator(this, indicators[i]));
	        }
	
	        // TODO: check if we can use array.map (wide compatibility and performance issues)
	        function _indicatorsMap(fn) {
	            if (that.indicators) {
	                for (var i = that.indicators.length; i--;) {
	                    fn.call(that.indicators[i]);
	                }
	            }
	        }
	
	        if (this.options.fadeScrollbars) {
	            this.on('scrollEnd', function () {
	                _indicatorsMap(function () {
	                    this.fade();
	                });
	            });
	
	            this.on('scrollCancel', function () {
	                _indicatorsMap(function () {
	                    this.fade();
	                });
	            });
	
	            this.on('scrollStart', function () {
	                _indicatorsMap(function () {
	                    this.fade(1);
	                });
	            });
	
	            this.on('beforeScrollStart', function () {
	                _indicatorsMap(function () {
	                    this.fade(1, true);
	                });
	            });
	        }
	
	        this.on('refresh', function () {
	            _indicatorsMap(function () {
	                this.refresh();
	            });
	        });
	
	        this.on('destroy', function () {
	            _indicatorsMap(function () {
	                this.destroy();
	            });
	
	            delete this.indicators;
	        });
	    },
	
	    _initWheel: function _initWheel() {
	        utils.addEvent(this.wrapper, 'wheel', this);
	        utils.addEvent(this.wrapper, 'mousewheel', this);
	        utils.addEvent(this.wrapper, 'DOMMouseScroll', this);
	
	        this.on('destroy', function () {
	            clearTimeout(this.wheelTimeout);
	            this.wheelTimeout = null;
	            utils.removeEvent(this.wrapper, 'wheel', this);
	            utils.removeEvent(this.wrapper, 'mousewheel', this);
	            utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
	        });
	    },
	
	    _wheel: function _wheel(e) {
	        if (!this.enabled) {
	            return;
	        }
	
	        var wheelDeltaX,
	            wheelDeltaY,
	            newX,
	            newY,
	            that = this;
	
	        if (this.wheelTimeout === undefined) {
	            that._execEvent('scrollStart');
	        }
	
	        // Execute the scrollEnd event after 400ms the wheel stopped scrolling
	        clearTimeout(this.wheelTimeout);
	        this.wheelTimeout = setTimeout(function () {
	            if (!that.options.snap) {
	                that._execEvent('scrollEnd');
	            }
	            that.wheelTimeout = undefined;
	        }, 400);
	
	        if ('deltaX' in e) {
	            if (e.deltaMode === 1) {
	                wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;
	                wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;
	            } else {
	                wheelDeltaX = -e.deltaX;
	                wheelDeltaY = -e.deltaY;
	            }
	        } else if ('wheelDeltaX' in e) {
	            wheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;
	            wheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
	        } else if ('wheelDelta' in e) {
	            wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
	        } else if ('detail' in e) {
	            wheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;
	        } else {
	            return;
	        }
	
	        wheelDeltaX *= this.options.invertWheelDirection;
	        wheelDeltaY *= this.options.invertWheelDirection;
	
	        if (!this.hasVerticalScroll) {
	            wheelDeltaX = wheelDeltaY;
	            wheelDeltaY = 0;
	        }
	
	        if (this.options.snap) {
	            newX = this.currentPage.pageX;
	            newY = this.currentPage.pageY;
	
	            if (wheelDeltaX > 0) {
	                newX--;
	            } else if (wheelDeltaX < 0) {
	                newX++;
	            }
	
	            if (wheelDeltaY > 0) {
	                newY--;
	            } else if (wheelDeltaY < 0) {
	                newY++;
	            }
	
	            this.goToPage(newX, newY);
	
	            return;
	        }
	
	        newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);
	        newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);
	
	        this.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;
	        this.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;
	
	        if (newX > 0) {
	            newX = 0;
	        } else if (newX < this.maxScrollX) {
	            newX = this.maxScrollX;
	        }
	
	        if (newY > 0) {
	            newY = 0;
	        } else if (newY < this.maxScrollY) {
	            newY = this.maxScrollY;
	        }
	
	        this.scrollTo(newX, newY, 0);
	
	        // INSERT POINT: _wheel
	    },
	
	    _initSnap: function _initSnap() {
	        this.currentPage = {};
	
	        if (typeof this.options.snap == 'string') {
	            this.options.snap = this.scroller.querySelectorAll(this.options.snap);
	        }
	
	        this.on('refresh', function () {
	            var i = 0,
	                l,
	                m = 0,
	                n,
	                cx,
	                cy,
	                x = 0,
	                y,
	                stepX = this.options.snapStepX || this.wrapperWidth,
	                stepY = this.options.snapStepY || this.wrapperHeight,
	                el;
	
	            this.pages = [];
	
	            if (!this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight) {
	                return;
	            }
	
	            if (this.options.snap === true) {
	                cx = Math.round(stepX / 2);
	                cy = Math.round(stepY / 2);
	
	                while (x > -this.scrollerWidth) {
	                    this.pages[i] = [];
	                    l = 0;
	                    y = 0;
	
	                    while (y > -this.scrollerHeight) {
	                        this.pages[i][l] = {
	                            x: Math.max(x, this.maxScrollX),
	                            y: Math.max(y, this.maxScrollY),
	                            width: stepX,
	                            height: stepY,
	                            cx: x - cx,
	                            cy: y - cy
	                        };
	
	                        y -= stepY;
	                        l++;
	                    }
	
	                    x -= stepX;
	                    i++;
	                }
	            } else {
	                el = this.options.snap;
	                l = el.length;
	                n = -1;
	
	                for (; i < l; i++) {
	                    if (i === 0 || el[i].offsetLeft <= el[i - 1].offsetLeft) {
	                        m = 0;
	                        n++;
	                    }
	
	                    if (!this.pages[m]) {
	                        this.pages[m] = [];
	                    }
	
	                    x = Math.max(-el[i].offsetLeft, this.maxScrollX);
	                    y = Math.max(-el[i].offsetTop, this.maxScrollY);
	                    cx = x - Math.round(el[i].offsetWidth / 2);
	                    cy = y - Math.round(el[i].offsetHeight / 2);
	
	                    this.pages[m][n] = {
	                        x: x,
	                        y: y,
	                        width: el[i].offsetWidth,
	                        height: el[i].offsetHeight,
	                        cx: cx,
	                        cy: cy
	                    };
	
	                    if (x > this.maxScrollX) {
	                        m++;
	                    }
	                }
	            }
	
	            this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);
	
	            // Update snap threshold if needed
	            if (this.options.snapThreshold % 1 === 0) {
	                this.snapThresholdX = this.options.snapThreshold;
	                this.snapThresholdY = this.options.snapThreshold;
	            } else {
	                this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
	                this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
	            }
	        });
	
	        this.on('flick', function () {
	            var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.x - this.startX), 1000), Math.min(Math.abs(this.y - this.startY), 1000)), 300);
	
	            this.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, time);
	        });
	    },
	
	    _nearestSnap: function _nearestSnap(x, y) {
	        if (!this.pages.length) {
	            return { x: 0, y: 0, pageX: 0, pageY: 0 };
	        }
	
	        var i = 0,
	            l = this.pages.length,
	            m = 0;
	
	        // Check if we exceeded the snap threshold
	        if (Math.abs(x - this.absStartX) < this.snapThresholdX && Math.abs(y - this.absStartY) < this.snapThresholdY) {
	            return this.currentPage;
	        }
	
	        if (x > 0) {
	            x = 0;
	        } else if (x < this.maxScrollX) {
	            x = this.maxScrollX;
	        }
	
	        if (y > 0) {
	            y = 0;
	        } else if (y < this.maxScrollY) {
	            y = this.maxScrollY;
	        }
	
	        for (; i < l; i++) {
	            if (x >= this.pages[i][0].cx) {
	                x = this.pages[i][0].x;
	                break;
	            }
	        }
	
	        l = this.pages[i].length;
	
	        for (; m < l; m++) {
	            if (y >= this.pages[0][m].cy) {
	                y = this.pages[0][m].y;
	                break;
	            }
	        }
	
	        if (i == this.currentPage.pageX) {
	            i += this.directionX;
	
	            if (i < 0) {
	                i = 0;
	            } else if (i >= this.pages.length) {
	                i = this.pages.length - 1;
	            }
	
	            x = this.pages[i][0].x;
	        }
	
	        if (m == this.currentPage.pageY) {
	            m += this.directionY;
	
	            if (m < 0) {
	                m = 0;
	            } else if (m >= this.pages[0].length) {
	                m = this.pages[0].length - 1;
	            }
	
	            y = this.pages[0][m].y;
	        }
	
	        return {
	            x: x,
	            y: y,
	            pageX: i,
	            pageY: m
	        };
	    },
	
	    goToPage: function goToPage(x, y, time, easing) {
	        easing = easing || this.options.bounceEasing;
	
	        if (x >= this.pages.length) {
	            x = this.pages.length - 1;
	        } else if (x < 0) {
	            x = 0;
	        }
	
	        if (y >= this.pages[x].length) {
	            y = this.pages[x].length - 1;
	        } else if (y < 0) {
	            y = 0;
	        }
	
	        var posX = this.pages[x][y].x,
	            posY = this.pages[x][y].y;
	
	        time = time === undefined ? this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;
	
	        this.currentPage = {
	            x: posX,
	            y: posY,
	            pageX: x,
	            pageY: y
	        };
	
	        this.scrollTo(posX, posY, time, easing);
	    },
	
	    next: function next(time, easing) {
	        var x = this.currentPage.pageX,
	            y = this.currentPage.pageY;
	
	        x++;
	
	        if (x >= this.pages.length && this.hasVerticalScroll) {
	            x = 0;
	            y++;
	        }
	
	        this.goToPage(x, y, time, easing);
	    },
	
	    prev: function prev(time, easing) {
	        var x = this.currentPage.pageX,
	            y = this.currentPage.pageY;
	
	        x--;
	
	        if (x < 0 && this.hasVerticalScroll) {
	            x = 0;
	            y--;
	        }
	
	        this.goToPage(x, y, time, easing);
	    },
	
	    _initKeys: function _initKeys(e) {
	        // default key bindings
	        var keys = {
	            pageUp: 33,
	            pageDown: 34,
	            end: 35,
	            home: 36,
	            left: 37,
	            up: 38,
	            right: 39,
	            down: 40
	        };
	        var i;
	
	        // if you give me characters I give you keycode
	        if ((0, _typeof3.default)(this.options.keyBindings) == 'object') {
	            for (i in this.options.keyBindings) {
	                if (typeof this.options.keyBindings[i] == 'string') {
	                    this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
	                }
	            }
	        } else {
	            this.options.keyBindings = {};
	        }
	
	        for (i in keys) {
	            this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
	        }
	
	        utils.addEvent(window, 'keydown', this);
	
	        this.on('destroy', function () {
	            utils.removeEvent(window, 'keydown', this);
	        });
	    },
	
	    _key: function _key(e) {
	        if (!this.enabled) {
	            return;
	        }
	
	        var snap = this.options.snap,
	            // we are using this alot, better to cache it
	        newX = snap ? this.currentPage.pageX : this.x,
	            newY = snap ? this.currentPage.pageY : this.y,
	            now = utils.getTime(),
	            prevTime = this.keyTime || 0,
	            acceleration = 0.250,
	            pos;
	
	        if (this.options.useTransition && this.isInTransition) {
	            pos = this.getComputedPosition();
	
	            this._translate(Math.round(pos.x), Math.round(pos.y));
	            this.isInTransition = false;
	        }
	
	        this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;
	
	        switch (e.keyCode) {
	            case this.options.keyBindings.pageUp:
	                if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
	                    newX += snap ? 1 : this.wrapperWidth;
	                } else {
	                    newY += snap ? 1 : this.wrapperHeight;
	                }
	                break;
	            case this.options.keyBindings.pageDown:
	                if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
	                    newX -= snap ? 1 : this.wrapperWidth;
	                } else {
	                    newY -= snap ? 1 : this.wrapperHeight;
	                }
	                break;
	            case this.options.keyBindings.end:
	                newX = snap ? this.pages.length - 1 : this.maxScrollX;
	                newY = snap ? this.pages[0].length - 1 : this.maxScrollY;
	                break;
	            case this.options.keyBindings.home:
	                newX = 0;
	                newY = 0;
	                break;
	            case this.options.keyBindings.left:
	                newX += snap ? -1 : 5 + this.keyAcceleration >> 0;
	                break;
	            case this.options.keyBindings.up:
	                newY += snap ? 1 : 5 + this.keyAcceleration >> 0;
	                break;
	            case this.options.keyBindings.right:
	                newX -= snap ? -1 : 5 + this.keyAcceleration >> 0;
	                break;
	            case this.options.keyBindings.down:
	                newY -= snap ? 1 : 5 + this.keyAcceleration >> 0;
	                break;
	            default:
	                return;
	        }
	
	        if (snap) {
	            this.goToPage(newX, newY);
	            return;
	        }
	
	        if (newX > 0) {
	            newX = 0;
	            this.keyAcceleration = 0;
	        } else if (newX < this.maxScrollX) {
	            newX = this.maxScrollX;
	            this.keyAcceleration = 0;
	        }
	
	        if (newY > 0) {
	            newY = 0;
	            this.keyAcceleration = 0;
	        } else if (newY < this.maxScrollY) {
	            newY = this.maxScrollY;
	            this.keyAcceleration = 0;
	        }
	
	        this.scrollTo(newX, newY, 0);
	
	        this.keyTime = now;
	    },
	
	    _animate: function _animate(destX, destY, duration, easingFn) {
	        var that = this,
	            startX = this.x,
	            startY = this.y,
	            startTime = utils.getTime(),
	            destTime = startTime + duration;
	
	        function step() {
	            var now = utils.getTime(),
	                newX,
	                newY,
	                easing;
	
	            if (now >= destTime) {
	                that.isAnimating = false;
	                that._translate(destX, destY);
	
	                if (!that.resetPosition(that.options.bounceTime)) {
	                    that._execEvent('scrollEnd');
	                }
	
	                return;
	            }
	
	            now = (now - startTime) / duration;
	            easing = easingFn(now);
	            newX = (destX - startX) * easing + startX;
	            newY = (destY - startY) * easing + startY;
	            that._translate(newX, newY);
	
	            if (that.isAnimating) {
	                rAF(step);
	            }
	        }
	
	        this.isAnimating = true;
	        step();
	    },
	    handleEvent: function handleEvent(e) {
	        switch (e.type) {
	            case 'touchstart':
	            case 'pointerdown':
	            case 'MSPointerDown':
	            case 'mousedown':
	                this._start(e);
	                break;
	            case 'touchmove':
	            case 'pointermove':
	            case 'MSPointerMove':
	            case 'mousemove':
	                this._move(e);
	                break;
	            case 'touchend':
	            case 'pointerup':
	            case 'MSPointerUp':
	            case 'mouseup':
	            case 'touchcancel':
	            case 'pointercancel':
	            case 'MSPointerCancel':
	            case 'mousecancel':
	                this._end(e);
	                break;
	            case 'orientationchange':
	            case 'resize':
	                this._resize();
	                break;
	            case 'transitionend':
	            case 'webkitTransitionEnd':
	            case 'oTransitionEnd':
	            case 'MSTransitionEnd':
	                this._transitionEnd(e);
	                break;
	            case 'wheel':
	            case 'DOMMouseScroll':
	            case 'mousewheel':
	                this._wheel(e);
	                break;
	            case 'keydown':
	                this._key(e);
	                break;
	            case 'click':
	                if (this.enabled && !e._constructed) {
	                    e.preventDefault();
	                    e.stopPropagation();
	                }
	                break;
	        }
	    }
	};
	function createDefaultScrollbar(direction, interactive, type) {
	    var scrollbar = document.createElement('div'),
	        indicator = document.createElement('div');
	
	    if (type === true) {
	        scrollbar.style.cssText = 'position:absolute;z-index:9999';
	        indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';
	    }
	
	    indicator.className = 'iScrollIndicator';
	
	    if (direction == 'h') {
	        if (type === true) {
	            scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
	            indicator.style.height = '100%';
	        }
	        scrollbar.className = 'iScrollHorizontalScrollbar';
	    } else {
	        if (type === true) {
	            scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
	            indicator.style.width = '100%';
	        }
	        scrollbar.className = 'iScrollVerticalScrollbar';
	    }
	
	    scrollbar.style.cssText += ';overflow:hidden';
	
	    if (!interactive) {
	        scrollbar.style.pointerEvents = 'none';
	    }
	
	    scrollbar.appendChild(indicator);
	
	    return scrollbar;
	}
	
	function Indicator(scroller, options) {
	    this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
	    this.wrapperStyle = this.wrapper.style;
	    this.indicator = this.wrapper.children[0];
	    this.indicatorStyle = this.indicator.style;
	    this.scroller = scroller;
	
	    this.options = {
	        listenX: true,
	        listenY: true,
	        interactive: false,
	        resize: true,
	        defaultScrollbars: false,
	        shrink: false,
	        fade: false,
	        speedRatioX: 0,
	        speedRatioY: 0
	    };
	
	    for (var i in options) {
	        this.options[i] = options[i];
	    }
	
	    this.sizeRatioX = 1;
	    this.sizeRatioY = 1;
	    this.maxPosX = 0;
	    this.maxPosY = 0;
	
	    if (this.options.interactive) {
	        if (!this.options.disableTouch) {
	            utils.addEvent(this.indicator, 'touchstart', this);
	            utils.addEvent(window, 'touchend', this);
	        }
	        if (!this.options.disablePointer) {
	            utils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
	            utils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);
	        }
	        if (!this.options.disableMouse) {
	            utils.addEvent(this.indicator, 'mousedown', this);
	            utils.addEvent(window, 'mouseup', this);
	        }
	    }
	
	    if (this.options.fade) {
	        this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
	        var durationProp = utils.style.transitionDuration;
	        if (!durationProp) {
	            return;
	        }
	        this.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms';
	        // remove 0.0001ms
	        var self = this;
	        if (utils.isBadAndroid) {
	            rAF(function () {
	                if (self.wrapperStyle[durationProp] === '0.0001ms') {
	                    self.wrapperStyle[durationProp] = '0s';
	                }
	            });
	        }
	        this.wrapperStyle.opacity = '0';
	    }
	}
	
	Indicator.prototype = {
	    handleEvent: function handleEvent(e) {
	        switch (e.type) {
	            case 'touchstart':
	            case 'pointerdown':
	            case 'MSPointerDown':
	            case 'mousedown':
	                this._start(e);
	                break;
	            case 'touchmove':
	            case 'pointermove':
	            case 'MSPointerMove':
	            case 'mousemove':
	                this._move(e);
	                break;
	            case 'touchend':
	            case 'pointerup':
	            case 'MSPointerUp':
	            case 'mouseup':
	            case 'touchcancel':
	            case 'pointercancel':
	            case 'MSPointerCancel':
	            case 'mousecancel':
	                this._end(e);
	                break;
	        }
	    },
	
	    destroy: function destroy() {
	        if (this.options.fadeScrollbars) {
	            clearTimeout(this.fadeTimeout);
	            this.fadeTimeout = null;
	        }
	        if (this.options.interactive) {
	            utils.removeEvent(this.indicator, 'touchstart', this);
	            utils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
	            utils.removeEvent(this.indicator, 'mousedown', this);
	
	            utils.removeEvent(window, 'touchmove', this);
	            utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
	            utils.removeEvent(window, 'mousemove', this);
	
	            utils.removeEvent(window, 'touchend', this);
	            utils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);
	            utils.removeEvent(window, 'mouseup', this);
	        }
	
	        if (this.options.defaultScrollbars) {
	            this.wrapper.parentNode.removeChild(this.wrapper);
	        }
	    },
	
	    _start: function _start(e) {
	        var point = e.touches ? e.touches[0] : e;
	
	        e.preventDefault();
	        e.stopPropagation();
	
	        this.transitionTime();
	
	        this.initiated = true;
	        this.moved = false;
	        this.lastPointX = point.pageX;
	        this.lastPointY = point.pageY;
	
	        this.startTime = utils.getTime();
	
	        if (!this.options.disableTouch) {
	            utils.addEvent(window, 'touchmove', this);
	        }
	        if (!this.options.disablePointer) {
	            utils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);
	        }
	        if (!this.options.disableMouse) {
	            utils.addEvent(window, 'mousemove', this);
	        }
	
	        this.scroller._execEvent('beforeScrollStart');
	    },
	
	    _move: function _move(e) {
	        var point = e.touches ? e.touches[0] : e,
	            deltaX,
	            deltaY,
	            newX,
	            newY,
	            timestamp = utils.getTime();
	
	        if (!this.moved) {
	            this.scroller._execEvent('scrollStart');
	        }
	
	        this.moved = true;
	
	        deltaX = point.pageX - this.lastPointX;
	        this.lastPointX = point.pageX;
	
	        deltaY = point.pageY - this.lastPointY;
	        this.lastPointY = point.pageY;
	
	        newX = this.x + deltaX;
	        newY = this.y + deltaY;
	
	        this._pos(newX, newY);
	
	        // INSERT POINT: indicator._move
	
	        e.preventDefault();
	        e.stopPropagation();
	    },
	
	    _end: function _end(e) {
	        if (!this.initiated) {
	            return;
	        }
	
	        this.initiated = false;
	
	        e.preventDefault();
	        e.stopPropagation();
	
	        utils.removeEvent(window, 'touchmove', this);
	        utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
	        utils.removeEvent(window, 'mousemove', this);
	
	        if (this.scroller.options.snap) {
	            var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);
	
	            var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);
	
	            if (this.scroller.x != snap.x || this.scroller.y != snap.y) {
	                this.scroller.directionX = 0;
	                this.scroller.directionY = 0;
	                this.scroller.currentPage = snap;
	                this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
	            }
	        }
	
	        if (this.moved) {
	            this.scroller._execEvent('scrollEnd');
	        }
	    },
	
	    transitionTime: function transitionTime(time) {
	        time = time || 0;
	        var durationProp = utils.style.transitionDuration;
	        if (!durationProp) {
	            return;
	        }
	
	        this.indicatorStyle[durationProp] = time + 'ms';
	
	        if (!time && utils.isBadAndroid) {
	            this.indicatorStyle[durationProp] = '0.0001ms';
	            // remove 0.0001ms
	            var self = this;
	            rAF(function () {
	                if (self.indicatorStyle[durationProp] === '0.0001ms') {
	                    self.indicatorStyle[durationProp] = '0s';
	                }
	            });
	        }
	    },
	
	    transitionTimingFunction: function transitionTimingFunction(easing) {
	        this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
	    },
	
	    refresh: function refresh() {
	        this.transitionTime();
	
	        if (this.options.listenX && !this.options.listenY) {
	            this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
	        } else if (this.options.listenY && !this.options.listenX) {
	            this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
	        } else {
	            this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
	        }
	
	        if (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {
	            utils.addClass(this.wrapper, 'iScrollBothScrollbars');
	            utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');
	
	            if (this.options.defaultScrollbars && this.options.customStyle) {
	                if (this.options.listenX) {
	                    this.wrapper.style.right = '8px';
	                } else {
	                    this.wrapper.style.bottom = '8px';
	                }
	            }
	        } else {
	            utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
	            utils.addClass(this.wrapper, 'iScrollLoneScrollbar');
	
	            if (this.options.defaultScrollbars && this.options.customStyle) {
	                if (this.options.listenX) {
	                    this.wrapper.style.right = '2px';
	                } else {
	                    this.wrapper.style.bottom = '2px';
	                }
	            }
	        }
	
	        var r = this.wrapper.offsetHeight; // force refresh
	
	        if (this.options.listenX) {
	            this.wrapperWidth = this.wrapper.clientWidth;
	            if (this.options.resize) {
	                this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
	                this.indicatorStyle.width = this.indicatorWidth + 'px';
	            } else {
	                this.indicatorWidth = this.indicator.clientWidth;
	            }
	
	            this.maxPosX = this.wrapperWidth - this.indicatorWidth;
	
	            if (this.options.shrink == 'clip') {
	                this.minBoundaryX = -this.indicatorWidth + 8;
	                this.maxBoundaryX = this.wrapperWidth - 8;
	            } else {
	                this.minBoundaryX = 0;
	                this.maxBoundaryX = this.maxPosX;
	            }
	
	            this.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX;
	        }
	
	        if (this.options.listenY) {
	            this.wrapperHeight = this.wrapper.clientHeight;
	            if (this.options.resize) {
	                this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
	                this.indicatorStyle.height = this.indicatorHeight + 'px';
	            } else {
	                this.indicatorHeight = this.indicator.clientHeight;
	            }
	
	            this.maxPosY = this.wrapperHeight - this.indicatorHeight;
	
	            if (this.options.shrink == 'clip') {
	                this.minBoundaryY = -this.indicatorHeight + 8;
	                this.maxBoundaryY = this.wrapperHeight - 8;
	            } else {
	                this.minBoundaryY = 0;
	                this.maxBoundaryY = this.maxPosY;
	            }
	
	            this.maxPosY = this.wrapperHeight - this.indicatorHeight;
	            this.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY;
	        }
	
	        this.updatePosition();
	    },
	
	    updatePosition: function updatePosition() {
	        var x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,
	            y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;
	
	        if (!this.options.ignoreBoundaries) {
	            if (x < this.minBoundaryX) {
	                if (this.options.shrink == 'scale') {
	                    this.width = Math.max(this.indicatorWidth + x, 8);
	                    this.indicatorStyle.width = this.width + 'px';
	                }
	                x = this.minBoundaryX;
	            } else if (x > this.maxBoundaryX) {
	                if (this.options.shrink == 'scale') {
	                    this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);
	                    this.indicatorStyle.width = this.width + 'px';
	                    x = this.maxPosX + this.indicatorWidth - this.width;
	                } else {
	                    x = this.maxBoundaryX;
	                }
	            } else if (this.options.shrink == 'scale' && this.width != this.indicatorWidth) {
	                this.width = this.indicatorWidth;
	                this.indicatorStyle.width = this.width + 'px';
	            }
	
	            if (y < this.minBoundaryY) {
	                if (this.options.shrink == 'scale') {
	                    this.height = Math.max(this.indicatorHeight + y * 3, 8);
	                    this.indicatorStyle.height = this.height + 'px';
	                }
	                y = this.minBoundaryY;
	            } else if (y > this.maxBoundaryY) {
	                if (this.options.shrink == 'scale') {
	                    this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);
	                    this.indicatorStyle.height = this.height + 'px';
	                    y = this.maxPosY + this.indicatorHeight - this.height;
	                } else {
	                    y = this.maxBoundaryY;
	                }
	            } else if (this.options.shrink == 'scale' && this.height != this.indicatorHeight) {
	                this.height = this.indicatorHeight;
	                this.indicatorStyle.height = this.height + 'px';
	            }
	        }
	
	        this.x = x;
	        this.y = y;
	
	        if (this.scroller.options.useTransform) {
	            this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
	        } else {
	            this.indicatorStyle.left = x + 'px';
	            this.indicatorStyle.top = y + 'px';
	        }
	    },
	
	    _pos: function _pos(x, y) {
	        if (x < 0) {
	            x = 0;
	        } else if (x > this.maxPosX) {
	            x = this.maxPosX;
	        }
	
	        if (y < 0) {
	            y = 0;
	        } else if (y > this.maxPosY) {
	            y = this.maxPosY;
	        }
	
	        x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
	        y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;
	
	        this.scroller.scrollTo(x, y);
	    },
	
	    fade: function fade(val, hold) {
	        if (hold && !this.visible) {
	            return;
	        }
	
	        clearTimeout(this.fadeTimeout);
	        this.fadeTimeout = null;
	
	        var time = val ? 250 : 500,
	            delay = val ? 0 : 300;
	
	        val = val ? '1' : '0';
	
	        this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';
	
	        this.fadeTimeout = setTimeout(function (val) {
	            this.wrapperStyle.opacity = val;
	            this.visible = +val;
	        }.bind(this, val), delay);
	    }
	};
	
	IScroll.utils = utils;
	window.IScroll = IScroll;
	
	/*!
	 * fullPage 2.9.4
	 * https://github.com/alvarotrigo/fullPage.js
	 * @license MIT licensed
	 *
	 * Copyright (C) 2015 alvarotrigo.com - A project by Alvaro Trigo
	 */
	(function (global, factory) {
	    'use strict';
	
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
	            return factory($, global, global.document, global.Math);
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof3.default)(exports)) === "object" && exports) {
	        module.exports = factory(require('jquery'), global, global.document, global.Math);
	    } else {
	        factory(jQuery, global, global.document, global.Math);
	    }
	})(typeof window !== 'undefined' ? window : undefined, function ($, window, document, Math, undefined) {
	    'use strict';
	
	    // keeping central set of classnames and selectors
	
	    var WRAPPER = 'fullpage-wrapper';
	    var WRAPPER_SEL = '.' + WRAPPER;
	
	    // slimscroll
	    var SCROLLABLE = 'fp-scrollable';
	    var SCROLLABLE_SEL = '.' + SCROLLABLE;
	
	    // util
	    var RESPONSIVE = 'fp-responsive';
	    var NO_TRANSITION = 'fp-notransition';
	    var DESTROYED = 'fp-destroyed';
	    var ENABLED = 'fp-enabled';
	    var VIEWING_PREFIX = 'fp-viewing';
	    var ACTIVE = 'active';
	    var ACTIVE_SEL = '.' + ACTIVE;
	    var COMPLETELY = 'fp-completely';
	    var COMPLETELY_SEL = '.' + COMPLETELY;
	
	    // section
	    var SECTION_DEFAULT_SEL = '.section';
	    var SECTION = 'fp-section';
	    var SECTION_SEL = '.' + SECTION;
	    var SECTION_ACTIVE_SEL = SECTION_SEL + ACTIVE_SEL;
	    var SECTION_FIRST_SEL = SECTION_SEL + ':first';
	    var SECTION_LAST_SEL = SECTION_SEL + ':last';
	    var TABLE_CELL = 'fp-tableCell';
	    var TABLE_CELL_SEL = '.' + TABLE_CELL;
	    var AUTO_HEIGHT = 'fp-auto-height';
	    var AUTO_HEIGHT_SEL = '.fp-auto-height';
	    var NORMAL_SCROLL = 'fp-normal-scroll';
	    var NORMAL_SCROLL_SEL = '.fp-normal-scroll';
	
	    // section nav
	    var SECTION_NAV = 'fp-nav';
	    var SECTION_NAV_SEL = '#' + SECTION_NAV;
	    var SECTION_NAV_TOOLTIP = 'fp-tooltip';
	    var SECTION_NAV_TOOLTIP_SEL = '.' + SECTION_NAV_TOOLTIP;
	    var SHOW_ACTIVE_TOOLTIP = 'fp-show-active';
	
	    // slide
	    var SLIDE_DEFAULT_SEL = '.slide';
	    var SLIDE = 'fp-slide';
	    var SLIDE_SEL = '.' + SLIDE;
	    var SLIDE_ACTIVE_SEL = SLIDE_SEL + ACTIVE_SEL;
	    var SLIDES_WRAPPER = 'fp-slides';
	    var SLIDES_WRAPPER_SEL = '.' + SLIDES_WRAPPER;
	    var SLIDES_CONTAINER = 'fp-slidesContainer';
	    var SLIDES_CONTAINER_SEL = '.' + SLIDES_CONTAINER;
	    var TABLE = 'fp-table';
	
	    // slide nav
	    var SLIDES_NAV = 'fp-slidesNav';
	    var SLIDES_NAV_SEL = '.' + SLIDES_NAV;
	    var SLIDES_NAV_LINK_SEL = SLIDES_NAV_SEL + ' a';
	    var SLIDES_ARROW = 'fp-controlArrow';
	    var SLIDES_ARROW_SEL = '.' + SLIDES_ARROW;
	    var SLIDES_PREV = 'fp-prev';
	    var SLIDES_PREV_SEL = '.' + SLIDES_PREV;
	    var SLIDES_ARROW_PREV = SLIDES_ARROW + ' ' + SLIDES_PREV;
	    var SLIDES_ARROW_PREV_SEL = SLIDES_ARROW_SEL + SLIDES_PREV_SEL;
	    var SLIDES_NEXT = 'fp-next';
	    var SLIDES_NEXT_SEL = '.' + SLIDES_NEXT;
	    var SLIDES_ARROW_NEXT = SLIDES_ARROW + ' ' + SLIDES_NEXT;
	    var SLIDES_ARROW_NEXT_SEL = SLIDES_ARROW_SEL + SLIDES_NEXT_SEL;
	
	    var $window = $(window);
	    var $document = $(document);
	
	    // Default options for iScroll.js used when using scrollOverflow
	    var iscrollOptions = {
	        scrollbars: true,
	        mouseWheel: true,
	        hideScrollbars: false,
	        fadeScrollbars: false,
	        disableMouse: true,
	        interactiveScrollbars: true
	    };
	
	    $.fn.fullpage = function (options) {
	        //only once my friend!
	        if ($('html').hasClass(ENABLED)) {
	            displayWarnings();return;
	        }
	
	        // common jQuery objects
	        var $htmlBody = $('html, body');
	        var $body = $('body');
	
	        var FP = $.fn.fullpage;
	
	        // Creating some defaults, extending them with any options that were provided
	        options = $.extend({
	            //navigation
	            menu: false,
	            anchors: [],
	            lockAnchors: false,
	            navigation: false,
	            navigationPosition: 'right',
	            navigationTooltips: [],
	            showActiveTooltip: false,
	            slidesNavigation: false,
	            slidesNavPosition: 'bottom',
	            scrollBar: false,
	            hybrid: false,
	
	            //scrolling
	            css3: true,
	            scrollingSpeed: 700,
	            autoScrolling: true,
	            fitToSection: true,
	            fitToSectionDelay: 1000,
	            easing: 'easeInOutCubic',
	            easingcss3: 'ease',
	            loopBottom: false,
	            loopTop: false,
	            loopHorizontal: true,
	            continuousVertical: false,
	            continuousHorizontal: false,
	            scrollHorizontally: false,
	            interlockedSlides: false,
	            dragAndMove: false,
	            offsetSections: false,
	            resetSliders: false,
	            fadingEffect: false,
	            normalScrollElements: null,
	            scrollOverflow: false,
	            scrollOverflowReset: false,
	            scrollOverflowHandler: iscrollHandler,
	            scrollOverflowOptions: null,
	            touchSensitivity: 5,
	            normalScrollElementTouchThreshold: 5,
	            bigSectionsDestination: null,
	
	            //Accessibility
	            keyboardScrolling: true,
	            animateAnchor: true,
	            recordHistory: true,
	
	            //design
	            controlArrows: true,
	            controlArrowColor: '#fff',
	            verticalCentered: true,
	            sectionsColor: [],
	            paddingTop: 0,
	            paddingBottom: 0,
	            fixedElements: null,
	            responsive: 0, //backwards compabitility with responsiveWiddth
	            responsiveWidth: 0,
	            responsiveHeight: 0,
	            responsiveSlides: false,
	            parallax: false,
	            parallaxOptions: {
	                type: 'reveal',
	                percentage: 62,
	                property: 'translate'
	            },
	
	            //Custom selectors
	            sectionSelector: SECTION_DEFAULT_SEL,
	            slideSelector: SLIDE_DEFAULT_SEL,
	
	            //events
	            afterLoad: null,
	            onLeave: null,
	            afterRender: null,
	            afterResize: null,
	            afterReBuild: null,
	            afterSlideLoad: null,
	            onSlideLeave: null,
	            afterResponsive: null,
	
	            lazyLoading: true
	        }, options);
	
	        //flag to avoid very fast sliding for landscape sliders
	        var slideMoving = false;
	
	        var isTouchDevice = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/);
	        var isTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints > 0 || navigator.maxTouchPoints;
	        var container = $(this);
	        var windowsHeight = $window.height();
	        var isResizing = false;
	        var isWindowFocused = true;
	        var lastScrolledDestiny;
	        var lastScrolledSlide;
	        var canScroll = true;
	        var scrollings = [];
	        var controlPressed;
	        var startingSection;
	        var isScrollAllowed = {};
	        isScrollAllowed.m = { 'up': true, 'down': true, 'left': true, 'right': true };
	        isScrollAllowed.k = $.extend(true, {}, isScrollAllowed.m);
	        var MSPointer = getMSPointer();
	        var events = {
	            touchmove: 'ontouchmove' in window ? 'touchmove' : MSPointer.move,
	            touchstart: 'ontouchstart' in window ? 'touchstart' : MSPointer.down
	        };
	
	        //timeouts
	        var resizeId;
	        var afterSectionLoadsId;
	        var afterSlideLoadsId;
	        var scrollId;
	        var scrollId2;
	        var keydownId;
	        var originals = $.extend(true, {}, options); //deep copy
	
	        displayWarnings();
	
	        //fixing bug in iScroll with links: https://github.com/cubiq/iscroll/issues/783
	        iscrollOptions.click = isTouch; // see #2035
	
	        //extending iScroll options with the user custom ones
	        iscrollOptions = $.extend(iscrollOptions, options.scrollOverflowOptions);
	
	        //easeInOutCubic animation included in the plugin
	        $.extend($.easing, { easeInOutCubic: function easeInOutCubic(x, t, b, c, d) {
	                if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;return c / 2 * ((t -= 2) * t * t + 2) + b;
	            } });
	
	        /**
	        * Sets the autoScroll option.
	        * It changes the scroll bar visibility and the history of the site as a result.
	        */
	        function setAutoScrolling(value, type) {
	            //removing the transformation
	            if (!value) {
	                silentScroll(0);
	            }
	
	            setVariableState('autoScrolling', value, type);
	
	            var element = $(SECTION_ACTIVE_SEL);
	
	            if (options.autoScrolling && !options.scrollBar) {
	                $htmlBody.css({
	                    'overflow': 'hidden',
	                    'height': '100%'
	                });
	
	                setRecordHistory(originals.recordHistory, 'internal');
	
	                //for IE touch devices
	                container.css({
	                    '-ms-touch-action': 'none',
	                    'touch-action': 'none'
	                });
	
	                if (element.length) {
	                    //moving the container up
	                    silentScroll(element.position().top);
	                }
	            } else {
	                $htmlBody.css({
	                    'overflow': 'visible',
	                    'height': 'initial'
	                });
	
	                setRecordHistory(false, 'internal');
	
	                //for IE touch devices
	                container.css({
	                    '-ms-touch-action': '',
	                    'touch-action': ''
	                });
	
	                //scrolling the page to the section with no animation
	                if (element.length) {
	                    $htmlBody.scrollTop(element.position().top);
	                }
	            }
	        }
	
	        /**
	        * Defines wheter to record the history for each hash change in the URL.
	        */
	        function setRecordHistory(value, type) {
	            setVariableState('recordHistory', value, type);
	        }
	
	        /**
	        * Defines the scrolling speed
	        */
	        function setScrollingSpeed(value, type) {
	            setVariableState('scrollingSpeed', value, type);
	        }
	
	        /**
	        * Sets fitToSection
	        */
	        function setFitToSection(value, type) {
	            setVariableState('fitToSection', value, type);
	        }
	
	        /**
	        * Sets lockAnchors
	        */
	        function setLockAnchors(value) {
	            options.lockAnchors = value;
	        }
	
	        /**
	        * Adds or remove the possiblity of scrolling through sections by using the mouse wheel or the trackpad.
	        */
	        function setMouseWheelScrolling(value) {
	            if (value) {
	                addMouseWheelHandler();
	                addMiddleWheelHandler();
	            } else {
	                removeMouseWheelHandler();
	                removeMiddleWheelHandler();
	            }
	        }
	
	        /**
	        * Adds or remove the possibility of scrolling through sections by using the mouse wheel/trackpad or touch gestures.
	        * Optionally a second parameter can be used to specify the direction for which the action will be applied.
	        *
	        * @param directions string containing the direction or directions separated by comma.
	        */
	        function setAllowScrolling(value, directions) {
	            if (typeof directions !== 'undefined') {
	                directions = directions.replace(/ /g, '').split(',');
	
	                $.each(directions, function (index, direction) {
	                    setIsScrollAllowed(value, direction, 'm');
	                });
	            } else if (value) {
	                setMouseWheelScrolling(true);
	                addTouchHandler();
	            } else {
	                setMouseWheelScrolling(false);
	                removeTouchHandler();
	            }
	        }
	
	        /**
	        * Adds or remove the possibility of scrolling through sections by using the keyboard arrow keys
	        */
	        function setKeyboardScrolling(value, directions) {
	            if (typeof directions !== 'undefined') {
	                directions = directions.replace(/ /g, '').split(',');
	
	                $.each(directions, function (index, direction) {
	                    setIsScrollAllowed(value, direction, 'k');
	                });
	            } else {
	                options.keyboardScrolling = value;
	            }
	        }
	
	        /**
	        * Moves the page up one section.
	        */
	        function moveSectionUp() {
	            var prev = $(SECTION_ACTIVE_SEL).prev(SECTION_SEL);
	
	            //looping to the bottom if there's no more sections above
	            if (!prev.length && (options.loopTop || options.continuousVertical)) {
	                prev = $(SECTION_SEL).last();
	            }
	
	            if (prev.length) {
	                scrollPage(prev, null, true);
	            }
	        }
	
	        /**
	        * Moves the page down one section.
	        */
	        function moveSectionDown() {
	            var next = $(SECTION_ACTIVE_SEL).next(SECTION_SEL);
	
	            //looping to the top if there's no more sections below
	            if (!next.length && (options.loopBottom || options.continuousVertical)) {
	                next = $(SECTION_SEL).first();
	            }
	
	            if (next.length) {
	                scrollPage(next, null, false);
	            }
	        }
	
	        /**
	        * Moves the page to the given section and slide with no animation.
	        * Anchors or index positions can be used as params.
	        */
	        function silentMoveTo(sectionAnchor, slideAnchor) {
	            setScrollingSpeed(0, 'internal');
	            moveTo(sectionAnchor, slideAnchor);
	            setScrollingSpeed(originals.scrollingSpeed, 'internal');
	        }
	
	        /**
	        * Moves the page to the given section and slide.
	        * Anchors or index positions can be used as params.
	        */
	        function moveTo(sectionAnchor, slideAnchor) {
	            var destiny = getSectionByAnchor(sectionAnchor);
	
	            if (typeof slideAnchor !== 'undefined') {
	                scrollPageAndSlide(sectionAnchor, slideAnchor);
	            } else if (destiny.length > 0) {
	                scrollPage(destiny);
	            }
	        }
	
	        /**
	        * Slides right the slider of the active section.
	        * Optional `section` param.
	        */
	        function moveSlideRight(section) {
	            moveSlide('right', section);
	        }
	
	        /**
	        * Slides left the slider of the active section.
	        * Optional `section` param.
	        */
	        function moveSlideLeft(section) {
	            moveSlide('left', section);
	        }
	
	        /**
	         * When resizing is finished, we adjust the slides sizes and positions
	         */
	        function reBuild(resizing) {
	            if (container.hasClass(DESTROYED)) {
	                return;
	            } //nothing to do if the plugin was destroyed
	
	            isResizing = true;
	
	            windowsHeight = $window.height(); //updating global var
	
	            $(SECTION_SEL).each(function () {
	                var slidesWrap = $(this).find(SLIDES_WRAPPER_SEL);
	                var slides = $(this).find(SLIDE_SEL);
	
	                //adjusting the height of the table-cell for IE and Firefox
	                if (options.verticalCentered) {
	                    $(this).find(TABLE_CELL_SEL).css('height', getTableHeight($(this)) + 'px');
	                }
	
	                $(this).css('height', windowsHeight + 'px');
	
	                //resizing the scrolling divs
	                if (options.scrollOverflow) {
	                    if (slides.length) {
	                        slides.each(function () {
	                            createScrollBar($(this));
	                        });
	                    } else {
	                        createScrollBar($(this));
	                    }
	                }
	
	                //adjusting the position fo the FULL WIDTH slides...
	                if (slides.length > 1) {
	                    landscapeScroll(slidesWrap, slidesWrap.find(SLIDE_ACTIVE_SEL));
	                }
	            });
	
	            var activeSection = $(SECTION_ACTIVE_SEL);
	            var sectionIndex = activeSection.index(SECTION_SEL);
	
	            //isn't it the first section?
	            if (sectionIndex) {
	                //adjusting the position for the current section
	                silentMoveTo(sectionIndex + 1);
	            }
	
	            isResizing = false;
	            $.isFunction(options.afterResize) && resizing && options.afterResize.call(container);
	            $.isFunction(options.afterReBuild) && !resizing && options.afterReBuild.call(container);
	        }
	
	        /**
	        * Turns fullPage.js to normal scrolling mode when the viewport `width` or `height`
	        * are smaller than the set limit values.
	        */
	        function setResponsive(active) {
	            var isResponsive = $body.hasClass(RESPONSIVE);
	
	            if (active) {
	                if (!isResponsive) {
	                    setAutoScrolling(false, 'internal');
	                    setFitToSection(false, 'internal');
	                    $(SECTION_NAV_SEL).hide();
	                    $body.addClass(RESPONSIVE);
	                    $.isFunction(options.afterResponsive) && options.afterResponsive.call(container, active);
	                }
	            } else if (isResponsive) {
	                setAutoScrolling(originals.autoScrolling, 'internal');
	                setFitToSection(originals.autoScrolling, 'internal');
	                $(SECTION_NAV_SEL).show();
	                $body.removeClass(RESPONSIVE);
	                $.isFunction(options.afterResponsive) && options.afterResponsive.call(container, active);
	            }
	        }
	
	        if ($(this).length) {
	            //public functions
	            FP.setAutoScrolling = setAutoScrolling;
	            FP.setRecordHistory = setRecordHistory;
	            FP.setScrollingSpeed = setScrollingSpeed;
	            FP.setFitToSection = setFitToSection;
	            FP.setLockAnchors = setLockAnchors;
	            FP.setMouseWheelScrolling = setMouseWheelScrolling;
	            FP.setAllowScrolling = setAllowScrolling;
	            FP.setKeyboardScrolling = setKeyboardScrolling;
	            FP.moveSectionUp = moveSectionUp;
	            FP.moveSectionDown = moveSectionDown;
	            FP.silentMoveTo = silentMoveTo;
	            FP.moveTo = moveTo;
	            FP.moveSlideRight = moveSlideRight;
	            FP.moveSlideLeft = moveSlideLeft;
	            FP.fitToSection = fitToSection;
	            FP.reBuild = reBuild;
	            FP.setResponsive = setResponsive;
	            FP.destroy = destroy;
	
	            init();
	
	            bindEvents();
	        }
	
	        function init() {
	            //if css3 is not supported, it will use jQuery animations
	            if (options.css3) {
	                options.css3 = support3d();
	            }
	
	            options.scrollBar = options.scrollBar || options.hybrid;
	
	            setOptionsFromDOM();
	            prepareDom();
	            setAllowScrolling(true);
	            setAutoScrolling(options.autoScrolling, 'internal');
	            responsive();
	
	            //setting the class for the body element
	            setBodyClass();
	
	            if (document.readyState === 'complete') {
	                scrollToAnchor();
	            }
	            $window.on('load', scrollToAnchor);
	        }
	
	        function bindEvents() {
	            $window
	            //when scrolling...
	            .on('scroll', scrollHandler)
	
	            //detecting any change on the URL to scroll to the given anchor link
	            //(a way to detect back history button as we play with the hashes on the URL)
	            .on('hashchange', hashChangeHandler)
	
	            //when opening a new tab (ctrl + t), `control` won't be pressed when coming back.
	            .blur(blurHandler)
	
	            //when resizing the site, we adjust the heights of the sections, slimScroll...
	            .resize(resizeHandler);
	
	            $document
	            //Sliding with arrow keys, both, vertical and horizontal
	            .keydown(keydownHandler)
	
	            //to prevent scrolling while zooming
	            .keyup(keyUpHandler)
	
	            //Scrolls to the section when clicking the navigation bullet
	            .on('click touchstart', SECTION_NAV_SEL + ' a', sectionBulletHandler)
	
	            //Scrolls the slider to the given slide destination for the given section
	            .on('click touchstart', SLIDES_NAV_LINK_SEL, slideBulletHandler).on('click', SECTION_NAV_TOOLTIP_SEL, tooltipTextHandler);
	
	            //Scrolling horizontally when clicking on the slider controls.
	            $(SECTION_SEL).on('click touchstart', SLIDES_ARROW_SEL, slideArrowHandler);
	
	            /**
	            * Applying normalScroll elements.
	            * Ignoring the scrolls over the specified selectors.
	            */
	            if (options.normalScrollElements) {
	                $document.on('mouseenter', options.normalScrollElements, function () {
	                    setMouseWheelScrolling(false);
	                });
	
	                $document.on('mouseleave', options.normalScrollElements, function () {
	                    setMouseWheelScrolling(true);
	                });
	            }
	        }
	
	        /**
	        * Setting options from DOM elements if they are not provided.
	        */
	        function setOptionsFromDOM() {
	            var sections = container.find(options.sectionSelector);
	
	            //no anchors option? Checking for them in the DOM attributes
	            if (!options.anchors.length) {
	                options.anchors = sections.filter('[data-anchor]').map(function () {
	                    return $(this).data('anchor').toString();
	                }).get();
	            }
	
	            //no tooltips option? Checking for them in the DOM attributes
	            if (!options.navigationTooltips.length) {
	                options.navigationTooltips = sections.filter('[data-tooltip]').map(function () {
	                    return $(this).data('tooltip').toString();
	                }).get();
	            }
	        }
	
	        /**
	        * Works over the DOM structure to set it up for the current fullpage options.
	        */
	        function prepareDom() {
	            container.css({
	                'height': '100%',
	                'position': 'relative'
	            });
	
	            //adding a class to recognize the container internally in the code
	            container.addClass(WRAPPER);
	            $('html').addClass(ENABLED);
	
	            //due to https://github.com/alvarotrigo/fullPage.js/issues/1502
	            windowsHeight = $window.height();
	
	            container.removeClass(DESTROYED); //in case it was destroyed before initializing it again
	
	            addInternalSelectors();
	
	            //styling the sections / slides / menu
	            $(SECTION_SEL).each(function (index) {
	                var section = $(this);
	                var slides = section.find(SLIDE_SEL);
	                var numSlides = slides.length;
	
	                styleSection(section, index);
	                styleMenu(section, index);
	
	                // if there's any slide
	                if (numSlides > 0) {
	                    styleSlides(section, slides, numSlides);
	                } else {
	                    if (options.verticalCentered) {
	                        addTableClass(section);
	                    }
	                }
	            });
	
	            //fixed elements need to be moved out of the plugin container due to problems with CSS3.
	            if (options.fixedElements && options.css3) {
	                $(options.fixedElements).appendTo($body);
	            }
	
	            //vertical centered of the navigation + active bullet
	            if (options.navigation) {
	                addVerticalNavigation();
	            }
	
	            enableYoutubeAPI();
	
	            if (options.scrollOverflow) {
	                if (document.readyState === 'complete') {
	                    createScrollBarHandler();
	                }
	                //after DOM and images are loaded
	                $window.on('load', createScrollBarHandler);
	            } else {
	                afterRenderActions();
	            }
	        }
	
	        /**
	        * Styles the horizontal slides for a section.
	        */
	        function styleSlides(section, slides, numSlides) {
	            var sliderWidth = numSlides * 100;
	            var slideWidth = 100 / numSlides;
	
	            slides.wrapAll('<div class="' + SLIDES_CONTAINER + '" />');
	            slides.parent().wrap('<div class="' + SLIDES_WRAPPER + '" />');
	
	            section.find(SLIDES_CONTAINER_SEL).css('width', sliderWidth + '%');
	
	            if (numSlides > 1) {
	                if (options.controlArrows) {
	                    createSlideArrows(section);
	                }
	
	                if (options.slidesNavigation) {
	                    addSlidesNavigation(section, numSlides);
	                }
	            }
	
	            slides.each(function (index) {
	                $(this).css('width', slideWidth + '%');
	
	                if (options.verticalCentered) {
	                    addTableClass($(this));
	                }
	            });
	
	            var startingSlide = section.find(SLIDE_ACTIVE_SEL);
	
	            //if the slide won't be an starting point, the default will be the first one
	            //the active section isn't the first one? Is not the first slide of the first section? Then we load that section/slide by default.
	            if (startingSlide.length && ($(SECTION_ACTIVE_SEL).index(SECTION_SEL) !== 0 || $(SECTION_ACTIVE_SEL).index(SECTION_SEL) === 0 && startingSlide.index() !== 0)) {
	                silentLandscapeScroll(startingSlide, 'internal');
	            } else {
	                slides.eq(0).addClass(ACTIVE);
	            }
	        }
	
	        /**
	        * Styling vertical sections
	        */
	        function styleSection(section, index) {
	            //if no active section is defined, the 1st one will be the default one
	            if (!index && $(SECTION_ACTIVE_SEL).length === 0) {
	                section.addClass(ACTIVE);
	            }
	            startingSection = $(SECTION_ACTIVE_SEL);
	
	            section.css('height', windowsHeight + 'px');
	
	            if (options.paddingTop) {
	                section.css('padding-top', options.paddingTop);
	            }
	
	            if (options.paddingBottom) {
	                section.css('padding-bottom', options.paddingBottom);
	            }
	
	            if (typeof options.sectionsColor[index] !== 'undefined') {
	                section.css('background-color', options.sectionsColor[index]);
	            }
	
	            if (typeof options.anchors[index] !== 'undefined') {
	                section.attr('data-anchor', options.anchors[index]);
	            }
	        }
	
	        /**
	        * Sets the data-anchor attributes to the menu elements and activates the current one.
	        */
	        function styleMenu(section, index) {
	            if (typeof options.anchors[index] !== 'undefined') {
	                //activating the menu / nav element on load
	                if (section.hasClass(ACTIVE)) {
	                    activateMenuAndNav(options.anchors[index], index);
	                }
	            }
	
	            //moving the menu outside the main container if it is inside (avoid problems with fixed positions when using CSS3 tranforms)
	            if (options.menu && options.css3 && $(options.menu).closest(WRAPPER_SEL).length) {
	                $(options.menu).appendTo($body);
	            }
	        }
	
	        /**
	        * Adds internal classes to be able to provide customizable selectors
	        * keeping the link with the style sheet.
	        */
	        function addInternalSelectors() {
	            container.find(options.sectionSelector).addClass(SECTION);
	            container.find(options.slideSelector).addClass(SLIDE);
	        }
	
	        /**
	        * Creates the control arrows for the given section
	        */
	        function createSlideArrows(section) {
	            section.find(SLIDES_WRAPPER_SEL).after('<div class="' + SLIDES_ARROW_PREV + '"></div><div class="' + SLIDES_ARROW_NEXT + '"></div>');
	
	            if (options.controlArrowColor != '#fff') {
	                section.find(SLIDES_ARROW_NEXT_SEL).css('border-color', 'transparent transparent transparent ' + options.controlArrowColor);
	                section.find(SLIDES_ARROW_PREV_SEL).css('border-color', 'transparent ' + options.controlArrowColor + ' transparent transparent');
	            }
	
	            if (!options.loopHorizontal) {
	                section.find(SLIDES_ARROW_PREV_SEL).hide();
	            }
	        }
	
	        /**
	        * Creates a vertical navigation bar.
	        */
	        function addVerticalNavigation() {
	            $body.append('<div id="' + SECTION_NAV + '"><ul></ul></div>');
	            var nav = $(SECTION_NAV_SEL);
	
	            nav.addClass(function () {
	                return options.showActiveTooltip ? SHOW_ACTIVE_TOOLTIP + ' ' + options.navigationPosition : options.navigationPosition;
	            });
	
	            for (var i = 0; i < $(SECTION_SEL).length; i++) {
	                var link = '';
	                if (options.anchors.length) {
	                    link = options.anchors[i];
	                }
	
	                var li = '<li><a href="#' + link + '"><span></span></a>';
	
	                // Only add tooltip if needed (defined by user)
	                var tooltip = options.navigationTooltips[i];
	
	                if (typeof tooltip !== 'undefined' && tooltip !== '') {
	                    li += '<div class="' + SECTION_NAV_TOOLTIP + ' ' + options.navigationPosition + '">' + tooltip + '</div>';
	                }
	
	                li += '</li>';
	
	                nav.find('ul').append(li);
	            }
	
	            //centering it vertically
	            $(SECTION_NAV_SEL).css('margin-top', '-' + $(SECTION_NAV_SEL).height() / 2 + 'px');
	
	            //activating the current active section
	            $(SECTION_NAV_SEL).find('li').eq($(SECTION_ACTIVE_SEL).index(SECTION_SEL)).find('a').addClass(ACTIVE);
	        }
	
	        /**
	        * Creates the slim scroll scrollbar for the sections and slides inside them.
	        */
	        function createScrollBarHandler() {
	            $(SECTION_SEL).each(function () {
	                var slides = $(this).find(SLIDE_SEL);
	
	                if (slides.length) {
	                    slides.each(function () {
	                        createScrollBar($(this));
	                    });
	                } else {
	                    createScrollBar($(this));
	                }
	            });
	            afterRenderActions();
	        }
	
	        /*
	        * Enables the Youtube videos API so we can control their flow if necessary.
	        */
	        function enableYoutubeAPI() {
	            container.find('iframe[src*="youtube.com/embed/"]').each(function () {
	                addURLParam($(this), 'enablejsapi=1');
	            });
	        }
	
	        /**
	        * Adds a new parameter and its value to the `src` of a given element
	        */
	        function addURLParam(element, newParam) {
	            var originalSrc = element.attr('src');
	            element.attr('src', originalSrc + getUrlParamSign(originalSrc) + newParam);
	        }
	
	        /*
	        * Returns the prefix sign to use for a new parameter in an existen URL.
	        *
	        * @return {String}  ? | &
	        */
	        function getUrlParamSign(url) {
	            return !/\?/.test(url) ? '?' : '&';
	        }
	
	        /**
	        * Actions and callbacks to fire afterRender
	        */
	        function afterRenderActions() {
	            var section = $(SECTION_ACTIVE_SEL);
	
	            section.addClass(COMPLETELY);
	
	            if (options.scrollOverflowHandler.afterRender) {
	                options.scrollOverflowHandler.afterRender(section);
	            }
	            lazyLoad(section);
	            playMedia(section);
	            options.scrollOverflowHandler.afterLoad();
	
	            if (isDestinyTheStartingSection()) {
	                $.isFunction(options.afterLoad) && options.afterLoad.call(section, section.data('anchor'), section.index(SECTION_SEL) + 1);
	            }
	
	            $.isFunction(options.afterRender) && options.afterRender.call(container);
	        }
	
	        /**
	        * Determines if the URL anchor destiny is the starting section (the one using 'active' class before initialization)
	        */
	        function isDestinyTheStartingSection() {
	            var anchors = window.location.hash.replace('#', '').split('/');
	            var destinationSection = getSectionByAnchor(decodeURIComponent(anchors[0]));
	
	            return !destinationSection.length || destinationSection.length && destinationSection.index() === startingSection.index();
	        }
	
	        var isScrolling = false;
	        var lastScroll = 0;
	
	        //when scrolling...
	        function scrollHandler() {
	            var currentSection;
	
	            if (!options.autoScrolling || options.scrollBar) {
	                var currentScroll = $window.scrollTop();
	                var scrollDirection = getScrollDirection(currentScroll);
	                var visibleSectionIndex = 0;
	                var screen_mid = currentScroll + $window.height() / 2.0;
	                var isAtBottom = $body.height() - $window.height() === currentScroll;
	                var sections = document.querySelectorAll(SECTION_SEL);
	
	                //when using `auto-height` for a small last section it won't be centered in the viewport
	                if (isAtBottom) {
	                    visibleSectionIndex = sections.length - 1;
	                }
	                //is at top? when using `auto-height` for a small first section it won't be centered in the viewport
	                else if (!currentScroll) {
	                        visibleSectionIndex = 0;
	                    }
	
	                    //taking the section which is showing more content in the viewport
	                    else {
	                            for (var i = 0; i < sections.length; ++i) {
	                                var section = sections[i];
	
	                                // Pick the the last section which passes the middle line of the screen.
	                                if (section.offsetTop <= screen_mid) {
	                                    visibleSectionIndex = i;
	                                }
	                            }
	                        }
	
	                if (isCompletelyInViewPort(scrollDirection)) {
	                    if (!$(SECTION_ACTIVE_SEL).hasClass(COMPLETELY)) {
	                        $(SECTION_ACTIVE_SEL).addClass(COMPLETELY).siblings().removeClass(COMPLETELY);
	                    }
	                }
	
	                //geting the last one, the current one on the screen
	                currentSection = $(sections).eq(visibleSectionIndex);
	
	                //setting the visible section as active when manually scrolling
	                //executing only once the first time we reach the section
	                if (!currentSection.hasClass(ACTIVE)) {
	                    isScrolling = true;
	                    var leavingSection = $(SECTION_ACTIVE_SEL);
	                    var leavingSectionIndex = leavingSection.index(SECTION_SEL) + 1;
	                    var yMovement = getYmovement(currentSection);
	                    var anchorLink = currentSection.data('anchor');
	                    var sectionIndex = currentSection.index(SECTION_SEL) + 1;
	                    var activeSlide = currentSection.find(SLIDE_ACTIVE_SEL);
	                    var slideIndex;
	                    var slideAnchorLink;
	
	                    if (activeSlide.length) {
	                        slideAnchorLink = activeSlide.data('anchor');
	                        slideIndex = activeSlide.index();
	                    }
	
	                    if (canScroll) {
	                        currentSection.addClass(ACTIVE).siblings().removeClass(ACTIVE);
	
	                        $.isFunction(options.onLeave) && options.onLeave.call(leavingSection, leavingSectionIndex, sectionIndex, yMovement);
	                        $.isFunction(options.afterLoad) && options.afterLoad.call(currentSection, anchorLink, sectionIndex);
	
	                        stopMedia(leavingSection);
	                        lazyLoad(currentSection);
	                        playMedia(currentSection);
	
	                        activateMenuAndNav(anchorLink, sectionIndex - 1);
	
	                        if (options.anchors.length) {
	                            //needed to enter in hashChange event when using the menu with anchor links
	                            lastScrolledDestiny = anchorLink;
	                        }
	                        setState(slideIndex, slideAnchorLink, anchorLink, sectionIndex);
	                    }
	
	                    //small timeout in order to avoid entering in hashChange event when scrolling is not finished yet
	                    clearTimeout(scrollId);
	                    scrollId = setTimeout(function () {
	                        isScrolling = false;
	                    }, 100);
	                }
	
	                if (options.fitToSection) {
	                    //for the auto adjust of the viewport to fit a whole section
	                    clearTimeout(scrollId2);
	
	                    scrollId2 = setTimeout(function () {
	                        //checking it again in case it changed during the delay
	                        if (options.fitToSection) {
	                            fitToSection();
	                        }
	                    }, options.fitToSectionDelay);
	                }
	            }
	        }
	
	        /**
	        * Fits the site to the nearest active section
	        */
	        function fitToSection() {
	            //checking fitToSection again in case it was set to false before the timeout delay
	            if (canScroll) {
	                //allows to scroll to an active section and
	                //if the section is already active, we prevent firing callbacks
	                isResizing = true;
	
	                scrollPage($(SECTION_ACTIVE_SEL));
	                isResizing = false;
	            }
	        }
	
	        /**
	        * Determines whether the active section has seen in its whole or not.
	        */
	        function isCompletelyInViewPort(movement) {
	            var top = $(SECTION_ACTIVE_SEL).position().top;
	            var bottom = top + $window.height();
	
	            if (movement == 'up') {
	                return bottom >= $window.scrollTop() + $window.height();
	            }
	            return top <= $window.scrollTop();
	        }
	
	        /**
	        * Gets the directon of the the scrolling fired by the scroll event.
	        */
	        function getScrollDirection(currentScroll) {
	            var direction = currentScroll > lastScroll ? 'down' : 'up';
	
	            lastScroll = currentScroll;
	
	            //needed for auto-height sections to determine if we want to scroll to the top or bottom of the destination
	            previousDestTop = currentScroll;
	
	            return direction;
	        }
	
	        /**
	        * Determines the way of scrolling up or down:
	        * by 'automatically' scrolling a section or by using the default and normal scrolling.
	        */
	        function scrolling(type, scrollable) {
	            if (!isScrollAllowed.m[type]) {
	                return;
	            }
	            var check = type === 'down' ? 'bottom' : 'top';
	            var scrollSection = type === 'down' ? moveSectionDown : moveSectionUp;
	
	            if (scrollable.length > 0) {
	                //is the scrollbar at the start/end of the scroll?
	                if (options.scrollOverflowHandler.isScrolled(check, scrollable)) {
	                    scrollSection();
	                } else {
	                    return true;
	                }
	            } else {
	                // moved up/down
	                scrollSection();
	            }
	        }
	
	        /*
	        * Preventing bouncing in iOS #2285
	        */
	        function preventBouncing(event) {
	            var e = event.originalEvent;
	            if (!checkParentForNormalScrollElement(event.target) && options.autoScrolling && isReallyTouch(e)) {
	                //preventing the easing on iOS devices
	                event.preventDefault();
	            }
	        }
	
	        var touchStartY = 0;
	        var touchStartX = 0;
	        var touchEndY = 0;
	        var touchEndX = 0;
	
	        /* Detecting touch events
	         * As we are changing the top property of the page on scrolling, we can not use the traditional way to detect it.
	        * This way, the touchstart and the touch moves shows an small difference between them which is the
	        * used one to determine the direction.
	        */
	        function touchMoveHandler(event) {
	            var e = event.originalEvent;
	            var activeSection = $(e.target).closest(SECTION_SEL);
	
	            // additional: if one of the normalScrollElements isn't within options.normalScrollElementTouchThreshold hops up the DOM chain
	            if (!checkParentForNormalScrollElement(event.target) && isReallyTouch(e)) {
	
	                if (options.autoScrolling) {
	                    //preventing the easing on iOS devices
	                    event.preventDefault();
	                }
	
	                var scrollable = options.scrollOverflowHandler.scrollable(activeSection);
	                var touchEvents = getEventsPage(e);
	
	                touchEndY = touchEvents.y;
	                touchEndX = touchEvents.x;
	
	                //if movement in the X axys is greater than in the Y and the currect section has slides...
	                if (activeSection.find(SLIDES_WRAPPER_SEL).length && Math.abs(touchStartX - touchEndX) > Math.abs(touchStartY - touchEndY)) {
	
	                    //is the movement greater than the minimum resistance to scroll?
	                    if (!slideMoving && Math.abs(touchStartX - touchEndX) > $window.outerWidth() / 100 * options.touchSensitivity) {
	                        if (touchStartX > touchEndX) {
	                            if (isScrollAllowed.m.right) {
	                                moveSlideRight(activeSection); //next
	                            }
	                        } else {
	                            if (isScrollAllowed.m.left) {
	                                moveSlideLeft(activeSection); //prev
	                            }
	                        }
	                    }
	                }
	
	                //vertical scrolling (only when autoScrolling is enabled)
	                else if (options.autoScrolling && canScroll) {
	
	                        //is the movement greater than the minimum resistance to scroll?
	                        if (Math.abs(touchStartY - touchEndY) > $window.height() / 100 * options.touchSensitivity) {
	                            if (touchStartY > touchEndY) {
	                                scrolling('down', scrollable);
	                            } else if (touchEndY > touchStartY) {
	                                scrolling('up', scrollable);
	                            }
	                        }
	                    }
	            }
	        }
	
	        /**
	         * recursive function to loop up the parent nodes to check if one of them exists in options.normalScrollElements
	         * Currently works well for iOS - Android might need some testing
	         * @param  {Element} el  target element / jquery selector (in subsequent nodes)
	         * @param  {int}     hop current hop compared to options.normalScrollElementTouchThreshold
	         * @return {boolean} true if there is a match to options.normalScrollElements
	         */
	        function checkParentForNormalScrollElement(el, hop) {
	            hop = hop || 0;
	            var parent = $(el).parent();
	
	            if (hop < options.normalScrollElementTouchThreshold && parent.is(options.normalScrollElements)) {
	                return true;
	            } else if (hop == options.normalScrollElementTouchThreshold) {
	                return false;
	            } else {
	                return checkParentForNormalScrollElement(parent, ++hop);
	            }
	        }
	
	        /**
	        * As IE >= 10 fires both touch and mouse events when using a mouse in a touchscreen
	        * this way we make sure that is really a touch event what IE is detecting.
	        */
	        function isReallyTouch(e) {
	            //if is not IE   ||  IE is detecting `touch` or `pen`
	            return typeof e.pointerType === 'undefined' || e.pointerType != 'mouse';
	        }
	
	        /**
	        * Handler for the touch start event.
	        */
	        function touchStartHandler(event) {
	            var e = event.originalEvent;
	
	            //stopping the auto scroll to adjust to a section
	            if (options.fitToSection) {
	                $htmlBody.stop();
	            }
	
	            if (isReallyTouch(e)) {
	                var touchEvents = getEventsPage(e);
	                touchStartY = touchEvents.y;
	                touchStartX = touchEvents.x;
	            }
	        }
	
	        /**
	        * Gets the average of the last `number` elements of the given array.
	        */
	        function getAverage(elements, number) {
	            var sum = 0;
	
	            //taking `number` elements from the end to make the average, if there are not enought, 1
	            var lastElements = elements.slice(Math.max(elements.length - number, 1));
	
	            for (var i = 0; i < lastElements.length; i++) {
	                sum = sum + lastElements[i];
	            }
	
	            return Math.ceil(sum / number);
	        }
	
	        /**
	         * Detecting mousewheel scrolling
	         *
	         * http://blogs.sitepointstatic.com/examples/tech/mouse-wheel/index.html
	         * http://www.sitepoint.com/html5-javascript-mouse-wheel/
	         */
	        var prevTime = new Date().getTime();
	
	        function MouseWheelHandler(e) {
	            var curTime = new Date().getTime();
	            var isNormalScroll = $(COMPLETELY_SEL).hasClass(NORMAL_SCROLL);
	
	            //autoscrolling and not zooming?
	            if (options.autoScrolling && !controlPressed && !isNormalScroll) {
	                // cross-browser wheel delta
	                e = e || window.event;
	                var value = e.wheelDelta || -e.deltaY || -e.detail;
	                var delta = Math.max(-1, Math.min(1, value));
	
	                var horizontalDetection = typeof e.wheelDeltaX !== 'undefined' || typeof e.deltaX !== 'undefined';
	                var isScrollingVertically = Math.abs(e.wheelDeltaX) < Math.abs(e.wheelDelta) || Math.abs(e.deltaX) < Math.abs(e.deltaY) || !horizontalDetection;
	
	                //Limiting the array to 150 (lets not waste memory!)
	                if (scrollings.length > 149) {
	                    scrollings.shift();
	                }
	
	                //keeping record of the previous scrollings
	                scrollings.push(Math.abs(value));
	
	                //preventing to scroll the site on mouse wheel when scrollbar is present
	                if (options.scrollBar) {
	                    e.preventDefault ? e.preventDefault() : e.returnValue = false;
	                }
	
	                var activeSection = $(SECTION_ACTIVE_SEL);
	                var scrollable = options.scrollOverflowHandler.scrollable(activeSection);
	
	                //time difference between the last scroll and the current one
	                var timeDiff = curTime - prevTime;
	                prevTime = curTime;
	
	                //haven't they scrolled in a while?
	                //(enough to be consider a different scrolling action to scroll another section)
	                if (timeDiff > 200) {
	                    //emptying the array, we dont care about old scrollings for our averages
	                    scrollings = [];
	                }
	
	                if (canScroll) {
	                    var averageEnd = getAverage(scrollings, 10);
	                    var averageMiddle = getAverage(scrollings, 70);
	                    var isAccelerating = averageEnd >= averageMiddle;
	
	                    //to avoid double swipes...
	                    if (isAccelerating && isScrollingVertically) {
	                        //scrolling down?
	                        if (delta < 0) {
	                            scrolling('down', scrollable);
	
	                            //scrolling up?
	                        } else {
	                            scrolling('up', scrollable);
	                        }
	                    }
	                }
	
	                return false;
	            }
	
	            if (options.fitToSection) {
	                //stopping the auto scroll to adjust to a section
	                $htmlBody.stop();
	            }
	        }
	
	        /**
	        * Slides a slider to the given direction.
	        * Optional `section` param.
	        */
	        function moveSlide(direction, section) {
	            var activeSection = typeof section === 'undefined' ? $(SECTION_ACTIVE_SEL) : section;
	            var slides = activeSection.find(SLIDES_WRAPPER_SEL);
	            var numSlides = slides.find(SLIDE_SEL).length;
	
	            // more than one slide needed and nothing should be sliding
	            if (!slides.length || slideMoving || numSlides < 2) {
	                return;
	            }
	
	            var currentSlide = slides.find(SLIDE_ACTIVE_SEL);
	            var destiny = null;
	
	            if (direction === 'left') {
	                destiny = currentSlide.prev(SLIDE_SEL);
	            } else {
	                destiny = currentSlide.next(SLIDE_SEL);
	            }
	
	            //isn't there a next slide in the secuence?
	            if (!destiny.length) {
	                //respect loopHorizontal settin
	                if (!options.loopHorizontal) return;
	
	                if (direction === 'left') {
	                    destiny = currentSlide.siblings(':last');
	                } else {
	                    destiny = currentSlide.siblings(':first');
	                }
	            }
	
	            slideMoving = true;
	
	            landscapeScroll(slides, destiny, direction);
	        }
	
	        /**
	        * Maintains the active slides in the viewport
	        * (Because the `scroll` animation might get lost with some actions, such as when using continuousVertical)
	        */
	        function keepSlidesPosition() {
	            $(SLIDE_ACTIVE_SEL).each(function () {
	                silentLandscapeScroll($(this), 'internal');
	            });
	        }
	
	        var previousDestTop = 0;
	        /**
	        * Returns the destination Y position based on the scrolling direction and
	        * the height of the section.
	        */
	        function getDestinationPosition(element) {
	            var elemPosition = element.position();
	
	            //top of the desination will be at the top of the viewport
	            var position = elemPosition.top;
	            var isScrollingDown = elemPosition.top > previousDestTop;
	            var sectionBottom = position - windowsHeight + element.outerHeight();
	            var bigSectionsDestination = options.bigSectionsDestination;
	
	            //is the destination element bigger than the viewport?
	            if (element.outerHeight() > windowsHeight) {
	                //scrolling up?
	                if (!isScrollingDown && !bigSectionsDestination || bigSectionsDestination === 'bottom') {
	                    position = sectionBottom;
	                }
	            }
	
	            //sections equal or smaller than the viewport height && scrolling down? ||  is resizing and its in the last section
	            else if (isScrollingDown || isResizing && element.is(':last-child')) {
	                    //The bottom of the destination will be at the bottom of the viewport
	                    position = sectionBottom;
	                }
	
	            /*
	            Keeping record of the last scrolled position to determine the scrolling direction.
	            No conventional methods can be used as the scroll bar might not be present
	            AND the section might not be active if it is auto-height and didnt reach the middle
	            of the viewport.
	            */
	            previousDestTop = position;
	            return position;
	        }
	
	        /**
	        * Scrolls the site to the given element and scrolls to the slide if a callback is given.
	        */
	        function scrollPage(element, callback, isMovementUp) {
	            if (typeof element === 'undefined') {
	                return;
	            } //there's no element to scroll, leaving the function
	
	            var dtop = getDestinationPosition(element);
	            var slideAnchorLink;
	            var slideIndex;
	
	            //local variables
	            var v = {
	                element: element,
	                callback: callback,
	                isMovementUp: isMovementUp,
	                dtop: dtop,
	                yMovement: getYmovement(element),
	                anchorLink: element.data('anchor'),
	                sectionIndex: element.index(SECTION_SEL),
	                activeSlide: element.find(SLIDE_ACTIVE_SEL),
	                activeSection: $(SECTION_ACTIVE_SEL),
	                leavingSection: $(SECTION_ACTIVE_SEL).index(SECTION_SEL) + 1,
	
	                //caching the value of isResizing at the momment the function is called
	                //because it will be checked later inside a setTimeout and the value might change
	                localIsResizing: isResizing
	            };
	
	            //quiting when destination scroll is the same as the current one
	            if (v.activeSection.is(element) && !isResizing || options.scrollBar && $window.scrollTop() === v.dtop && !element.hasClass(AUTO_HEIGHT)) {
	                return;
	            }
	
	            if (v.activeSlide.length) {
	                slideAnchorLink = v.activeSlide.data('anchor');
	                slideIndex = v.activeSlide.index();
	            }
	
	            // If continuousVertical && we need to wrap around
	            if (options.autoScrolling && options.continuousVertical && typeof v.isMovementUp !== "undefined" && (!v.isMovementUp && v.yMovement == 'up' || // Intending to scroll down but about to go up or
	            v.isMovementUp && v.yMovement == 'down')) {
	                // intending to scroll up but about to go down
	
	                v = createInfiniteSections(v);
	            }
	
	            //callback (onLeave) if the site is not just resizing and readjusting the slides
	            if ($.isFunction(options.onLeave) && !v.localIsResizing) {
	                if (options.onLeave.call(v.activeSection, v.leavingSection, v.sectionIndex + 1, v.yMovement) === false) {
	                    return;
	                }
	            }
	
	            //pausing media of the leaving section (if we are not just resizing, as destinatino will be the same one)
	            if (!v.localIsResizing) {
	                stopMedia(v.activeSection);
	            }
	
	            options.scrollOverflowHandler.beforeLeave();
	            element.addClass(ACTIVE).siblings().removeClass(ACTIVE);
	            lazyLoad(element);
	            options.scrollOverflowHandler.onLeave();
	
	            //preventing from activating the MouseWheelHandler event
	            //more than once if the page is scrolling
	            canScroll = false;
	
	            setState(slideIndex, slideAnchorLink, v.anchorLink, v.sectionIndex);
	
	            performMovement(v);
	
	            //flag to avoid callingn `scrollPage()` twice in case of using anchor links
	            lastScrolledDestiny = v.anchorLink;
	
	            //avoid firing it twice (as it does also on scroll)
	            activateMenuAndNav(v.anchorLink, v.sectionIndex);
	        }
	
	        /**
	        * Performs the vertical movement (by CSS3 or by jQuery)
	        */
	        function performMovement(v) {
	            // using CSS3 translate functionality
	            if (options.css3 && options.autoScrolling && !options.scrollBar) {
	
	                // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625
	                // that's why we round it to 0.
	                var translate3d = 'translate3d(0px, -' + Math.round(v.dtop) + 'px, 0px)';
	                transformContainer(translate3d, true);
	
	                //even when the scrollingSpeed is 0 there's a little delay, which might cause the
	                //scrollingSpeed to change in case of using silentMoveTo();
	                if (options.scrollingSpeed) {
	                    clearTimeout(afterSectionLoadsId);
	                    afterSectionLoadsId = setTimeout(function () {
	                        afterSectionLoads(v);
	                    }, options.scrollingSpeed);
	                } else {
	                    afterSectionLoads(v);
	                }
	            }
	
	            // using jQuery animate
	            else {
	                    var scrollSettings = getScrollSettings(v);
	
	                    $(scrollSettings.element).animate(scrollSettings.options, options.scrollingSpeed, options.easing).promise().done(function () {
	                        //only one single callback in case of animating  `html, body`
	                        if (options.scrollBar) {
	
	                            /* Hack!
	                            The timeout prevents setting the most dominant section in the viewport as "active" when the user
	                            scrolled to a smaller section by using the mousewheel (auto scrolling) rather than draging the scroll bar.
	                             When using scrollBar:true It seems like the scroll events still getting propagated even after the scrolling animation has finished.
	                            */
	                            setTimeout(function () {
	                                afterSectionLoads(v);
	                            }, 30);
	                        } else {
	                            afterSectionLoads(v);
	                        }
	                    });
	                }
	        }
	
	        /**
	        * Gets the scrolling settings depending on the plugin autoScrolling option
	        */
	        function getScrollSettings(v) {
	            var scroll = {};
	
	            if (options.autoScrolling && !options.scrollBar) {
	                scroll.options = { 'top': -v.dtop };
	                scroll.element = WRAPPER_SEL;
	            } else {
	                scroll.options = { 'scrollTop': v.dtop };
	                scroll.element = 'html, body';
	            }
	
	            return scroll;
	        }
	
	        /**
	        * Adds sections before or after the current one to create the infinite effect.
	        */
	        function createInfiniteSections(v) {
	            // Scrolling down
	            if (!v.isMovementUp) {
	                // Move all previous sections to after the active section
	                $(SECTION_ACTIVE_SEL).after(v.activeSection.prevAll(SECTION_SEL).get().reverse());
	            } else {
	                // Scrolling up
	                // Move all next sections to before the active section
	                $(SECTION_ACTIVE_SEL).before(v.activeSection.nextAll(SECTION_SEL));
	            }
	
	            // Maintain the displayed position (now that we changed the element order)
	            silentScroll($(SECTION_ACTIVE_SEL).position().top);
	
	            // Maintain the active slides visible in the viewport
	            keepSlidesPosition();
	
	            // save for later the elements that still need to be reordered
	            v.wrapAroundElements = v.activeSection;
	
	            // Recalculate animation variables
	            v.dtop = v.element.position().top;
	            v.yMovement = getYmovement(v.element);
	
	            return v;
	        }
	
	        /**
	        * Fix section order after continuousVertical changes have been animated
	        */
	        function continuousVerticalFixSectionOrder(v) {
	            // If continuousVertical is in effect (and autoScrolling would also be in effect then),
	            // finish moving the elements around so the direct navigation will function more simply
	            if (!v.wrapAroundElements || !v.wrapAroundElements.length) {
	                return;
	            }
	
	            if (v.isMovementUp) {
	                $(SECTION_FIRST_SEL).before(v.wrapAroundElements);
	            } else {
	                $(SECTION_LAST_SEL).after(v.wrapAroundElements);
	            }
	
	            silentScroll($(SECTION_ACTIVE_SEL).position().top);
	
	            // Maintain the active slides visible in the viewport
	            keepSlidesPosition();
	        }
	
	        /**
	        * Actions to do once the section is loaded.
	        */
	        function afterSectionLoads(v) {
	            continuousVerticalFixSectionOrder(v);
	
	            //callback (afterLoad) if the site is not just resizing and readjusting the slides
	            $.isFunction(options.afterLoad) && !v.localIsResizing && options.afterLoad.call(v.element, v.anchorLink, v.sectionIndex + 1);
	            options.scrollOverflowHandler.afterLoad();
	
	            if (!v.localIsResizing) {
	                playMedia(v.element);
	            }
	
	            v.element.addClass(COMPLETELY).siblings().removeClass(COMPLETELY);
	
	            canScroll = true;
	
	            $.isFunction(v.callback) && v.callback.call(this);
	        }
	
	        /**
	        * Sets the value for the given attribute from the `data-` attribute with the same suffix
	        * ie: data-srcset ==> srcset  |  data-src ==> src
	        */
	        function setSrc(element, attribute) {
	            element.attr(attribute, element.data(attribute)).removeAttr('data-' + attribute);
	        }
	
	        /**
	        * Lazy loads image, video and audio elements.
	        */
	        function lazyLoad(destiny) {
	            if (!options.lazyLoading) {
	                return;
	            }
	
	            var panel = getSlideOrSection(destiny);
	            var element;
	
	            panel.find('img[data-src], img[data-srcset], source[data-src], audio[data-src], iframe[data-src]').each(function () {
	                element = $(this);
	
	                $.each(['src', 'srcset'], function (index, type) {
	                    var attribute = element.attr('data-' + type);
	                    if (typeof attribute !== 'undefined' && attribute) {
	                        setSrc(element, type);
	                    }
	                });
	
	                if (element.is('source')) {
	                    element.closest('video').get(0).load();
	                }
	            });
	        }
	
	        /**
	        * Plays video and audio elements.
	        */
	        function playMedia(destiny) {
	            var panel = getSlideOrSection(destiny);
	
	            //playing HTML5 media elements
	            panel.find('video, audio').each(function () {
	                var element = $(this).get(0);
	
	                if (element.hasAttribute('data-autoplay') && typeof element.play === 'function') {
	                    element.play();
	                }
	            });
	
	            //youtube videos
	            panel.find('iframe[src*="youtube.com/embed/"]').each(function () {
	                var element = $(this).get(0);
	
	                if (element.hasAttribute('data-autoplay')) {
	                    playYoutube(element);
	                }
	
	                //in case the URL was not loaded yet. On page load we need time for the new URL (with the API string) to load.
	                element.onload = function () {
	                    if (element.hasAttribute('data-autoplay')) {
	                        playYoutube(element);
	                    }
	                };
	            });
	        }
	
	        /**
	        * Plays a youtube video
	        */
	        function playYoutube(element) {
	            element.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
	        }
	
	        /**
	        * Stops video and audio elements.
	        */
	        function stopMedia(destiny) {
	            var panel = getSlideOrSection(destiny);
	
	            //stopping HTML5 media elements
	            panel.find('video, audio').each(function () {
	                var element = $(this).get(0);
	
	                if (!element.hasAttribute('data-keepplaying') && typeof element.pause === 'function') {
	                    element.pause();
	                }
	            });
	
	            //youtube videos
	            panel.find('iframe[src*="youtube.com/embed/"]').each(function () {
	                var element = $(this).get(0);
	
	                if (/youtube\.com\/embed\//.test($(this).attr('src')) && !element.hasAttribute('data-keepplaying')) {
	                    $(this).get(0).contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
	                }
	            });
	        }
	
	        /**
	        * Gets the active slide (or section) for the given section
	        */
	        function getSlideOrSection(destiny) {
	            var slide = destiny.find(SLIDE_ACTIVE_SEL);
	            if (slide.length) {
	                destiny = $(slide);
	            }
	
	            return destiny;
	        }
	
	        /**
	        * Scrolls to the anchor in the URL when loading the site
	        */
	        function scrollToAnchor() {
	            //getting the anchor link in the URL and deleting the `#`
	            var value = window.location.hash.replace('#', '').split('/');
	            var sectionAnchor = decodeURIComponent(value[0]);
	            var slideAnchor = decodeURIComponent(value[1]);
	
	            if (sectionAnchor) {
	                //if theres any #
	                if (options.animateAnchor) {
	                    scrollPageAndSlide(sectionAnchor, slideAnchor);
	                } else {
	                    silentMoveTo(sectionAnchor, slideAnchor);
	                }
	            }
	        }
	
	        /**
	        * Detecting any change on the URL to scroll to the given anchor link
	        * (a way to detect back history button as we play with the hashes on the URL)
	        */
	        function hashChangeHandler() {
	            if (!isScrolling && !options.lockAnchors) {
	                var value = window.location.hash.replace('#', '').split('/');
	                var sectionAnchor = decodeURIComponent(value[0]);
	                var slideAnchor = decodeURIComponent(value[1]);
	
	                //when moving to a slide in the first section for the first time (first time to add an anchor to the URL)
	                var isFirstSlideMove = typeof lastScrolledDestiny === 'undefined';
	                var isFirstScrollMove = typeof lastScrolledDestiny === 'undefined' && typeof slideAnchor === 'undefined' && !slideMoving;
	
	                if (sectionAnchor.length) {
	                    /*in order to call scrollpage() only once for each destination at a time
	                    It is called twice for each scroll otherwise, as in case of using anchorlinks `hashChange`
	                    event is fired on every scroll too.*/
	                    if (sectionAnchor && sectionAnchor !== lastScrolledDestiny && !isFirstSlideMove || isFirstScrollMove || !slideMoving && lastScrolledSlide != slideAnchor) {
	                        scrollPageAndSlide(sectionAnchor, slideAnchor);
	                    }
	                }
	            }
	        }
	
	        //Sliding with arrow keys, both, vertical and horizontal
	        function keydownHandler(e) {
	
	            clearTimeout(keydownId);
	
	            var activeElement = $(':focus');
	
	            if (!activeElement.is('textarea') && !activeElement.is('input') && !activeElement.is('select') && activeElement.attr('contentEditable') !== "true" && activeElement.attr('contentEditable') !== '' && options.keyboardScrolling && options.autoScrolling) {
	                var keyCode = e.which;
	
	                //preventing the scroll with arrow keys & spacebar & Page Up & Down keys
	                var keyControls = [40, 38, 32, 33, 34];
	                if ($.inArray(keyCode, keyControls) > -1) {
	                    e.preventDefault();
	                }
	
	                controlPressed = e.ctrlKey;
	
	                keydownId = setTimeout(function () {
	                    onkeydown(e);
	                }, 150);
	            }
	        }
	
	        function tooltipTextHandler() {
	            $(this).prev().trigger('click');
	        }
	
	        //to prevent scrolling while zooming
	        function keyUpHandler(e) {
	            if (isWindowFocused) {
	                //the keyup gets fired on new tab ctrl + t in Firefox
	                controlPressed = e.ctrlKey;
	            }
	        }
	
	        //binding the mousemove when the mouse's middle button is released
	        function mouseDownHandler(e) {
	            //middle button
	            if (e.which == 2) {
	                oldPageY = e.pageY;
	                container.on('mousemove', mouseMoveHandler);
	            }
	        }
	
	        //unbinding the mousemove when the mouse's middle button is released
	        function mouseUpHandler(e) {
	            //middle button
	            if (e.which == 2) {
	                container.off('mousemove');
	            }
	        }
	
	        //Scrolling horizontally when clicking on the slider controls.
	        function slideArrowHandler() {
	            var section = $(this).closest(SECTION_SEL);
	
	            if ($(this).hasClass(SLIDES_PREV)) {
	                if (isScrollAllowed.m.left) {
	                    moveSlideLeft(section);
	                }
	            } else {
	                if (isScrollAllowed.m.right) {
	                    moveSlideRight(section);
	                }
	            }
	        }
	
	        //when opening a new tab (ctrl + t), `control` won't be pressed when coming back.
	        function blurHandler() {
	            isWindowFocused = false;
	            controlPressed = false;
	        }
	
	        //Scrolls to the section when clicking the navigation bullet
	        function sectionBulletHandler(e) {
	            e.preventDefault();
	            var index = $(this).parent().index();
	            scrollPage($(SECTION_SEL).eq(index));
	        }
	
	        //Scrolls the slider to the given slide destination for the given section
	        function slideBulletHandler(e) {
	            e.preventDefault();
	            var slides = $(this).closest(SECTION_SEL).find(SLIDES_WRAPPER_SEL);
	            var destiny = slides.find(SLIDE_SEL).eq($(this).closest('li').index());
	
	            landscapeScroll(slides, destiny);
	        }
	
	        /**
	        * Keydown event
	        */
	        function onkeydown(e) {
	            var shiftPressed = e.shiftKey;
	
	            //do nothing if we can not scroll or we are not using horizotnal key arrows.
	            if (!canScroll && [37, 39].indexOf(e.which) < 0) {
	                return;
	            }
	
	            switch (e.which) {
	                //up
	                case 38:
	                case 33:
	                    if (isScrollAllowed.k.up) {
	                        moveSectionUp();
	                    }
	                    break;
	
	                //down
	                case 32:
	                    //spacebar
	                    if (shiftPressed && isScrollAllowed.k.up) {
	                        moveSectionUp();
	                        break;
	                    }
	                /* falls through */
	                case 40:
	                case 34:
	                    if (isScrollAllowed.k.down) {
	                        moveSectionDown();
	                    }
	                    break;
	
	                //Home
	                case 36:
	                    if (isScrollAllowed.k.up) {
	                        moveTo(1);
	                    }
	                    break;
	
	                //End
	                case 35:
	                    if (isScrollAllowed.k.down) {
	                        moveTo($(SECTION_SEL).length);
	                    }
	                    break;
	
	                //left
	                case 37:
	                    if (isScrollAllowed.k.left) {
	                        moveSlideLeft();
	                    }
	                    break;
	
	                //right
	                case 39:
	                    if (isScrollAllowed.k.right) {
	                        moveSlideRight();
	                    }
	                    break;
	
	                default:
	                    return; // exit this handler for other keys
	            }
	        }
	
	        /**
	        * Detecting the direction of the mouse movement.
	        * Used only for the middle button of the mouse.
	        */
	        var oldPageY = 0;
	        function mouseMoveHandler(e) {
	            if (canScroll) {
	                // moving up
	                if (e.pageY < oldPageY && isScrollAllowed.m.up) {
	                    moveSectionUp();
	                }
	
	                // moving down
	                else if (e.pageY > oldPageY && isScrollAllowed.m.down) {
	                        moveSectionDown();
	                    }
	            }
	            oldPageY = e.pageY;
	        }
	
	        /**
	        * Scrolls horizontal sliders.
	        */
	        function landscapeScroll(slides, destiny, direction) {
	            var section = slides.closest(SECTION_SEL);
	            var v = {
	                slides: slides,
	                destiny: destiny,
	                direction: direction,
	                destinyPos: destiny.position(),
	                slideIndex: destiny.index(),
	                section: section,
	                sectionIndex: section.index(SECTION_SEL),
	                anchorLink: section.data('anchor'),
	                slidesNav: section.find(SLIDES_NAV_SEL),
	                slideAnchor: getAnchor(destiny),
	                prevSlide: section.find(SLIDE_ACTIVE_SEL),
	                prevSlideIndex: section.find(SLIDE_ACTIVE_SEL).index(),
	
	                //caching the value of isResizing at the momment the function is called
	                //because it will be checked later inside a setTimeout and the value might change
	                localIsResizing: isResizing
	            };
	            v.xMovement = getXmovement(v.prevSlideIndex, v.slideIndex);
	
	            //important!! Only do it when not resizing
	            if (!v.localIsResizing) {
	                //preventing from scrolling to the next/prev section when using scrollHorizontally
	                canScroll = false;
	            }
	
	            if (options.onSlideLeave) {
	
	                //if the site is not just resizing and readjusting the slides
	                if (!v.localIsResizing && v.xMovement !== 'none') {
	                    if ($.isFunction(options.onSlideLeave)) {
	                        if (options.onSlideLeave.call(v.prevSlide, v.anchorLink, v.sectionIndex + 1, v.prevSlideIndex, v.xMovement, v.slideIndex) === false) {
	                            slideMoving = false;
	                            return;
	                        }
	                    }
	                }
	            }
	
	            destiny.addClass(ACTIVE).siblings().removeClass(ACTIVE);
	
	            if (!v.localIsResizing) {
	                stopMedia(v.prevSlide);
	                lazyLoad(destiny);
	            }
	
	            if (!options.loopHorizontal && options.controlArrows) {
	                //hidding it for the fist slide, showing for the rest
	                section.find(SLIDES_ARROW_PREV_SEL).toggle(v.slideIndex !== 0);
	
	                //hidding it for the last slide, showing for the rest
	                section.find(SLIDES_ARROW_NEXT_SEL).toggle(!destiny.is(':last-child'));
	            }
	
	            //only changing the URL if the slides are in the current section (not for resize re-adjusting)
	            if (section.hasClass(ACTIVE) && !v.localIsResizing) {
	                setState(v.slideIndex, v.slideAnchor, v.anchorLink, v.sectionIndex);
	            }
	
	            performHorizontalMove(slides, v, true);
	        }
	
	        function afterSlideLoads(v) {
	            activeSlidesNavigation(v.slidesNav, v.slideIndex);
	
	            //if the site is not just resizing and readjusting the slides
	            if (!v.localIsResizing) {
	                $.isFunction(options.afterSlideLoad) && options.afterSlideLoad.call(v.destiny, v.anchorLink, v.sectionIndex + 1, v.slideAnchor, v.slideIndex);
	
	                //needs to be inside the condition to prevent problems with continuousVertical and scrollHorizontally
	                //and to prevent double scroll right after a windows resize
	                canScroll = true;
	
	                playMedia(v.destiny);
	            }
	
	            //letting them slide again
	            slideMoving = false;
	        }
	
	        /**
	        * Performs the horizontal movement. (CSS3 or jQuery)
	        *
	        * @param fireCallback {Bool} - determines whether or not to fire the callback
	        */
	        function performHorizontalMove(slides, v, fireCallback) {
	            var destinyPos = v.destinyPos;
	
	            if (options.css3) {
	                var translate3d = 'translate3d(-' + Math.round(destinyPos.left) + 'px, 0px, 0px)';
	
	                addAnimation(slides.find(SLIDES_CONTAINER_SEL)).css(getTransforms(translate3d));
	
	                afterSlideLoadsId = setTimeout(function () {
	                    fireCallback && afterSlideLoads(v);
	                }, options.scrollingSpeed, options.easing);
	            } else {
	                slides.animate({
	                    scrollLeft: Math.round(destinyPos.left)
	                }, options.scrollingSpeed, options.easing, function () {
	
	                    fireCallback && afterSlideLoads(v);
	                });
	            }
	        }
	
	        /**
	        * Sets the state for the horizontal bullet navigations.
	        */
	        function activeSlidesNavigation(slidesNav, slideIndex) {
	            slidesNav.find(ACTIVE_SEL).removeClass(ACTIVE);
	            slidesNav.find('li').eq(slideIndex).find('a').addClass(ACTIVE);
	        }
	
	        var previousHeight = windowsHeight;
	
	        //when resizing the site, we adjust the heights of the sections, slimScroll...
	        function resizeHandler() {
	            //checking if it needs to get responsive
	            responsive();
	
	            // rebuild immediately on touch devices
	            if (isTouchDevice) {
	                var activeElement = $(document.activeElement);
	
	                //if the keyboard is NOT visible
	                if (!activeElement.is('textarea') && !activeElement.is('input') && !activeElement.is('select')) {
	                    var currentHeight = $window.height();
	
	                    //making sure the change in the viewport size is enough to force a rebuild. (20 % of the window to avoid problems when hidding scroll bars)
	                    if (Math.abs(currentHeight - previousHeight) > 20 * Math.max(previousHeight, currentHeight) / 100) {
	                        reBuild(true);
	                        previousHeight = currentHeight;
	                    }
	                }
	            } else {
	                //in order to call the functions only when the resize is finished
	                //http://stackoverflow.com/questions/4298612/jquery-how-to-call-resize-event-only-once-its-finished-resizing
	                clearTimeout(resizeId);
	
	                resizeId = setTimeout(function () {
	                    reBuild(true);
	                }, 350);
	            }
	        }
	
	        /**
	        * Checks if the site needs to get responsive and disables autoScrolling if so.
	        * A class `fp-responsive` is added to the plugin's container in case the user wants to use it for his own responsive CSS.
	        */
	        function responsive() {
	            var widthLimit = options.responsive || options.responsiveWidth; //backwards compatiblity
	            var heightLimit = options.responsiveHeight;
	
	            //only calculating what we need. Remember its called on the resize event.
	            var isBreakingPointWidth = widthLimit && $window.outerWidth() < widthLimit;
	            var isBreakingPointHeight = heightLimit && $window.height() < heightLimit;
	
	            if (widthLimit && heightLimit) {
	                setResponsive(isBreakingPointWidth || isBreakingPointHeight);
	            } else if (widthLimit) {
	                setResponsive(isBreakingPointWidth);
	            } else if (heightLimit) {
	                setResponsive(isBreakingPointHeight);
	            }
	        }
	
	        /**
	        * Adds transition animations for the given element
	        */
	        function addAnimation(element) {
	            var transition = 'all ' + options.scrollingSpeed + 'ms ' + options.easingcss3;
	
	            element.removeClass(NO_TRANSITION);
	            return element.css({
	                '-webkit-transition': transition,
	                'transition': transition
	            });
	        }
	
	        /**
	        * Remove transition animations for the given element
	        */
	        function removeAnimation(element) {
	            return element.addClass(NO_TRANSITION);
	        }
	
	        /**
	        * Activating the vertical navigation bullets according to the given slide name.
	        */
	        function activateNavDots(name, sectionIndex) {
	            if (options.navigation) {
	                $(SECTION_NAV_SEL).find(ACTIVE_SEL).removeClass(ACTIVE);
	                if (name) {
	                    $(SECTION_NAV_SEL).find('a[href="#' + name + '"]').addClass(ACTIVE);
	                } else {
	                    $(SECTION_NAV_SEL).find('li').eq(sectionIndex).find('a').addClass(ACTIVE);
	                }
	            }
	        }
	
	        /**
	        * Activating the website main menu elements according to the given slide name.
	        */
	        function activateMenuElement(name) {
	            if (options.menu) {
	                $(options.menu).find(ACTIVE_SEL).removeClass(ACTIVE);
	                $(options.menu).find('[data-menuanchor="' + name + '"]').addClass(ACTIVE);
	            }
	        }
	
	        /**
	        * Sets to active the current menu and vertical nav items.
	        */
	        function activateMenuAndNav(anchor, index) {
	            activateMenuElement(anchor);
	            activateNavDots(anchor, index);
	        }
	
	        /**
	        * Retuns `up` or `down` depending on the scrolling movement to reach its destination
	        * from the current section.
	        */
	        function getYmovement(destiny) {
	            var fromIndex = $(SECTION_ACTIVE_SEL).index(SECTION_SEL);
	            var toIndex = destiny.index(SECTION_SEL);
	            if (fromIndex == toIndex) {
	                return 'none';
	            }
	            if (fromIndex > toIndex) {
	                return 'up';
	            }
	            return 'down';
	        }
	
	        /**
	        * Retuns `right` or `left` depending on the scrolling movement to reach its destination
	        * from the current slide.
	        */
	        function getXmovement(fromIndex, toIndex) {
	            if (fromIndex == toIndex) {
	                return 'none';
	            }
	            if (fromIndex > toIndex) {
	                return 'left';
	            }
	            return 'right';
	        }
	
	        /**
	        * Checks if the element needs scrollbar and if the user wants to apply it.
	        * If so it creates it.
	        *
	        * @param {Object} element   jQuery object of the section or slide
	        */
	        function createScrollBar(element) {
	            //User doesn't want scrollbar here? Sayonara baby!
	            if (element.hasClass('fp-noscroll')) return;
	
	            //needed to make `scrollHeight` work under Opera 12
	            element.css('overflow', 'hidden');
	
	            var scrollOverflowHandler = options.scrollOverflowHandler;
	            var wrap = scrollOverflowHandler.wrapContent();
	            //in case element is a slide
	            var section = element.closest(SECTION_SEL);
	            var scrollable = scrollOverflowHandler.scrollable(element);
	            var contentHeight;
	
	            //if there was scroll, the contentHeight will be the one in the scrollable section
	            if (scrollable.length) {
	                contentHeight = scrollOverflowHandler.scrollHeight(element);
	            } else {
	                contentHeight = element.get(0).scrollHeight;
	                if (options.verticalCentered) {
	                    contentHeight = element.find(TABLE_CELL_SEL).get(0).scrollHeight;
	                }
	            }
	
	            var scrollHeight = windowsHeight - parseInt(section.css('padding-bottom')) - parseInt(section.css('padding-top'));
	
	            //needs scroll?
	            if (contentHeight > scrollHeight) {
	                //did we already have an scrollbar ? Updating it
	                if (scrollable.length) {
	                    scrollOverflowHandler.update(element, scrollHeight);
	                }
	                //creating the scrolling
	                else {
	                        if (options.verticalCentered) {
	                            element.find(TABLE_CELL_SEL).wrapInner(wrap);
	                        } else {
	                            element.wrapInner(wrap);
	                        }
	                        scrollOverflowHandler.create(element, scrollHeight);
	                    }
	            }
	            //removing the scrolling when it is not necessary anymore
	            else {
	                    scrollOverflowHandler.remove(element);
	                }
	
	            //undo
	            element.css('overflow', '');
	        }
	
	        function addTableClass(element) {
	            //In case we are styling for the 2nd time as in with reponsiveSlides
	            if (!element.hasClass(TABLE)) {
	                element.addClass(TABLE).wrapInner('<div class="' + TABLE_CELL + '" style="height:' + getTableHeight(element) + 'px;" />');
	            }
	        }
	
	        function getTableHeight(element) {
	            var sectionHeight = windowsHeight;
	
	            if (options.paddingTop || options.paddingBottom) {
	                var section = element;
	                if (!section.hasClass(SECTION)) {
	                    section = element.closest(SECTION_SEL);
	                }
	
	                var paddings = parseInt(section.css('padding-top')) + parseInt(section.css('padding-bottom'));
	                sectionHeight = windowsHeight - paddings;
	            }
	
	            return sectionHeight;
	        }
	
	        /**
	        * Adds a css3 transform property to the container class with or without animation depending on the animated param.
	        */
	        function transformContainer(translate3d, animated) {
	            if (animated) {
	                addAnimation(container);
	            } else {
	                removeAnimation(container);
	            }
	
	            container.css(getTransforms(translate3d));
	
	            //syncronously removing the class after the animation has been applied.
	            setTimeout(function () {
	                container.removeClass(NO_TRANSITION);
	            }, 10);
	        }
	
	        /**
	        * Gets a section by its anchor / index
	        */
	        function getSectionByAnchor(sectionAnchor) {
	            if (!sectionAnchor) return [];
	
	            var section = container.find(SECTION_SEL + '[data-anchor="' + sectionAnchor + '"]');
	            if (!section.length) {
	                section = $(SECTION_SEL).eq(sectionAnchor - 1);
	            }
	
	            return section;
	        }
	
	        /**
	        * Gets a slide inside a given section by its anchor / index
	        */
	        function getSlideByAnchor(slideAnchor, section) {
	            var slides = section.find(SLIDES_WRAPPER_SEL);
	            var slide = slides.find(SLIDE_SEL + '[data-anchor="' + slideAnchor + '"]');
	
	            if (!slide.length) {
	                slide = slides.find(SLIDE_SEL).eq(slideAnchor);
	            }
	
	            return slide;
	        }
	
	        /**
	        * Scrolls to the given section and slide anchors
	        */
	        function scrollPageAndSlide(destiny, slide) {
	            var section = getSectionByAnchor(destiny);
	
	            //do nothing if there's no section with the given anchor name
	            if (!section.length) return;
	
	            //default slide
	            if (typeof slide === 'undefined') {
	                slide = 0;
	            }
	
	            //we need to scroll to the section and then to the slide
	            if (destiny !== lastScrolledDestiny && !section.hasClass(ACTIVE)) {
	                scrollPage(section, function () {
	                    scrollSlider(section, slide);
	                });
	            }
	            //if we were already in the section
	            else {
	                    scrollSlider(section, slide);
	                }
	        }
	
	        /**
	        * Scrolls the slider to the given slide destination for the given section
	        */
	        function scrollSlider(section, slideAnchor) {
	            if (typeof slideAnchor !== 'undefined') {
	                var slides = section.find(SLIDES_WRAPPER_SEL);
	                var destiny = getSlideByAnchor(slideAnchor, section);
	
	                if (destiny.length) {
	                    landscapeScroll(slides, destiny);
	                }
	            }
	        }
	
	        /**
	        * Creates a landscape navigation bar with dots for horizontal sliders.
	        */
	        function addSlidesNavigation(section, numSlides) {
	            section.append('<div class="' + SLIDES_NAV + '"><ul></ul></div>');
	            var nav = section.find(SLIDES_NAV_SEL);
	
	            //top or bottom
	            nav.addClass(options.slidesNavPosition);
	
	            for (var i = 0; i < numSlides; i++) {
	                nav.find('ul').append('<li><a href="#"><span></span></a></li>');
	            }
	
	            //centering it
	            nav.css('margin-left', '-' + nav.width() / 2 + 'px');
	
	            nav.find('li').first().find('a').addClass(ACTIVE);
	        }
	
	        /**
	        * Sets the state of the website depending on the active section/slide.
	        * It changes the URL hash when needed and updates the body class.
	        */
	        function setState(slideIndex, slideAnchor, anchorLink, sectionIndex) {
	            var sectionHash = '';
	
	            if (options.anchors.length && !options.lockAnchors) {
	
	                //isn't it the first slide?
	                if (slideIndex) {
	                    if (typeof anchorLink !== 'undefined') {
	                        sectionHash = anchorLink;
	                    }
	
	                    //slide without anchor link? We take the index instead.
	                    if (typeof slideAnchor === 'undefined') {
	                        slideAnchor = slideIndex;
	                    }
	
	                    lastScrolledSlide = slideAnchor;
	                    setUrlHash(sectionHash + '/' + slideAnchor);
	
	                    //first slide won't have slide anchor, just the section one
	                } else if (typeof slideIndex !== 'undefined') {
	                    lastScrolledSlide = slideAnchor;
	                    setUrlHash(anchorLink);
	                }
	
	                //section without slides
	                else {
	                        setUrlHash(anchorLink);
	                    }
	            }
	
	            setBodyClass();
	        }
	
	        /**
	        * Sets the URL hash.
	        */
	        function setUrlHash(url) {
	            if (options.recordHistory) {
	                location.hash = url;
	            } else {
	                //Mobile Chrome doesn't work the normal way, so... lets use HTML5 for phones :)
	                if (isTouchDevice || isTouch) {
	                    window.history.replaceState(undefined, undefined, '#' + url);
	                } else {
	                    var baseUrl = window.location.href.split('#')[0];
	                    window.location.replace(baseUrl + '#' + url);
	                }
	            }
	        }
	
	        /**
	        * Gets the anchor for the given slide / section. Its index will be used if there's none.
	        */
	        function getAnchor(element) {
	            var anchor = element.data('anchor');
	            var index = element.index();
	
	            //Slide without anchor link? We take the index instead.
	            if (typeof anchor === 'undefined') {
	                anchor = index;
	            }
	
	            return anchor;
	        }
	
	        /**
	        * Sets a class for the body of the page depending on the active section / slide
	        */
	        function setBodyClass() {
	            var section = $(SECTION_ACTIVE_SEL);
	            var slide = section.find(SLIDE_ACTIVE_SEL);
	
	            var sectionAnchor = getAnchor(section);
	            var slideAnchor = getAnchor(slide);
	
	            var text = String(sectionAnchor);
	
	            if (slide.length) {
	                text = text + '-' + slideAnchor;
	            }
	
	            //changing slash for dash to make it a valid CSS style
	            text = text.replace('/', '-').replace('#', '');
	
	            //removing previous anchor classes
	            var classRe = new RegExp('\\b\\s?' + VIEWING_PREFIX + '-[^\\s]+\\b', "g");
	            $body[0].className = $body[0].className.replace(classRe, '');
	
	            //adding the current anchor
	            $body.addClass(VIEWING_PREFIX + '-' + text);
	        }
	
	        /**
	        * Checks for translate3d support
	        * @return boolean
	        * http://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support
	        */
	        function support3d() {
	            var el = document.createElement('p'),
	                has3d,
	                transforms = {
	                'webkitTransform': '-webkit-transform',
	                'OTransform': '-o-transform',
	                'msTransform': '-ms-transform',
	                'MozTransform': '-moz-transform',
	                'transform': 'transform'
	            };
	
	            // Add it to the body to get the computed style.
	            document.body.insertBefore(el, null);
	
	            for (var t in transforms) {
	                if (el.style[t] !== undefined) {
	                    el.style[t] = 'translate3d(1px,1px,1px)';
	                    has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);
	                }
	            }
	
	            document.body.removeChild(el);
	
	            return has3d !== undefined && has3d.length > 0 && has3d !== 'none';
	        }
	
	        /**
	        * Removes the auto scrolling action fired by the mouse wheel and trackpad.
	        * After this function is called, the mousewheel and trackpad movements won't scroll through sections.
	        */
	        function removeMouseWheelHandler() {
	            if (document.addEventListener) {
	                document.removeEventListener('mousewheel', MouseWheelHandler, false); //IE9, Chrome, Safari, Oper
	                document.removeEventListener('wheel', MouseWheelHandler, false); //Firefox
	                document.removeEventListener('MozMousePixelScroll', MouseWheelHandler, false); //old Firefox
	            } else {
	                document.detachEvent('onmousewheel', MouseWheelHandler); //IE 6/7/8
	            }
	        }
	
	        /**
	        * Adds the auto scrolling action for the mouse wheel and trackpad.
	        * After this function is called, the mousewheel and trackpad movements will scroll through sections
	        * https://developer.mozilla.org/en-US/docs/Web/Events/wheel
	        */
	        function addMouseWheelHandler() {
	            var prefix = '';
	            var _addEventListener;
	
	            if (window.addEventListener) {
	                _addEventListener = "addEventListener";
	            } else {
	                _addEventListener = "attachEvent";
	                prefix = 'on';
	            }
	
	            // detect available wheel event
	            var support = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"
	            document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
	            'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
	
	
	            if (support == 'DOMMouseScroll') {
	                document[_addEventListener](prefix + 'MozMousePixelScroll', MouseWheelHandler, false);
	            }
	
	            //handle MozMousePixelScroll in older Firefox
	            else {
	                    document[_addEventListener](prefix + support, MouseWheelHandler, false);
	                }
	        }
	
	        /**
	        * Binding the mousemove when the mouse's middle button is pressed
	        */
	        function addMiddleWheelHandler() {
	            container.on('mousedown', mouseDownHandler).on('mouseup', mouseUpHandler);
	        }
	
	        /**
	        * Unbinding the mousemove when the mouse's middle button is released
	        */
	        function removeMiddleWheelHandler() {
	            container.off('mousedown', mouseDownHandler).off('mouseup', mouseUpHandler);
	        }
	
	        /**
	        * Adds the possibility to auto scroll through sections on touch devices.
	        */
	        function addTouchHandler() {
	            if (isTouchDevice || isTouch) {
	                if (options.autoScrolling) {
	                    $body.off(events.touchmove).on(events.touchmove, preventBouncing);
	                }
	
	                $(WRAPPER_SEL).off(events.touchstart).on(events.touchstart, touchStartHandler).off(events.touchmove).on(events.touchmove, touchMoveHandler);
	            }
	        }
	
	        /**
	        * Removes the auto scrolling for touch devices.
	        */
	        function removeTouchHandler() {
	            if (isTouchDevice || isTouch) {
	                $(WRAPPER_SEL).off(events.touchstart).off(events.touchmove);
	            }
	        }
	
	        /*
	        * Returns and object with Microsoft pointers (for IE<11 and for IE >= 11)
	        * http://msdn.microsoft.com/en-us/library/ie/dn304886(v=vs.85).aspx
	        */
	        function getMSPointer() {
	            var pointer;
	
	            //IE >= 11 & rest of browsers
	            if (window.PointerEvent) {
	                pointer = { down: 'pointerdown', move: 'pointermove' };
	            }
	
	            //IE < 11
	            else {
	                    pointer = { down: 'MSPointerDown', move: 'MSPointerMove' };
	                }
	
	            return pointer;
	        }
	
	        /**
	        * Gets the pageX and pageY properties depending on the browser.
	        * https://github.com/alvarotrigo/fullPage.js/issues/194#issuecomment-34069854
	        */
	        function getEventsPage(e) {
	            var events = [];
	
	            events.y = typeof e.pageY !== 'undefined' && (e.pageY || e.pageX) ? e.pageY : e.touches[0].pageY;
	            events.x = typeof e.pageX !== 'undefined' && (e.pageY || e.pageX) ? e.pageX : e.touches[0].pageX;
	
	            //in touch devices with scrollBar:true, e.pageY is detected, but we have to deal with touch events. #1008
	            if (isTouch && isReallyTouch(e) && options.scrollBar) {
	                events.y = e.touches[0].pageY;
	                events.x = e.touches[0].pageX;
	            }
	
	            return events;
	        }
	
	        /**
	        * Slides silently (with no animation) the active slider to the given slide.
	        * @param noCallback {bool} true or defined -> no callbacks
	        */
	        function silentLandscapeScroll(activeSlide, noCallbacks) {
	            setScrollingSpeed(0, 'internal');
	
	            if (typeof noCallbacks !== 'undefined') {
	                //preventing firing callbacks afterSlideLoad etc.
	                isResizing = true;
	            }
	
	            landscapeScroll(activeSlide.closest(SLIDES_WRAPPER_SEL), activeSlide);
	
	            if (typeof noCallbacks !== 'undefined') {
	                isResizing = false;
	            }
	
	            setScrollingSpeed(originals.scrollingSpeed, 'internal');
	        }
	
	        /**
	        * Scrolls silently (with no animation) the page to the given Y position.
	        */
	        function silentScroll(top) {
	            // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625
	            // that's why we round it to 0.
	            var roundedTop = Math.round(top);
	
	            if (options.css3 && options.autoScrolling && !options.scrollBar) {
	                var translate3d = 'translate3d(0px, -' + roundedTop + 'px, 0px)';
	                transformContainer(translate3d, false);
	            } else if (options.autoScrolling && !options.scrollBar) {
	                container.css('top', -roundedTop);
	            } else {
	                $htmlBody.scrollTop(roundedTop);
	            }
	        }
	
	        /**
	        * Returns the cross-browser transform string.
	        */
	        function getTransforms(translate3d) {
	            return {
	                '-webkit-transform': translate3d,
	                '-moz-transform': translate3d,
	                '-ms-transform': translate3d,
	                'transform': translate3d
	            };
	        }
	
	        /**
	        * Allowing or disallowing the mouse/swipe scroll in a given direction. (not for keyboard)
	        * @type  m (mouse) or k (keyboard)
	        */
	        function setIsScrollAllowed(value, direction, type) {
	            switch (direction) {
	                case 'up':
	                    isScrollAllowed[type].up = value;break;
	                case 'down':
	                    isScrollAllowed[type].down = value;break;
	                case 'left':
	                    isScrollAllowed[type].left = value;break;
	                case 'right':
	                    isScrollAllowed[type].right = value;break;
	                case 'all':
	                    if (type == 'm') {
	                        setAllowScrolling(value);
	                    } else {
	                        setKeyboardScrolling(value);
	                    }
	            }
	        }
	
	        /*
	        * Destroys fullpage.js plugin events and optinally its html markup and styles
	        */
	        function destroy(all) {
	            setAutoScrolling(false, 'internal');
	            setAllowScrolling(false);
	            setKeyboardScrolling(false);
	            container.addClass(DESTROYED);
	
	            clearTimeout(afterSlideLoadsId);
	            clearTimeout(afterSectionLoadsId);
	            clearTimeout(resizeId);
	            clearTimeout(scrollId);
	            clearTimeout(scrollId2);
	
	            $window.off('scroll', scrollHandler).off('hashchange', hashChangeHandler).off('resize', resizeHandler);
	
	            $document.off('click touchstart', SECTION_NAV_SEL + ' a').off('mouseenter', SECTION_NAV_SEL + ' li').off('mouseleave', SECTION_NAV_SEL + ' li').off('click touchstart', SLIDES_NAV_LINK_SEL).off('mouseover', options.normalScrollElements).off('mouseout', options.normalScrollElements);
	
	            $(SECTION_SEL).off('click touchstart', SLIDES_ARROW_SEL);
	
	            clearTimeout(afterSlideLoadsId);
	            clearTimeout(afterSectionLoadsId);
	
	            //lets make a mess!
	            if (all) {
	                destroyStructure();
	            }
	        }
	
	        /*
	        * Removes inline styles added by fullpage.js
	        */
	        function destroyStructure() {
	            //reseting the `top` or `translate` properties to 0
	            silentScroll(0);
	
	            //loading all the lazy load content
	            container.find('img[data-src], source[data-src], audio[data-src], iframe[data-src]').each(function () {
	                setSrc($(this), 'src');
	            });
	
	            container.find('img[data-srcset]').each(function () {
	                setSrc($(this), 'srcset');
	            });
	
	            $(SECTION_NAV_SEL + ', ' + SLIDES_NAV_SEL + ', ' + SLIDES_ARROW_SEL).remove();
	
	            //removing inline styles
	            $(SECTION_SEL).css({
	                'height': '',
	                'background-color': '',
	                'padding': ''
	            });
	
	            $(SLIDE_SEL).css({
	                'width': ''
	            });
	
	            container.css({
	                'height': '',
	                'position': '',
	                '-ms-touch-action': '',
	                'touch-action': ''
	            });
	
	            $htmlBody.css({
	                'overflow': '',
	                'height': ''
	            });
	
	            // remove .fp-enabled class
	            $('html').removeClass(ENABLED);
	
	            // remove .fp-responsive class
	            $body.removeClass(RESPONSIVE);
	
	            // remove all of the .fp-viewing- classes
	            $.each($body.get(0).className.split(/\s+/), function (index, className) {
	                if (className.indexOf(VIEWING_PREFIX) === 0) {
	                    $body.removeClass(className);
	                }
	            });
	
	            //removing added classes
	            $(SECTION_SEL + ', ' + SLIDE_SEL).each(function () {
	                options.scrollOverflowHandler.remove($(this));
	                $(this).removeClass(TABLE + ' ' + ACTIVE);
	            });
	
	            removeAnimation(container);
	
	            //Unwrapping content
	            container.find(TABLE_CELL_SEL + ', ' + SLIDES_CONTAINER_SEL + ', ' + SLIDES_WRAPPER_SEL).each(function () {
	                //unwrap not being use in case there's no child element inside and its just text
	                $(this).replaceWith(this.childNodes);
	            });
	
	            //removing the applied transition from the fullpage wrapper
	            container.css({
	                '-webkit-transition': 'none',
	                'transition': 'none'
	            });
	
	            //scrolling the page to the top with no animation
	            $htmlBody.scrollTop(0);
	
	            //removing selectors
	            var usedSelectors = [SECTION, SLIDE, SLIDES_CONTAINER];
	            $.each(usedSelectors, function (index, value) {
	                $('.' + value).removeClass(value);
	            });
	        }
	
	        /*
	        * Sets the state for a variable with multiple states (original, and temporal)
	        * Some variables such as `autoScrolling` or `recordHistory` might change automatically its state when using `responsive` or `autoScrolling:false`.
	        * This function is used to keep track of both states, the original and the temporal one.
	        * If type is not 'internal', then we assume the user is globally changing the variable.
	        */
	        function setVariableState(variable, value, type) {
	            options[variable] = value;
	            if (type !== 'internal') {
	                originals[variable] = value;
	            }
	        }
	
	        /**
	        * Displays warnings
	        */
	        function displayWarnings() {
	            var extensions = ['fadingEffect', 'continuousHorizontal', 'scrollHorizontally', 'interlockedSlides', 'resetSliders', 'responsiveSlides', 'offsetSections', 'dragAndMove', 'scrollOverflowReset', 'parallax'];
	            if ($('html').hasClass(ENABLED)) {
	                showError('error', 'Fullpage.js can only be initialized once and you are doing it multiple times!');
	                return;
	            }
	
	            // Disable mutually exclusive settings
	            if (options.continuousVertical && (options.loopTop || options.loopBottom)) {
	                options.continuousVertical = false;
	                showError('warn', 'Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled');
	            }
	
	            if (options.scrollBar && options.scrollOverflow) {
	                showError('warn', 'Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox');
	            }
	
	            if (options.continuousVertical && (options.scrollBar || !options.autoScrolling)) {
	                options.continuousVertical = false;
	                showError('warn', 'Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled');
	            }
	
	            //using extensions? Wrong file!
	            $.each(extensions, function (index, extension) {
	                //is the option set to true?
	                if (options[extension]) {
	                    showError('warn', 'fullpage.js extensions require jquery.fullpage.extensions.min.js file instead of the usual jquery.fullpage.js. Requested: ' + extension);
	                }
	            });
	
	            //anchors can not have the same value as any element ID or NAME
	            $.each(options.anchors, function (index, name) {
	
	                //case insensitive selectors (http://stackoverflow.com/a/19465187/1081396)
	                var nameAttr = $document.find('[name]').filter(function () {
	                    return $(this).attr('name') && $(this).attr('name').toLowerCase() == name.toLowerCase();
	                });
	
	                var idAttr = $document.find('[id]').filter(function () {
	                    return $(this).attr('id') && $(this).attr('id').toLowerCase() == name.toLowerCase();
	                });
	
	                if (idAttr.length || nameAttr.length) {
	                    showError('error', 'data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).');
	                    idAttr.length && showError('error', '"' + name + '" is is being used by another element `id` property');
	                    nameAttr.length && showError('error', '"' + name + '" is is being used by another element `name` property');
	                }
	            });
	        }
	
	        /**
	        * Shows a message in the console of the given type.
	        */
	        function showError(type, text) {
	            console && console[type] && console[type]('fullPage: ' + text);
	        }
	    }; //end of $.fn.fullpage
	
	    if (typeof IScroll !== 'undefined') {
	        /*
	        * Turns iScroll `mousewheel` option off dynamically
	        * https://github.com/cubiq/iscroll/issues/1036
	        */
	        IScroll.prototype.wheelOn = function () {
	            this.wrapper.addEventListener('wheel', this);
	            this.wrapper.addEventListener('mousewheel', this);
	            this.wrapper.addEventListener('DOMMouseScroll', this);
	        };
	
	        /*
	        * Turns iScroll `mousewheel` option on dynamically
	        * https://github.com/cubiq/iscroll/issues/1036
	        */
	        IScroll.prototype.wheelOff = function () {
	            this.wrapper.removeEventListener('wheel', this);
	            this.wrapper.removeEventListener('mousewheel', this);
	            this.wrapper.removeEventListener('DOMMouseScroll', this);
	        };
	    }
	
	    /**
	     * An object to handle overflow scrolling.
	     * This uses jquery.slimScroll to accomplish overflow scrolling.
	     * It is possible to pass in an alternate scrollOverflowHandler
	     * to the fullpage.js option that implements the same functions
	     * as this handler.
	     *
	     * @type {Object}
	     */
	    var iscrollHandler = {
	        refreshId: null,
	        iScrollInstances: [],
	
	        // Enables or disables the mouse wheel for the active section or all slides in it
	        toggleWheel: function toggleWheel(value) {
	            var scrollable = $(SECTION_ACTIVE_SEL).find(SCROLLABLE_SEL);
	            scrollable.each(function () {
	                var iScrollInstance = $(this).data('iscrollInstance');
	                if (typeof iScrollInstance !== 'undefined' && iScrollInstance) {
	                    if (value) {
	                        iScrollInstance.wheelOn();
	                    } else {
	                        iScrollInstance.wheelOff();
	                    }
	                }
	            });
	        },
	
	        /**
	        * Turns off iScroll for the destination section.
	        * When scrolling very fast on some trackpads (and Apple laptops) the inertial scrolling would
	        * scroll the destination section/slide before the sections animations ends.
	        */
	        onLeave: function onLeave() {
	            iscrollHandler.toggleWheel(false);
	        },
	
	        // Turns off iScroll for the leaving section
	        beforeLeave: function beforeLeave() {
	            iscrollHandler.onLeave();
	        },
	
	        // Turns on iScroll on section load
	        afterLoad: function afterLoad() {
	            iscrollHandler.toggleWheel(true);
	        },
	
	        /**
	         * Called when overflow scrolling is needed for a section.
	         *
	         * @param  {Object} element      jQuery object containing current section
	         * @param  {Number} scrollHeight Current window height in pixels
	         */
	        create: function create(element, scrollHeight) {
	            var scrollable = element.find(SCROLLABLE_SEL);
	
	            scrollable.height(scrollHeight);
	            scrollable.each(function () {
	                var $this = $(this);
	                var iScrollInstance = $this.data('iscrollInstance');
	                if (iScrollInstance) {
	                    $.each(iscrollHandler.iScrollInstances, function () {
	                        $(this).destroy();
	                    });
	                }
	
	                iScrollInstance = new IScroll($this.get(0), iscrollOptions);
	                iscrollHandler.iScrollInstances.push(iScrollInstance);
	
	                //off by default until the section gets active
	                iScrollInstance.wheelOff();
	
	                $this.data('iscrollInstance', iScrollInstance);
	            });
	        },
	
	        /**
	         * Return a boolean depending on whether the scrollable element is a
	         * the end or at the start of the scrolling depending on the given type.
	         *
	         * @param  {String}  type       Either 'top' or 'bottom'
	         * @param  {Object}  scrollable jQuery object for the scrollable element
	         * @return {Boolean}
	         */
	        isScrolled: function isScrolled(type, scrollable) {
	            var scroller = scrollable.data('iscrollInstance');
	
	            //no scroller?
	            if (!scroller) {
	                return true;
	            }
	
	            if (type === 'top') {
	                return scroller.y >= 0 && !scrollable.scrollTop();
	            } else if (type === 'bottom') {
	                return 0 - scroller.y + scrollable.scrollTop() + 1 + scrollable.innerHeight() >= scrollable[0].scrollHeight;
	            }
	        },
	
	        /**
	         * Returns the scrollable element for the given section.
	         * If there are landscape slides, will only return a scrollable element
	         * if it is in the active slide.
	         *
	         * @param  {Object}  activeSection jQuery object containing current section
	         * @return {Boolean}
	         */
	        scrollable: function scrollable(activeSection) {
	            // if there are landscape slides, we check if the scrolling bar is in the current one or not
	            if (activeSection.find(SLIDES_WRAPPER_SEL).length) {
	                return activeSection.find(SLIDE_ACTIVE_SEL).find(SCROLLABLE_SEL);
	            }
	            return activeSection.find(SCROLLABLE_SEL);
	        },
	
	        /**
	         * Returns the scroll height of the wrapped content.
	         * If this is larger than the window height minus section padding,
	         * overflow scrolling is needed.
	         *
	         * @param  {Object} element jQuery object containing current section
	         * @return {Number}
	         */
	        scrollHeight: function scrollHeight(element) {
	            return element.find(SCROLLABLE_SEL).children().first().get(0).scrollHeight;
	        },
	
	        /**
	         * Called when overflow scrolling is no longer needed for a section.
	         *
	         * @param  {Object} element      jQuery object containing current section
	         */
	        remove: function remove(element) {
	            var scrollable = element.find(SCROLLABLE_SEL);
	            if (scrollable.length) {
	                var iScrollInstance = scrollable.data('iscrollInstance');
	                iScrollInstance.destroy();
	
	                scrollable.data('iscrollInstance', null);
	            }
	            element.find(SCROLLABLE_SEL).children().first().children().first().unwrap().unwrap();
	        },
	
	        /**
	         * Called when overflow scrolling has already been setup but the
	         * window height has potentially changed.
	         *
	         * @param  {Object} element      jQuery object containing current section
	         * @param  {Number} scrollHeight Current window height in pixels
	         */
	        update: function update(element, scrollHeight) {
	            //using a timeout in order to execute the refresh function only once when `update` is called multiple times in a
	            //short period of time.
	            //it also comes on handy because iScroll requires the use of timeout when using `refresh`.
	            clearTimeout(iscrollHandler.refreshId);
	            iscrollHandler.refreshId = setTimeout(function () {
	                $.each(iscrollHandler.iScrollInstances, function () {
	                    $(this).get(0).refresh();
	                });
	            }, 150);
	
	            //updating the wrappers height
	            element.find(SCROLLABLE_SEL).css('height', scrollHeight + 'px').parent().css('height', scrollHeight + 'px');
	        },
	
	        /**
	         * Called to get any additional elements needed to wrap the section
	         * content in order to facilitate overflow scrolling.
	         *
	         * @return {String|Object} Can be a string containing HTML,
	         *                         a DOM element, or jQuery object.
	         */
	        wrapContent: function wrapContent() {
	            return '<div class="' + SCROLLABLE + '"><div class="fp-scroller"></div></div>';
	        }
	    };
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(63);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(70);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(64), __esModule: true };

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(65);
	module.exports = __webpack_require__(69).f('iterator');

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(66);
	var global        = __webpack_require__(11)
	  , hide          = __webpack_require__(15)
	  , Iterators     = __webpack_require__(27)
	  , TO_STRING_TAG = __webpack_require__(45)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(67)
	  , step             = __webpack_require__(68)
	  , Iterators        = __webpack_require__(27)
	  , toIObject        = __webpack_require__(33);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(8)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 68 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(45);

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(71), __esModule: true };

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(72);
	__webpack_require__(83);
	__webpack_require__(84);
	__webpack_require__(85);
	module.exports = __webpack_require__(12).Symbol;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(11)
	  , has            = __webpack_require__(26)
	  , DESCRIPTORS    = __webpack_require__(20)
	  , $export        = __webpack_require__(10)
	  , redefine       = __webpack_require__(25)
	  , META           = __webpack_require__(73).KEY
	  , $fails         = __webpack_require__(21)
	  , shared         = __webpack_require__(40)
	  , setToStringTag = __webpack_require__(44)
	  , uid            = __webpack_require__(41)
	  , wks            = __webpack_require__(45)
	  , wksExt         = __webpack_require__(69)
	  , wksDefine      = __webpack_require__(74)
	  , keyOf          = __webpack_require__(75)
	  , enumKeys       = __webpack_require__(76)
	  , isArray        = __webpack_require__(79)
	  , anObject       = __webpack_require__(17)
	  , toIObject      = __webpack_require__(33)
	  , toPrimitive    = __webpack_require__(23)
	  , createDesc     = __webpack_require__(24)
	  , _create        = __webpack_require__(29)
	  , gOPNExt        = __webpack_require__(80)
	  , $GOPD          = __webpack_require__(82)
	  , $DP            = __webpack_require__(16)
	  , $keys          = __webpack_require__(31)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(81).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(78).f  = $propertyIsEnumerable;
	  __webpack_require__(77).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(9)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(15)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(41)('meta')
	  , isObject = __webpack_require__(18)
	  , has      = __webpack_require__(26)
	  , setDesc  = __webpack_require__(16).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(21)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(11)
	  , core           = __webpack_require__(12)
	  , LIBRARY        = __webpack_require__(9)
	  , wksExt         = __webpack_require__(69)
	  , defineProperty = __webpack_require__(16).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(31)
	  , toIObject = __webpack_require__(33);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(31)
	  , gOPS    = __webpack_require__(77)
	  , pIE     = __webpack_require__(78);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 77 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 78 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(35);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(33)
	  , gOPN      = __webpack_require__(81).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(32)
	  , hiddenKeys = __webpack_require__(42).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(78)
	  , createDesc     = __webpack_require__(24)
	  , toIObject      = __webpack_require__(33)
	  , toPrimitive    = __webpack_require__(23)
	  , has            = __webpack_require__(26)
	  , IE8_DOM_DEFINE = __webpack_require__(19)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(20) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 83 */
/***/ function(module, exports) {



/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(74)('asyncIterator');

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(74)('observable');

/***/ },
/* 86 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var resizeIndexScreen = function resizeIndexScreen(progress) {
		var scale = Math.max(0, Math.min(progress, 1));
	
		$('.index-screen .screen').css('transform', 'scale(' + scale + ')');
	};
	
	exports.default = resizeIndexScreen;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.scrollToEl = undefined;
	
	var _onWheel = __webpack_require__(88);
	
	var _onWheel2 = _interopRequireDefault(_onWheel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var smoothScrolling = false;
	
	(0, _onWheel2.default)(window, function (e) {
		if (smoothScrolling) {
			e.preventDefault();
		}
	});
	
	var scrollToEl = exports.scrollToEl = function scrollToEl(id) {
		var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
		var callback = arguments[2];
	
		if (!smoothScrolling) {
			smoothScrolling = true;
	
			var $target = $(id);
	
			if ($target.length === 0) return;
	
			var scrollTop = void 0;
			switch (id) {
				case '#index':
					scrollTop = 0;
					break;
				case '#phylosophy':
					scrollTop = $target.offset().top - parseInt($target.css('padding-top'));
					break;
				default:
					scrollTop = $target.offset().top;
			}
	
			$('html, body').animate({ scrollTop: scrollTop }, duration, function () {
				smoothScrolling = false;
	
				if (typeof callback === 'function') {
					callback();
				}
			});
		}
	};
	
	exports.default = function () {
		$('a[href]').click(function () {
			var selector = $.attr(this, 'href').replace('/#', '#');
			if (selector[0] == '#') {
				scrollToEl(selector, 500);
	
				return false;
			}
		});
	};

/***/ },
/* 88 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (elem, onWheel) {
	  if (elem.addEventListener) {
	    if ('onwheel' in document) {
	      // IE9+, FF17+, Ch31+
	      elem.addEventListener("wheel", onWheel);
	    } else if ('onmousewheel' in document) {
	      // устаревший вариант события
	      elem.addEventListener("mousewheel", onWheel);
	    } else {
	      // Firefox < 17
	      elem.addEventListener("MozMousePixelScroll", onWheel);
	    }
	  } else {
	    // IE8-
	    elem.attachEvent("onmousewheel", onWheel);
	  }
	};

/***/ },
/* 89 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var GALLERY_CURRENT_CLASSNAME = 'gallery__item_current';
	var GALLERY_NEXT_CLASSNAME = 'gallery__item_next';
	var GALLERY_PREV_CLASSNAME = 'gallery__item_prev';
	
	var BIG_GALLERY_ITEM = 'gallery__big-item';
	var BIG_GALLERY_CURRENT_CLASSNAME = 'gallery__big-item_current';
	var BIG_GALLERY_NEXT_CLASSNAME = 'gallery__big-item_next';
	var BIG_GALLERY_PREV_CLASSNAME = 'gallery__big-item_prev';
	
	var slideTo = function slideTo(index, $slides) {
		var count = $slides.length;
		var maxIndex = count - 1;
		var minIndex = 0;
		var current = index;
		var next = current === maxIndex ? minIndex : current + 1;
		var prev = current === minIndex ? maxIndex : current - 1;
	
		$slides.removeClass([GALLERY_CURRENT_CLASSNAME, GALLERY_NEXT_CLASSNAME, GALLERY_PREV_CLASSNAME, BIG_GALLERY_CURRENT_CLASSNAME, BIG_GALLERY_NEXT_CLASSNAME, BIG_GALLERY_PREV_CLASSNAME].join(' '));
	
		var isBig = $slides.eq(0).hasClass(BIG_GALLERY_ITEM);
		$slides.eq(current).addClass(!isBig ? GALLERY_CURRENT_CLASSNAME : BIG_GALLERY_CURRENT_CLASSNAME);
		$slides.eq(next).addClass(!isBig ? GALLERY_NEXT_CLASSNAME : BIG_GALLERY_NEXT_CLASSNAME);
		$slides.eq(prev).addClass(!isBig ? GALLERY_PREV_CLASSNAME : BIG_GALLERY_PREV_CLASSNAME);
	};
	var getSiblingsIndexes = function getSiblingsIndexes($slides) {
		var isBig = $slides.eq(0).hasClass(BIG_GALLERY_ITEM);
	
		var count = $slides.length;
		var $current = $slides.filter('.' + (!isBig ? GALLERY_CURRENT_CLASSNAME : BIG_GALLERY_CURRENT_CLASSNAME));
		var current = $slides.index($current);
		var maxIndex = count - 1;
		var minIndex = 0;
	
		var next = current === maxIndex ? minIndex : current + 1;
		var prev = current === minIndex ? maxIndex : current - 1;
	
		return { prev: prev, current: current, next: next };
	};
	var slideToNext = function slideToNext($slides, $addSlides) {
		var _getSiblingsIndexes = getSiblingsIndexes($slides),
		    next = _getSiblingsIndexes.next;
	
		var big = getSiblingsIndexes($addSlides);
		slideTo(next, $slides);
		slideTo(big.next, $addSlides);
	};
	var slideToPrev = function slideToPrev($slides, $addSlides) {
		var _getSiblingsIndexes2 = getSiblingsIndexes($slides),
		    prev = _getSiblingsIndexes2.prev;
	
		var big = getSiblingsIndexes($addSlides);
		slideTo(prev, $slides);
		slideTo(big.prev, $addSlides);
	};
	
	exports.default = function () {
		var $galleries = $('.gallery');
		$galleries.each(function (index, gallery) {
			var $gallery = $(gallery);
			var $arrowLeft = $gallery.find('.gallery__arrow_left');
			var $arrowRight = $gallery.find('.gallery__arrow_right');
			var $items = $gallery.find('.gallery__item');
	
			var $bigItems = $gallery.find('.gallery__big-item');
	
			$arrowLeft.click(function () {
				slideToPrev($items, $bigItems);
			});
			$arrowRight.click(function () {
				slideToNext($items, $bigItems);
			});
	
			// const onItemClick = (i, item) => {
			// 	const $item = $(item);
			// 	$item.click(() => {
			// 		slideTo(i, $items);
			// 		slideTo(i, $bigItems);
			// 		$gallery.toggleClass('gallery_detail');
	
			// 		$('body').toggleClass('page_no-scroll');
			// 	});
			// };
	
			// $items.each(onItemClick);
			// $bigItems.each(onItemClick);
	
			var $close = $gallery.find('.gallery__close');
			$close.click(function () {
				$gallery.removeClass('gallery_detail');
			});
		});
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.selectMenuItem = exports.initMobileMenu = exports.initProductsMenu = exports.productsToProductMode = exports.productsToListMode = exports.initWorksMenu = exports.initPricesMenu = undefined;
	
	var _replaceClassname = __webpack_require__(91);
	
	var _replaceClassname2 = _interopRequireDefault(_replaceClassname);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var $pricesMenuContainer = $('.prices__lists');
	var $pricesMenuItems = $('.prices .left-menu__item');
	var LEFT_MENU_ACTIVE_ITEM_CLASSNAME = 'left-menu__item_active';
	
	var initPricesMenu = exports.initPricesMenu = function initPricesMenu() {
		$pricesMenuItems.each(function (index, item) {
			var $item = $(item);
	
			$item.click(function () {
				$pricesMenuItems.removeClass(LEFT_MENU_ACTIVE_ITEM_CLASSNAME);
				$item.addClass(LEFT_MENU_ACTIVE_ITEM_CLASSNAME);
				$pricesMenuContainer.attr('data-current', index + 1);
			});
		});
	};
	
	var $worksMenuContainer = $('.works__list');
	var $worksMenuItems = $('.works .left-menu__item');
	
	var initWorksMenu = exports.initWorksMenu = function initWorksMenu() {
		$worksMenuItems.each(function (index, item) {
			var $item = $(item);
	
			$item.click(function () {
				$worksMenuItems.removeClass(LEFT_MENU_ACTIVE_ITEM_CLASSNAME);
				$item.addClass(LEFT_MENU_ACTIVE_ITEM_CLASSNAME);
				$worksMenuContainer.attr('data-current', index + 1);
			});
		});
	};
	
	var $products = $('.products');
	var PRODUCT_MODE_LIST_CLASSNAME = 'products_list';
	var PRODUCT_MODE_PRODUCT_CLASSNAME = 'products_product';
	var $productsMenuContainer = $('.products__lists');
	var $productsMenuItems = $('.products .left-menu__item');
	var productsToListMode = exports.productsToListMode = function productsToListMode() {
		return (0, _replaceClassname2.default)($products, PRODUCT_MODE_PRODUCT_CLASSNAME, PRODUCT_MODE_LIST_CLASSNAME);
	};
	var productsToProductMode = exports.productsToProductMode = function productsToProductMode() {
		return (0, _replaceClassname2.default)($products, PRODUCT_MODE_LIST_CLASSNAME, PRODUCT_MODE_PRODUCT_CLASSNAME);
	};
	
	var initProductsMenu = exports.initProductsMenu = function initProductsMenu() {
		$productsMenuItems.each(function (index, item) {
			var $item = $(item);
	
			$item.click(function () {
				$productsMenuItems.removeClass(LEFT_MENU_ACTIVE_ITEM_CLASSNAME);
				$item.addClass(LEFT_MENU_ACTIVE_ITEM_CLASSNAME);
				$productsMenuContainer.attr('data-current', index + 1);
	
				productsToListMode();
			});
		});
	};
	
	var $mobileMenuBtn = $('.header__burger');
	var $header = $('.header');
	var SHOW_MOBILE_MENU_CLASSNAME = 'header_show-menu';
	var initMobileMenu = exports.initMobileMenu = function initMobileMenu() {
		$mobileMenuBtn.click(function () {
			$header.toggleClass(SHOW_MOBILE_MENU_CLASSNAME);
		});
		$('.menu__item').click(function () {
			$header.removeClass(SHOW_MOBILE_MENU_CLASSNAME);
		});
	};
	
	var $menuItems = $('.menu .menu__item');
	var MENU_ITEM_ACTIVE_CLASSNAME = 'menu__item_active';
	var selectMenuItem = exports.selectMenuItem = function selectMenuItem(id) {
		$menuItems.removeClass(MENU_ITEM_ACTIVE_CLASSNAME);
		$menuItems.filter('*[href="#' + id + '"]').addClass(MENU_ITEM_ACTIVE_CLASSNAME);
	};

/***/ },
/* 91 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var replaceClassname = function replaceClassname($el, removeClassname, addClassname) {
		return $el.removeClass(removeClassname).addClass(addClassname);
	};
	
	exports.default = replaceClassname;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var seq = 'pops1opspop2po3sp4pspo5sp6pspop7p8pspop9p10pspo11spop12';
	var steps = seq.match(/([pops]|\d+)/ig);
	
	var ACTIVE_CLASSNAME = 'preloader_active';
	var $preloader = $('.preloader');
	var currentStep = -1;
	var enabled = true;
	
	var set = function set(step) {
	    var symbol = steps[step];
	    $preloader.attr('data-step', symbol);
	};
	
	var next = function next() {
	    currentStep++;
	    if (currentStep === seq.length) currentStep = 0;
	
	    set(currentStep);
	
	    if (enabled) window.setTimeout(next, 700);
	};
	
	var Preloader = function () {
	    function Preloader() {
	        (0, _classCallCheck3.default)(this, Preloader);
	    }
	
	    (0, _createClass3.default)(Preloader, [{
	        key: 'start',
	        value: function start() {
	            var _this = this;
	
	            next();
	            window.setTimeout(function () {
	                if (enabled) {
	                    _this.stop();
	                }
	            }, 15000);
	        }
	    }, {
	        key: 'stop',
	        value: function stop() {
	            enabled = false;
	            $preloader.removeClass(ACTIVE_CLASSNAME);
	        }
	    }]);
	    return Preloader;
	}();
	
	exports.default = new Preloader();

/***/ },
/* 93 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(95);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(96), __esModule: true };

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(97);
	var $Object = __webpack_require__(12).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(20), 'Object', {defineProperty: __webpack_require__(16).f});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _replaceClassname = __webpack_require__(91);
	
	var _replaceClassname2 = _interopRequireDefault(_replaceClassname);
	
	var _menu = __webpack_require__(90);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// products list to detail
	var getProductData = function getProductData($container) {
	    return {
	        photo: $container.find('.product-data__image').text(),
	        name: $container.find('.product-data__title').html(),
	        price: $container.find('.product-data__price').text(),
	        volume: $container.find('.product-data__volume').text(),
	        description: $container.find('.product-data__description').html()
	    };
	};
	var setProductDetailData = function setProductDetailData(data) {
	    var $product = $('.product');
	    var blocks = ['name', 'price', 'volume'];
	
	    blocks.forEach(function (block) {
	        var value = data[block];
	        $product.find('.product__' + block).html(value);
	    });
	    $product.find('.nano-content').html(data.description);
	
	    var $image = $product.find('.product__image');
	    $image.hide();
	    var img = new Image();
	    img.onload = function () {
	        $image.attr('src', data.photo);
	        $image.fadeIn(500);
	    };
	    img.src = data.photo;
	};
	var $productItems = $('.products-item');
	
	var initProductItems = function initProductItems() {
	    $productItems.each(function (index, item) {
	        var $item = $(item);
	        var $dataContainer = $item.find('.product-data');
	        var data = getProductData($dataContainer);
	
	        var $photo = $item.find('.products-item__photo');
	        $photo.click(function () {
	            setProductDetailData(data);
	            (0, _menu.productsToProductMode)();
	        });
	    });
	};
	
	// product detail
	var $productDetails = $('.product');
	var initProductDetails = function initProductDetails() {
	    $productDetails.each(function (index, product) {
	        var $product = $(product);
	
	        var $back = $product.find('.product__back');
	        $back.click(_menu.productsToListMode);
	    });
	};
	
	var checkPage = function checkPage($wrapper, index, count) {
	    if (index === 1) {
	        $wrapper.addClass('products-list_first');
	    } else {
	        $wrapper.removeClass('products-list_first');
	    }
	    if (index === count) {
	        $wrapper.addClass('products-list_last');
	    } else {
	        $wrapper.removeClass('products-list_last');
	    }
	};
	
	// products lists paging
	var $productsLists = $('.products-list');
	var decreasePage = function decreasePage($wrapper, pagesCount) {
	    var currentPage = parseInt($wrapper.attr('data-page'));
	    var nextPage = Math.max(1, currentPage - 1);
	    $wrapper.attr('data-page', nextPage);
	    checkPage($wrapper, nextPage, pagesCount);
	};
	var increasePage = function increasePage($wrapper, pagesCount) {
	    var currentPage = parseInt($wrapper.attr('data-page'));
	    var nextPage = Math.min(pagesCount, currentPage + 1);
	    $wrapper.attr('data-page', nextPage);
	    checkPage($wrapper, nextPage, pagesCount);
	};
	var initProductLists = function initProductLists() {
	    $productsLists.each(function (index, list) {
	        var $list = $(list);
	        var $arrowLeft = $list.find('.products-list__arrow_left');
	        var $arrowRight = $list.find('.products-list__arrow_right');
	        var pagesCount = $list.find('.products-list__page').length;
	
	        checkPage($list, 1, pagesCount);
	
	        $arrowLeft.click(function () {
	            return decreasePage($list, pagesCount);
	        });
	        $arrowRight.click(function () {
	            return increasePage($list, pagesCount);
	        });
	    });
	};
	
	exports.default = function () {
	    initProductItems();
	    initProductDetails();
	    initProductLists();
	};

/***/ },
/* 99 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var initMap = function initMap() {
		var wrapper = document.getElementById("map");
		var addressList = [];
		var initialAddress = '';
	
		if (wrapper && typeof google !== 'undefined') {
			var geocoder = new google.maps.Geocoder();
			var map = void 0;
	
			var mapOptions = {
				draggable: !isTouch(),
				scrollwheel: false,
				zoom: 11,
				mapTypeControlOptions: {
					mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'tehgrayz']
				}
			};
	
			map = new google.maps.Map(wrapper, mapOptions);
	
			var ACTIVE_POINT_CLASSNAME = 'contacts-point_active';
			var $points = $('.contacts-point');
			$('.contacts-city').each(function (i, city) {
				var $city = $(city);
				var name = $city.find('.contacts-city__name').text();
	
				$city.find('.contacts-point').each(function (i, point) {
					var $point = $(point);
					var $address = $point.find('.contacts-point__address');
					var address = name + ' ' + $address.text();
					var isActive = $point.hasClass(ACTIVE_POINT_CLASSNAME);
	
					addressList.push(address);
	
					if (isActive) {
						initialAddress = address;
					}
	
					geocoder.geocode({ address: address }, function (results) {
						if (results.length === 0) return;
	
						var position = results[0].geometry.location;
						var marker = new google.maps.Marker({
							map: map,
							position: position,
							icon: new google.maps.MarkerImage('/assets/images/marker.svg', null, null, null, new google.maps.Size(20, 30))
						});
	
						$address.click(function () {
							map.panTo(marker.getPosition());
							$points.removeClass(ACTIVE_POINT_CLASSNAME);
							$point.addClass(ACTIVE_POINT_CLASSNAME);
						});
	
						if (isActive) {
							map.setCenter(marker.getPosition());
						}
					});
				});
			});
	
			var stylez = [{
				featureType: "all",
				elementType: "all",
				stylers: [{ saturation: -100 }]
			}];
	
			var mapType = new google.maps.StyledMapType(stylez, { name: "Grayscale" });
			map.mapTypes.set('tehgrayz', mapType);
			map.setMapTypeId('tehgrayz');
		}
	
		function isTouch() {
			return 'ontouchstart' in window || navigator.maxTouchPoints;
		}
	};
	
	exports.default = initMap;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _promise = __webpack_require__(101);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _constants = __webpack_require__(112);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FINISHED_CLASSNAME = 'index-screen__video_finished';
	
	if ($(window).width() > _constants.IPAD_WIDTH) {
	    $('.index-screen .screen__inner').append('\n        <video id="video" class="index-screen__video" autoplay loop>\n            <source src="https://popsnn.ru/assets/video/index.ogv" type="video/ogg; codecs=\'theora, vorbis\'" />\n            <source src="https://popsnn.ru/assets/video/index.webm" type="video/webm" />\n            <source src="https://popsnn.ru/assets/video/index.mp4" type="video/mp4" />\n        </video>\n    ');
	}
	
	var video = document.getElementById('video');
	
	var finishVideo = function finishVideo() {
	    video.className += ' ' + FINISHED_CLASSNAME;
	};
	
	var isLoaded = false;
	var onLoadedData = function onLoadedData() {
	    video.play();
	    isLoaded = true;
	};
	var onVideoEnded = function onVideoEnded() {
	    // finishVideo();
	};
	var onVideoError = function onVideoError() {
	    finishVideo();
	    isLoaded = true;
	};
	
	var checkIsVideoLoaded = function checkIsVideoLoaded(onLoaded) {
	    if (isLoaded) {
	        onLoaded();
	    }
	    window.setTimeout(function () {
	        return checkIsVideoLoaded(onLoaded);
	    }, 200);
	};
	
	var checkIsVideoPlaying = function checkIsVideoPlaying() {
	    window.setTimeout(function () {
	        if (video.paused) {
	            video.play();
	        }
	        checkIsVideoPlaying();
	    }, 200);
	};
	
	exports.default = function () {
	    if (video !== null) {
	        video.addEventListener('loadeddata', onLoadedData);
	        video.addEventListener('ended', onVideoEnded);
	        video.addEventListener('error', onVideoError);
	        video.addEventListener('canplay', checkIsVideoPlaying);
	        return new _promise2.default(function (resolve) {
	            window.setTimeout(function () {
	                return checkIsVideoLoaded(resolve);
	            }, 200);
	        });
	    } else {
	        return _promise2.default.resolve();
	    }
	};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(102), __esModule: true };

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(83);
	__webpack_require__(4);
	__webpack_require__(65);
	__webpack_require__(103);
	module.exports = __webpack_require__(12).Promise;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(9)
	  , global             = __webpack_require__(11)
	  , ctx                = __webpack_require__(13)
	  , classof            = __webpack_require__(53)
	  , $export            = __webpack_require__(10)
	  , isObject           = __webpack_require__(18)
	  , aFunction          = __webpack_require__(14)
	  , anInstance         = __webpack_require__(104)
	  , forOf              = __webpack_require__(105)
	  , speciesConstructor = __webpack_require__(106)
	  , task               = __webpack_require__(107).set
	  , microtask          = __webpack_require__(109)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(45)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(110)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(44)($Promise, PROMISE);
	__webpack_require__(111)(PROMISE);
	Wrapper = __webpack_require__(12)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(54)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 104 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(13)
	  , call        = __webpack_require__(49)
	  , isArrayIter = __webpack_require__(50)
	  , anObject    = __webpack_require__(17)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(52)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(17)
	  , aFunction = __webpack_require__(14)
	  , SPECIES   = __webpack_require__(45)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(13)
	  , invoke             = __webpack_require__(108)
	  , html               = __webpack_require__(43)
	  , cel                = __webpack_require__(22)
	  , global             = __webpack_require__(11)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(35)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 108 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(11)
	  , macrotask = __webpack_require__(107).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(35)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(15);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(11)
	  , core        = __webpack_require__(12)
	  , dP          = __webpack_require__(16)
	  , DESCRIPTORS = __webpack_require__(20)
	  , SPECIES     = __webpack_require__(45)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var IPAD_WIDTH = exports.IPAD_WIDTH = 1024 + 216;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _constants = __webpack_require__(112);
	
	var $window = $(window);
	
	exports.default = function () {
	  return $window.width() <= _constants.IPAD_WIDTH;
	};

/***/ },
/* 114 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = animate;
	function animate(draw, duration) {
		var start = performance.now();
	
		requestAnimationFrame(function animate(time) {
			// определить, сколько прошло времени с начала анимации
			var timePassed = time - start;
	
			// возможно небольшое превышение времени, в этом случае зафиксировать конец
			if (timePassed > duration) timePassed = duration;
	
			var progress = timePassed / duration;
	
			// нарисовать состояние анимации в момент timePassed
			draw(progress);
	
			// если время анимации не закончилось - запланировать ещё кадр
			if (timePassed < duration) {
				requestAnimationFrame(animate);
			}
		});
	}

/***/ },
/* 115 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var WHITE = exports.WHITE = 'white';
	var BLACK = exports.BLACK = 'black';
	var invert = exports.invert = function invert(color) {
	  return color === WHITE ? BLACK : WHITE;
	};

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _Screen = __webpack_require__(117);
	
	var _Screen2 = _interopRequireDefault(_Screen);
	
	var _FixedElement = __webpack_require__(141);
	
	var _FixedElement2 = _interopRequireDefault(_FixedElement);
	
	var _isIpad = __webpack_require__(113);
	
	var _isIpad2 = _interopRequireDefault(_isIpad);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var currentScrollPosition = new _FixedElement2.default($(window), .9);
	var topScrollPosition = new _FixedElement2.default($(window), 0.05);
	var bottomScrollPosition = new _FixedElement2.default($(window), 0.95);
	
	var SCREEN_CLASSNAMES = {
	    INDEX: 'index-screen',
	    // PHYLOSOPHY: 'ph-screen',
	    WORKS: 'works-screen',
	    PRICES: 'prices-screen',
	    PRODUCTS: 'products-screen',
	    CONTACTS: 'contacts-screen'
	};
	var SCREENS = ['INDEX',
	// 'PHYLOSOPHY',
	'WORKS', 'PRICES', 'PRODUCTS', 'CONTACTS'];
	
	var Screens = function () {
	    function Screens(_ref) {
	        var _this = this;
	
	        var onCurrentScreenChange = _ref.onCurrentScreenChange,
	            onTouchScreen = _ref.onTouchScreen;
	        (0, _classCallCheck3.default)(this, Screens);
	
	        this.screens = SCREENS.map(function (id) {
	            return _this.createScreen(id);
	        });
	
	        if (!(0, _isIpad2.default)()) {
	            $(window).scroll(function (e) {
	                return _this.onScroll(e);
	            });
	        }
	        this.onCurrentScreenChange = onCurrentScreenChange;
	        this.onTouchScreen = onTouchScreen;
	    }
	
	    (0, _createClass3.default)(Screens, [{
	        key: 'createScreen',
	        value: function createScreen(id) {
	            var className = SCREEN_CLASSNAMES[id];
	            var $screen = $('.' + className);
	            return new _Screen2.default(id, $screen);
	        }
	    }, {
	        key: 'onScroll',
	        value: function onScroll(e) {
	            return;
	            // let currentScreen = this.screens[0];
	            // let touchTop = null;
	            // let touchBottom = null;
	
	            // for (let i = this.screens.length - 1; i >= 0; i--) {
	            //     const screen = this.screens[i];
	            //     if (screen.intersects(currentScrollPosition)) {
	            //         currentScreen = screen;
	            //     }
	            //     if (screen.intersects(topScrollPosition)) {
	            //         touchTop = screen;
	            //     }
	            //     if (screen.intersects(bottomScrollPosition)) {
	            //         touchBottom = screen;
	            //     }
	            // }
	
	            // if (this.currentScreen !== currentScreen)
	            //     this.setCurrentScreen(currentScreen);
	            // if (
	            //     this.currentScreen !== 'INDEX' &&
	            //     touchTop !== null &&
	            //     this.currentScreen !== touchTop &&
	            //     touchTop.id !== 'INDEX'
	            // ) {
	            //     if (typeof this.onTouchScreen === 'function') {
	            //         this.onTouchScreen(touchTop);
	            //     }
	            // }
	            // if (touchBottom !== null && this.currentScreen !== touchBottom && touchBottom.id !== 'PHYLOSOPHY') {
	            //     if (typeof this.onTouchScreen === 'function') {
	            //         this.onTouchScreen(touchBottom);
	            //     }
	            // }
	        }
	    }, {
	        key: 'setCurrentScreen',
	        value: function setCurrentScreen(screen) {
	            if (screen === null) return;
	
	            if (this.currentScreen instanceof _Screen2.default) {
	                this.currentScreen.setCurrent(false);
	            }
	            screen.setCurrent(true);
	
	            this.currentScreen = screen;
	            screen.makeVisited();
	
	            if (typeof this.onCurrentScreenChange === 'function') {
	                this.onCurrentScreenChange(this.currentScreen);
	            }
	        }
	    }]);
	    return Screens;
	}();
	
	exports.default = Screens;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getPrototypeOf = __webpack_require__(118);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(122);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _inherits2 = __webpack_require__(123);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _defineProperty2 = __webpack_require__(131);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _COLOR_CLASSNAMES;
	
	var _BoxElement2 = __webpack_require__(132);
	
	var _BoxElement3 = _interopRequireDefault(_BoxElement2);
	
	var _colors = __webpack_require__(115);
	
	var COLORS = _interopRequireWildcard(_colors);
	
	var _isIpad = __webpack_require__(113);
	
	var _isIpad2 = _interopRequireDefault(_isIpad);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var COLOR_CLASSNAMES = (_COLOR_CLASSNAMES = {}, (0, _defineProperty3.default)(_COLOR_CLASSNAMES, COLORS.BLACK, 'screen_black'), (0, _defineProperty3.default)(_COLOR_CLASSNAMES, COLORS.WHITE, 'screen_white'), _COLOR_CLASSNAMES);
	
	var NOT_VISITED_CLASSNAME = 'screen_not-visited';
	var VISITED_CLASSNAME = 'screen_visited';
	var CURRENT_CLASSNAME = 'screen_current';
	
	var Screen = function (_BoxElement) {
	    (0, _inherits3.default)(Screen, _BoxElement);
	    (0, _createClass3.default)(Screen, null, [{
	        key: 'getInner',
	        value: function getInner($el) {
	            return $el.find('.screen');
	        }
	    }]);
	
	    function Screen(id, $el) {
	        (0, _classCallCheck3.default)(this, Screen);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, (Screen.__proto__ || (0, _getPrototypeOf2.default)(Screen)).call(this, $el.find('.screen'), $el.hasClass('index-screen')));
	
	        _this.id = id;
	        _this.color = _this.getColor();
	        _this.visited = false;
	        _this.progress = 0;
	        // this.$el.addClass(NOT_VISITED_CLASSNAME);
	
	        $(window).resize(function () {
	            return _this.update();
	        });
	        $(window).scroll(function () {
	            if (!(0, _isIpad2.default)()) {
	                _this.updateProgress();
	                if (_this.id === 'INDEX') {
	                    _this.update();
	                }
	            }
	        });
	        return _this;
	    }
	
	    (0, _createClass3.default)(Screen, [{
	        key: 'getInner',
	        value: function getInner() {
	            return Screen.getInner(this.$el);
	        }
	    }, {
	        key: 'getColor',
	        value: function getColor() {
	            return this.$el.hasClass(COLOR_CLASSNAMES[COLORS.BLACK]) ? COLORS.BLACK : COLORS.WHITE;
	        }
	    }, {
	        key: 'makeVisited',
	        value: function makeVisited() {
	            if (!this.visited) {
	                this.$el.removeClass(NOT_VISITED_CLASSNAME);
	                // this.$el.addClass(VISITED_CLASSNAME);
	            }
	            this.visited = true;
	        }
	    }, {
	        key: 'setCurrent',
	        value: function setCurrent(isCurrent) {
	            if (isCurrent) {
	                this.$el.addClass(CURRENT_CLASSNAME);
	            } else {
	                this.$el.removeClass(CURRENT_CLASSNAME);
	            }
	        }
	    }, {
	        key: 'updateProgress',
	        value: function updateProgress() {
	            var $window = $(window);
	            var wTop = $window.scrollTop();
	            var wHeight = window.innerHeight;
	            // const wHeight = $window.height();
	            var wBottom = wTop + wHeight;
	
	            var sHeight = this.coords.bottom - this.coords.top;
	
	            var progress = Math.round(Math.min(Math.max((wBottom - this.coords.top) / sHeight, 0) * 100, 100));
	
	            // if (progress > this.progress) {
	            this.progress = progress;
	            this.$el.attr('data-progress', progress);
	            // }
	        }
	    }]);
	    return Screen;
	}(_BoxElement3.default);
	
	exports.default = Screen;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(119), __esModule: true };

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(120);
	module.exports = __webpack_require__(12).Object.getPrototypeOf;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(47)
	  , $getPrototypeOf = __webpack_require__(46);
	
	__webpack_require__(121)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(10)
	  , core    = __webpack_require__(12)
	  , fails   = __webpack_require__(21);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(62);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(124);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(128);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(62);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(125), __esModule: true };

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(126);
	module.exports = __webpack_require__(12).Object.setPrototypeOf;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(10);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(127).set});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(18)
	  , anObject = __webpack_require__(17);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(13)(Function.call, __webpack_require__(82).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(129), __esModule: true };

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(130);
	var $Object = __webpack_require__(12).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(29)});

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(95);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _getPrototypeOf = __webpack_require__(118);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _slicedToArray2 = __webpack_require__(133);
	
	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(122);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _inherits2 = __webpack_require__(123);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Box2 = __webpack_require__(140);
	
	var _Box3 = _interopRequireDefault(_Box2);
	
	var _isIpad = __webpack_require__(113);
	
	var _isIpad2 = _interopRequireDefault(_isIpad);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var $window = $(window);
	
	// !!! only `transform-origin center top` allowed
	
	var getSize = function getSize($el) {
		return [$el.width(), $el.height() + parseFloat($el.css('padding-top')) + parseFloat($el.css('padding-bottom'))];
	};
	
	var getScale = function getScale($el) {
		var transform = $el.css('transform');
		if (typeof transform === 'undefined') {
			return [1, 1];
		}
	
		var matrix = transform.match(/[0-9\.]+/gi);
	
		if (matrix instanceof Array && matrix.length >= 4) {
			return [parseFloat(matrix[0]), parseFloat(matrix[3])];
		}
	
		return [1, 1];
	};
	
	var BoxElement = function (_Box) {
		(0, _inherits3.default)(BoxElement, _Box);
		(0, _createClass3.default)(BoxElement, null, [{
			key: 'getCoords',
			value: function getCoords($el) {
				var _getScale = getScale($el),
				    _getScale2 = (0, _slicedToArray3.default)(_getScale, 2),
				    scaleX = _getScale2[0],
				    scaleY = _getScale2[1];
	
				var _getSize = getSize($el),
				    _getSize2 = (0, _slicedToArray3.default)(_getSize, 2),
				    width = _getSize2[0],
				    height = _getSize2[1];
	
				var offset = BoxElement.getOffset($el);
	
				var top = offset.top;
				var bottom = top + height * scaleY;
				var left = offset.left;
				var right = left + width * scaleX;
	
				return { top: top, right: right, bottom: bottom, left: left };
			}
		}, {
			key: 'getOffset',
			value: function getOffset($el) {
				return $el.offset();
			}
		}, {
			key: 'translate',
			value: function translate($el, _ref) {
				var left = _ref.left,
				    top = _ref.top;
	
				$el.css('transform', 'translate(' + left + 'px, ' + top + 'px)');
			}
		}, {
			key: 'setSize',
			value: function setSize($el, _ref2) {
				var width = _ref2.width,
				    height = _ref2.height;
	
				$el.css({ width: width, height: height });
			}
		}]);
	
		function BoxElement($el, forceTop) {
			(0, _classCallCheck3.default)(this, BoxElement);
	
			var _this = (0, _possibleConstructorReturn3.default)(this, (BoxElement.__proto__ || (0, _getPrototypeOf2.default)(BoxElement)).call(this, BoxElement.getCoords($el)));
	
			_this.$el = $el;
			_this.$children = $el.children();
	
			$(window).scroll(function () {
				if (!(0, _isIpad2.default)() && $el.css('position') === 'fixed') {
					_this.update();
				}
			});
			return _this;
		}
	
		(0, _createClass3.default)(BoxElement, [{
			key: 'update',
			value: function update() {
				this.setCoords(BoxElement.getCoords(this.$el));
			}
		}, {
			key: 'translate',
			value: function translate(_ref3) {
				var left = _ref3.left,
				    top = _ref3.top;
	
				BoxElement.translate(this.$el, { left: left, top: top });
			}
		}, {
			key: 'translateChildren',
			value: function translateChildren(_ref4) {
				var left = _ref4.left,
				    top = _ref4.top;
	
				BoxElement.translate(this.$children, { left: left, top: top });
			}
		}, {
			key: 'setSize',
			value: function setSize(_ref5) {
				var width = _ref5.width,
				    height = _ref5.height;
	
				BoxElement.setSize(this.$el, { width: width, height: height });
			}
		}, {
			key: 'setChildrenSize',
			value: function setChildrenSize(_ref6) {
				var width = _ref6.width,
				    height = _ref6.height;
	
				BoxElement.setSize(this.$children, { width: width, height: height });
			}
		}, {
			key: 'hide',
			value: function hide() {
				this.$el.hide();
			}
		}, {
			key: 'show',
			value: function show() {
				this.$el.show();
			}
		}, {
			key: 'coords',
			get: function get() {
				return BoxElement.getCoords(this.$el);
			},
			set: function set(coords) {
				this._coords = coords;
			}
		}]);
		return BoxElement;
	}(_Box3.default);
	
	exports.default = BoxElement;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _isIterable2 = __webpack_require__(134);
	
	var _isIterable3 = _interopRequireDefault(_isIterable2);
	
	var _getIterator2 = __webpack_require__(137);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;
	
	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);
	
	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }
	
	    return _arr;
	  }
	
	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(135), __esModule: true };

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(65);
	__webpack_require__(4);
	module.exports = __webpack_require__(136);

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(53)
	  , ITERATOR  = __webpack_require__(45)('iterator')
	  , Iterators = __webpack_require__(27);
	module.exports = __webpack_require__(12).isIterable = function(it){
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    || Iterators.hasOwnProperty(classof(O));
	};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(138), __esModule: true };

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(65);
	__webpack_require__(4);
	module.exports = __webpack_require__(139);

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(17)
	  , get      = __webpack_require__(52);
	module.exports = __webpack_require__(12).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Box = function () {
		function Box(coords) {
			(0, _classCallCheck3.default)(this, Box);
	
			this.setCoords(coords);
		}
	
		(0, _createClass3.default)(Box, [{
			key: "setCoords",
			value: function setCoords(coords) {
				this.coords = coords;
			}
		}, {
			key: "getWidth",
			value: function getWidth() {
				return this.coords.right - this.coords.left;
			}
		}, {
			key: "getHeight",
			value: function getHeight() {
				return this.coords.bottom - this.coords.top;
			}
		}, {
			key: "intersects",
			value: function intersects(box) {
				var interX = this.coords.left < box.coords.right && this.coords.right > box.coords.left;
				var interY = this.coords.top < box.coords.bottom && this.coords.bottom > box.coords.top;
	
				return interX && interY;
			}
		}, {
			key: "getIntersection",
			value: function getIntersection(box) {
				if (!this.intersects(box)) {
					return null;
				}
	
				var top = Math.max(this.coords.top, box.coords.top);
				var right = Math.min(this.coords.right, box.coords.right);
				var bottom = Math.min(this.coords.bottom, box.coords.bottom);
				var left = Math.max(this.coords.left, box.coords.left);
	
				return new Box({ top: top, right: right, bottom: bottom, left: left });
			}
		}, {
			key: "cutBox",
			value: function cutBox(box) {
				if (!this.intersects(box)) {
					return [];
				}
	
				var top = null;
				var right = null;
				var bottom = null;
				var left = null;
	
				// top part
				if (this.coords.top < box.coords.top) {
					top = new Box({
						top: this.coords.top,
						right: this.coords.right,
						bottom: box.coords.top,
						left: this.coords.left
					});
				}
	
				// bottom part
				if (this.coords.bottom > box.coords.bottom) {
					bottom = new Box({
						top: box.coords.bottom,
						right: this.coords.right,
						bottom: this.coords.bottom,
						left: this.coords.left
					});
				}
	
				// right part
				if (this.coords.right > box.coords.right) {
					right = new Box({
						top: top === null ? this.coords.top : top.coords.bottom,
						right: this.coords.right,
						bottom: bottom === null ? this.coords.bottom : bottom.coords.top,
						left: box.coords.right
					});
				}
	
				// left part
				if (this.coords.left < box.coords.left) {
					left = new Box({
						top: top === null ? this.coords.top : top.coords.bottom,
						right: box.coords.left,
						bottom: bottom === null ? this.coords.bottom : bottom.coords.top,
						left: this.coords.left
					});
				}
	
				var result = [top, right, bottom, left].filter(function (box) {
					return box !== null;
				});
	
				return result;
			}
		}]);
		return Box;
	}();
	
	exports.default = Box;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getPrototypeOf = __webpack_require__(118);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(122);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(123);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Box2 = __webpack_require__(140);
	
	var _Box3 = _interopRequireDefault(_Box2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FixedElement = function (_Box) {
	    (0, _inherits3.default)(FixedElement, _Box);
	
	    function FixedElement($container, offset) {
	        (0, _classCallCheck3.default)(this, FixedElement);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, (FixedElement.__proto__ || (0, _getPrototypeOf2.default)(FixedElement)).call(this, {
	            top: 0,
	            left: 0,
	            right: 0,
	            bottom: 0
	        }));
	
	        _this.$container = $container;
	        _this.offset = offset;
	
	        $container.scroll(function () {
	            return _this.onScroll();
	        });
	        return _this;
	    }
	
	    (0, _createClass3.default)(FixedElement, [{
	        key: 'onScroll',
	        value: function onScroll() {
	            var scrollTop = this.$container.scrollTop();
	            var containerHeight = this.$container[0].innerHeight;
	
	            var top = scrollTop + containerHeight * this.offset;
	
	            this.setCoords({
	                left: 0,
	                right: this.$container.width(),
	                top: top,
	                bottom: top
	            });
	        }
	    }]);
	    return FixedElement;
	}(_Box3.default);
	
	exports.default = FixedElement;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getPrototypeOf = __webpack_require__(118);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(122);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(123);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _BoxElement2 = __webpack_require__(132);
	
	var _BoxElement3 = _interopRequireDefault(_BoxElement2);
	
	var _colors = __webpack_require__(115);
	
	var COLORS = _interopRequireWildcard(_colors);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Invertor = function (_BoxElement) {
	    (0, _inherits3.default)(Invertor, _BoxElement);
	
	    function Invertor($container) {
	        (0, _classCallCheck3.default)(this, Invertor);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, (Invertor.__proto__ || (0, _getPrototypeOf2.default)(Invertor)).call(this, $container));
	
	        _this.color = _this.getColor();
	        return _this;
	    }
	
	    (0, _createClass3.default)(Invertor, [{
	        key: 'getColor',
	        value: function getColor() {
	            return COLORS.WHITE;
	        }
	    }]);
	    return Invertor;
	}(_BoxElement3.default);
	
	exports.default = Invertor;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _set = __webpack_require__(144);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _BWElement = __webpack_require__(155);
	
	var _BWElement2 = _interopRequireDefault(_BWElement);
	
	var _colors = __webpack_require__(115);
	
	var COLORS = _interopRequireWildcard(_colors);
	
	var _constants = __webpack_require__(112);
	
	var _Invertor = __webpack_require__(142);
	
	var _Invertor2 = _interopRequireDefault(_Invertor);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BWElements = function () {
	    function BWElements($container) {
	        var _this = this;
	
	        (0, _classCallCheck3.default)(this, BWElements);
	
	        var $els = $container.find('.' + _BWElement2.default.CLASSNAME);
	
	        this.elements = [];
	
	        $els.each(function (index, el) {
	            var $el = $(el);
	            _this.elements.push(new _BWElement2.default($el));
	        });
	    }
	
	    (0, _createClass3.default)(BWElements, [{
	        key: 'apply',
	        value: function apply(screens) {
	            var _this2 = this;
	
	            var applied = new _set2.default();
	
	            var _loop = function _loop(i) {
	                var screen = screens[i];
	                if (screen.color === COLORS.BLACK || screen instanceof _Invertor2.default) {
	                    _this2.elements.forEach(function (element) {
	                        if (applied.has(element)) return;
	
	                        if (element.intersects(screen)) {
	                            element.apply(screen);
	                            applied.add(element);
	                        } else {
	                            element.restore();
	                        }
	                    });
	                }
	            };
	
	            for (var i = screens.length - 1; i >= 0; i--) {
	                _loop(i);
	            }
	        }
	    }]);
	    return BWElements;
	}();
	
	exports.default = BWElements;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(145), __esModule: true };

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(83);
	__webpack_require__(4);
	__webpack_require__(65);
	__webpack_require__(146);
	__webpack_require__(152);
	module.exports = __webpack_require__(12).Set;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(147);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(148)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(16).f
	  , create      = __webpack_require__(29)
	  , redefineAll = __webpack_require__(110)
	  , ctx         = __webpack_require__(13)
	  , anInstance  = __webpack_require__(104)
	  , defined     = __webpack_require__(7)
	  , forOf       = __webpack_require__(105)
	  , $iterDefine = __webpack_require__(8)
	  , step        = __webpack_require__(68)
	  , setSpecies  = __webpack_require__(111)
	  , DESCRIPTORS = __webpack_require__(20)
	  , fastKey     = __webpack_require__(73).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(11)
	  , $export        = __webpack_require__(10)
	  , meta           = __webpack_require__(73)
	  , fails          = __webpack_require__(21)
	  , hide           = __webpack_require__(15)
	  , redefineAll    = __webpack_require__(110)
	  , forOf          = __webpack_require__(105)
	  , anInstance     = __webpack_require__(104)
	  , isObject       = __webpack_require__(18)
	  , setToStringTag = __webpack_require__(44)
	  , dP             = __webpack_require__(16).f
	  , each           = __webpack_require__(149)(0)
	  , DESCRIPTORS    = __webpack_require__(20);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    C = wrapper(function(target, iterable){
	      anInstance(target, C, NAME, '_c');
	      target._c = new Base;
	      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
	        anInstance(this, C, KEY);
	        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    if('size' in proto)dP(C.prototype, 'size', {
	      get: function(){
	        return this._c.size;
	      }
	    });
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(13)
	  , IObject  = __webpack_require__(34)
	  , toObject = __webpack_require__(47)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(150);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(151);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18)
	  , isArray  = __webpack_require__(79)
	  , SPECIES  = __webpack_require__(45)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(10);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(153)('Set')});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(53)
	  , from    = __webpack_require__(154);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(105);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getPrototypeOf = __webpack_require__(118);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(94);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(122);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(123);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _BoxElement2 = __webpack_require__(132);
	
	var _BoxElement3 = _interopRequireDefault(_BoxElement2);
	
	var _colors = __webpack_require__(115);
	
	var COLORS = _interopRequireWildcard(_colors);
	
	var _isIpad = __webpack_require__(113);
	
	var _isIpad2 = _interopRequireDefault(_isIpad);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// white by default
	
	var childrenize = function childrenize(block, size) {
	    block.setChildrenSize(size);
	    block.$children.css({
	        position: 'absolute',
	        left: 0,
	        top: 0
	    });
	};
	
	var BWElement = function (_BoxElement) {
	    (0, _inherits3.default)(BWElement, _BoxElement);
	
	    function BWElement($el) {
	        (0, _classCallCheck3.default)(this, BWElement);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, (BWElement.__proto__ || (0, _getPrototypeOf2.default)(BWElement)).call(this, $el));
	
	        _this.transparent = new _BoxElement3.default($el.find('.bw__transparent'));
	
	        var blackEl = new _BoxElement3.default($el.find('.bw__black'));
	        var whiteEl = new _BoxElement3.default($el.find('.bw__white'));
	        if (!(0, _isIpad2.default)()) {
	            childrenize(blackEl, _this.getSize());
	            childrenize(whiteEl, _this.getSize());
	            whiteEl.setSize(_this.getSize());
	        } else {
	            // const autoSize = {
	            //     width: 'auto',
	            //     height: 'auto',
	            // };
	            // childrenize(blackEl, autoSize);
	            // childrenize(whiteEl, autoSize);
	            // whiteEl.setSize(autoSize);
	        }
	
	        _this.black = [blackEl];
	        _this.white = [whiteEl];
	
	        _this.restored = true;
	        return _this;
	    }
	
	    (0, _createClass3.default)(BWElement, [{
	        key: 'apply',
	        value: function apply(screen) {
	            this.restored = false;
	
	            // to inverse screen color
	            var inter = this.getIntersection(screen);
	            // to screen color
	            var boxes = inter !== null ? this.cutBox(inter) : [this];
	
	            if (screen.color === COLORS.BLACK) {
	                if (inter) this.setWhiteBoxes([inter]);
	                this.setBlackBoxes(boxes);
	            } else {
	                if (inter) this.setBlackBoxes([inter]);
	                this.setWhiteBoxes(boxes);
	            }
	        }
	    }, {
	        key: 'restore',
	        value: function restore() {
	            if (this.restored) return;
	
	            this.restored = true;
	            this.setBoxes(COLORS.BLACK, [this]);
	        }
	    }, {
	        key: 'getSize',
	        value: function getSize() {
	            return {
	                width: this.transparent.getWidth(),
	                height: this.transparent.getHeight()
	            };
	        }
	    }, {
	        key: 'setBoxes',
	        value: function setBoxes(color, boxes) {
	            var _this2 = this;
	
	            boxes.forEach(function (box, index) {
	                var boxElement = _this2[color][index];
	                if (typeof boxElement === 'undefined') {
	                    var $el = _this2[color][0].$el.clone();
	                    boxElement = new _BoxElement3.default($el);
	
	                    var childrenSize = _this2.getSize();
	
	                    childrenize(boxElement, childrenSize);
	
	                    _this2[color].push(boxElement);
	
	                    _this2.$el.append($el);
	                }
	
	                var size = {
	                    width: box.getWidth(),
	                    height: box.getHeight()
	                };
	                var translate = {
	                    left: box.coords.left - _this2.coords.left,
	                    top: box.coords.top - _this2.coords.top
	                };
	                var translateChildren = {
	                    left: -translate.left,
	                    top: -translate.top
	                };
	
	                boxElement.setSize(size);
	                boxElement.translate(translate);
	                boxElement.translateChildren(translateChildren);
	                boxElement.show();
	            });
	
	            for (var i = boxes.length; i < this[color].length; i++) {
	                var boxElement = this[color][i];
	                boxElement.hide();
	            }
	        }
	    }, {
	        key: 'setWhiteBoxes',
	        value: function setWhiteBoxes(boxes) {
	            this.setBoxes('white', boxes);
	        }
	    }, {
	        key: 'setBlackBoxes',
	        value: function setBlackBoxes(boxes) {
	            this.setBoxes('black', boxes);
	        }
	    }]);
	    return BWElement;
	}(_BoxElement3.default);
	
	BWElement.CLASSNAME = 'bw';
	exports.default = BWElement;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*!
	 * jQuery Mousewheel 3.1.13
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 */
	
	(function (factory) {
	    if ( typeof define === 'function' && define.amd ) {
	        // AMD. Register as an anonymous module.
	        define(['jquery'], factory);
	    } else if (true) {
	        // Node/CommonJS style for Browserify
	        module.exports = factory;
	    } else {
	        // Browser globals
	        factory(jQuery);
	    }
	}(function ($) {
	
	    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
	        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
	                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
	        slice  = Array.prototype.slice,
	        nullLowestDeltaTimeout, lowestDelta;
	
	    if ( $.event.fixHooks ) {
	        for ( var i = toFix.length; i; ) {
	            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
	        }
	    }
	
	    var special = $.event.special.mousewheel = {
	        version: '3.1.12',
	
	        setup: function() {
	            if ( this.addEventListener ) {
	                for ( var i = toBind.length; i; ) {
	                    this.addEventListener( toBind[--i], handler, false );
	                }
	            } else {
	                this.onmousewheel = handler;
	            }
	            // Store the line height and page height for this particular element
	            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
	            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
	        },
	
	        teardown: function() {
	            if ( this.removeEventListener ) {
	                for ( var i = toBind.length; i; ) {
	                    this.removeEventListener( toBind[--i], handler, false );
	                }
	            } else {
	                this.onmousewheel = null;
	            }
	            // Clean up the data we added to the element
	            $.removeData(this, 'mousewheel-line-height');
	            $.removeData(this, 'mousewheel-page-height');
	        },
	
	        getLineHeight: function(elem) {
	            var $elem = $(elem),
	                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
	            if (!$parent.length) {
	                $parent = $('body');
	            }
	            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
	        },
	
	        getPageHeight: function(elem) {
	            return $(elem).height();
	        },
	
	        settings: {
	            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
	            normalizeOffset: true  // calls getBoundingClientRect for each event
	        }
	    };
	
	    $.fn.extend({
	        mousewheel: function(fn) {
	            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
	        },
	
	        unmousewheel: function(fn) {
	            return this.unbind('mousewheel', fn);
	        }
	    });
	
	
	    function handler(event) {
	        var orgEvent   = event || window.event,
	            args       = slice.call(arguments, 1),
	            delta      = 0,
	            deltaX     = 0,
	            deltaY     = 0,
	            absDelta   = 0,
	            offsetX    = 0,
	            offsetY    = 0;
	        event = $.event.fix(orgEvent);
	        event.type = 'mousewheel';
	
	        // Old school scrollwheel delta
	        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
	        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
	        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
	        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }
	
	        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
	            deltaX = deltaY * -1;
	            deltaY = 0;
	        }
	
	        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
	        delta = deltaY === 0 ? deltaX : deltaY;
	
	        // New school wheel delta (wheel event)
	        if ( 'deltaY' in orgEvent ) {
	            deltaY = orgEvent.deltaY * -1;
	            delta  = deltaY;
	        }
	        if ( 'deltaX' in orgEvent ) {
	            deltaX = orgEvent.deltaX;
	            if ( deltaY === 0 ) { delta  = deltaX * -1; }
	        }
	
	        // No change actually happened, no reason to go any further
	        if ( deltaY === 0 && deltaX === 0 ) { return; }
	
	        // Need to convert lines and pages to pixels if we aren't already in pixels
	        // There are three delta modes:
	        //   * deltaMode 0 is by pixels, nothing to do
	        //   * deltaMode 1 is by lines
	        //   * deltaMode 2 is by pages
	        if ( orgEvent.deltaMode === 1 ) {
	            var lineHeight = $.data(this, 'mousewheel-line-height');
	            delta  *= lineHeight;
	            deltaY *= lineHeight;
	            deltaX *= lineHeight;
	        } else if ( orgEvent.deltaMode === 2 ) {
	            var pageHeight = $.data(this, 'mousewheel-page-height');
	            delta  *= pageHeight;
	            deltaY *= pageHeight;
	            deltaX *= pageHeight;
	        }
	
	        // Store lowest absolute delta to normalize the delta values
	        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );
	
	        if ( !lowestDelta || absDelta < lowestDelta ) {
	            lowestDelta = absDelta;
	
	            // Adjust older deltas if necessary
	            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
	                lowestDelta /= 40;
	            }
	        }
	
	        // Adjust older deltas if necessary
	        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
	            // Divide all the things by 40!
	            delta  /= 40;
	            deltaX /= 40;
	            deltaY /= 40;
	        }
	
	        // Get a whole, normalized value for the deltas
	        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
	        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
	        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);
	
	        // Normalise offsetX and offsetY properties
	        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
	            var boundingRect = this.getBoundingClientRect();
	            offsetX = event.clientX - boundingRect.left;
	            offsetY = event.clientY - boundingRect.top;
	        }
	
	        // Add information to the event object
	        event.deltaX = deltaX;
	        event.deltaY = deltaY;
	        event.deltaFactor = lowestDelta;
	        event.offsetX = offsetX;
	        event.offsetY = offsetY;
	        // Go ahead and set deltaMode to 0 since we converted to pixels
	        // Although this is a little odd since we overwrite the deltaX/Y
	        // properties with normalized deltas.
	        event.deltaMode = 0;
	
	        // Add event and delta to the front of the arguments
	        args.unshift(event, delta, deltaX, deltaY);
	
	        // Clearout lowestDelta after sometime to better
	        // handle multiple device types that give different
	        // a different lowestDelta
	        // Ex: trackpad = 3 and mouse wheel = 120
	        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
	        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
	
	        return ($.event.dispatch || $.event.handle).apply(this, args);
	    }
	
	    function nullLowestDelta() {
	        lowestDelta = null;
	    }
	
	    function shouldAdjustOldDeltas(orgEvent, absDelta) {
	        // If this is an older event and the delta is divisable by 120,
	        // then we are assuming that the browser is treating this as an
	        // older mouse wheel event and that we should divide the deltas
	        // by 40 to try and get a more usable deltaFactor.
	        // Side note, this actually impacts the reported scroll distance
	        // in older browsers and can cause scrolling to be slower than native.
	        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
	        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
	    }
	
	}));
	
	}.call(window));

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	(function() {
	
	/*
	== malihu jquery custom scrollbar plugin == 
	Version: 3.1.5 
	Plugin URI: http://manos.malihu.gr/jquery-custom-content-scroller 
	Author: malihu
	Author URI: http://manos.malihu.gr
	License: MIT License (MIT)
	*/
	
	/*
	Copyright Manos Malihutsakis (email: manos@malihu.gr)
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/
	
	/*
	The code below is fairly long, fully commented and should be normally used in development. 
	For production, use either the minified jquery.mCustomScrollbar.min.js script or 
	the production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin 
	and dependencies (minified). 
	*/
	
	(function(factory){
		if(typeof define==="function" && define.amd){
			define(["jquery"],factory);
		}else if(typeof module!=="undefined" && module.exports){
			module.exports=factory;
		}else{
			factory(jQuery,window,document);
		}
	}(function($){
	(function(init){
		var _rjs=typeof define==="function" && define.amd, /* RequireJS */
			_njs=typeof module !== "undefined" && module.exports, /* NodeJS */
			_dlp=("https:"==document.location.protocol) ? "https:" : "http:", /* location protocol */
			_url="cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
		if(!_rjs){
			if(_njs){
				__webpack_require__(156)($);
			}else{
				/* load jquery-mousewheel plugin (via CDN) if it's not present or not loaded via RequireJS 
				(works when mCustomScrollbar fn is called on window load) */
				$.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src="+_dlp+"//"+_url+"%3E%3C/script%3E"));
			}
		}
		init();
	}(function(){
		
		/* 
		----------------------------------------
		PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) 
		----------------------------------------
		*/
		
		var pluginNS="mCustomScrollbar",
			pluginPfx="mCS",
			defaultSelector=".mCustomScrollbar",
		
		
			
		
		
		/* 
		----------------------------------------
		DEFAULT OPTIONS 
		----------------------------------------
		*/
		
			defaults={
				/*
				set element/content width/height programmatically 
				values: boolean, pixels, percentage 
					option						default
					-------------------------------------
					setWidth					false
					setHeight					false
				*/
				/*
				set the initial css top property of content  
				values: string (e.g. "-100px", "10%" etc.)
				*/
				setTop:0,
				/*
				set the initial css left property of content  
				values: string (e.g. "-100px", "10%" etc.)
				*/
				setLeft:0,
				/* 
				scrollbar axis (vertical and/or horizontal scrollbars) 
				values (string): "y", "x", "yx"
				*/
				axis:"y",
				/*
				position of scrollbar relative to content  
				values (string): "inside", "outside" ("outside" requires elements with position:relative)
				*/
				scrollbarPosition:"inside",
				/*
				scrolling inertia
				values: integer (milliseconds)
				*/
				scrollInertia:950,
				/* 
				auto-adjust scrollbar dragger length
				values: boolean
				*/
				autoDraggerLength:true,
				/*
				auto-hide scrollbar when idle 
				values: boolean
					option						default
					-------------------------------------
					autoHideScrollbar			false
				*/
				/*
				auto-expands scrollbar on mouse-over and dragging
				values: boolean
					option						default
					-------------------------------------
					autoExpandScrollbar			false
				*/
				/*
				always show scrollbar, even when there's nothing to scroll 
				values: integer (0=disable, 1=always show dragger rail and buttons, 2=always show dragger rail, dragger and buttons), boolean
				*/
				alwaysShowScrollbar:0,
				/*
				scrolling always snaps to a multiple of this number in pixels
				values: integer, array ([y,x])
					option						default
					-------------------------------------
					snapAmount					null
				*/
				/*
				when snapping, snap with this number in pixels as an offset 
				values: integer
				*/
				snapOffset:0,
				/* 
				mouse-wheel scrolling
				*/
				mouseWheel:{
					/* 
					enable mouse-wheel scrolling
					values: boolean
					*/
					enable:true,
					/* 
					scrolling amount in pixels
					values: "auto", integer 
					*/
					scrollAmount:"auto",
					/* 
					mouse-wheel scrolling axis 
					the default scrolling direction when both vertical and horizontal scrollbars are present 
					values (string): "y", "x" 
					*/
					axis:"y",
					/* 
					prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached 
					values: boolean
						option						default
						-------------------------------------
						preventDefault				null
					*/
					/*
					the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  
					values: "auto", integer 
					"auto" uses the default OS/browser value 
					*/
					deltaFactor:"auto",
					/*
					normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) 
					values: boolean
						option						default
						-------------------------------------
						normalizeDelta				null
					*/
					/*
					invert mouse-wheel scrolling direction 
					values: boolean
						option						default
						-------------------------------------
						invert						null
					*/
					/*
					the tags that disable mouse-wheel when cursor is over them
					*/
					disableOver:["select","option","keygen","datalist","textarea"]
				},
				/* 
				scrollbar buttons
				*/
				scrollButtons:{ 
					/*
					enable scrollbar buttons
					values: boolean
						option						default
						-------------------------------------
						enable						null
					*/
					/*
					scrollbar buttons scrolling type 
					values (string): "stepless", "stepped"
					*/
					scrollType:"stepless",
					/*
					scrolling amount in pixels
					values: "auto", integer 
					*/
					scrollAmount:"auto"
					/*
					tabindex of the scrollbar buttons
					values: false, integer
						option						default
						-------------------------------------
						tabindex					null
					*/
				},
				/* 
				keyboard scrolling
				*/
				keyboard:{ 
					/*
					enable scrolling via keyboard
					values: boolean
					*/
					enable:true,
					/*
					keyboard scrolling type 
					values (string): "stepless", "stepped"
					*/
					scrollType:"stepless",
					/*
					scrolling amount in pixels
					values: "auto", integer 
					*/
					scrollAmount:"auto"
				},
				/*
				enable content touch-swipe scrolling 
				values: boolean, integer, string (number)
				integer values define the axis-specific minimum amount required for scrolling momentum
				*/
				contentTouchScroll:25,
				/*
				enable/disable document (default) touch-swipe scrolling 
				*/
				documentTouchScroll:true,
				/*
				advanced option parameters
				*/
				advanced:{
					/*
					auto-expand content horizontally (for "x" or "yx" axis) 
					values: boolean, integer (the value 2 forces the non scrollHeight/scrollWidth method, the value 3 forces the scrollHeight/scrollWidth method)
						option						default
						-------------------------------------
						autoExpandHorizontalScroll	null
					*/
					/*
					auto-scroll to elements with focus
					*/
					autoScrollOnFocus:"input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
					/*
					auto-update scrollbars on content, element or viewport resize 
					should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. 
					values: boolean
					*/
					updateOnContentResize:true,
					/*
					auto-update scrollbars each time each image inside the element is fully loaded 
					values: "auto", boolean
					*/
					updateOnImageLoad:"auto",
					/*
					auto-update scrollbars based on the amount and size changes of specific selectors 
					useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size 
					values: boolean, string (e.g. "ul li" will auto-update scrollbars each time list-items inside the element are changed) 
					a value of true (boolean) will auto-update scrollbars each time any element is changed
						option						default
						-------------------------------------
						updateOnSelectorChange		null
					*/
					/*
					extra selectors that'll allow scrollbar dragging upon mousemove/up, pointermove/up, touchend etc. (e.g. "selector-1, selector-2")
						option						default
						-------------------------------------
						extraDraggableSelectors		null
					*/
					/*
					extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. "selector-1, selector-2")
						option						default
						-------------------------------------
						releaseDraggableSelectors	null
					*/
					/*
					auto-update timeout 
					values: integer (milliseconds)
					*/
					autoUpdateTimeout:60
				},
				/* 
				scrollbar theme 
				values: string (see CSS/plugin URI for a list of ready-to-use themes)
				*/
				theme:"light",
				/*
				user defined callback functions
				*/
				callbacks:{
					/*
					Available callbacks: 
						callback					default
						-------------------------------------
						onCreate					null
						onInit						null
						onScrollStart				null
						onScroll					null
						onTotalScroll				null
						onTotalScrollBack			null
						whileScrolling				null
						onOverflowY					null
						onOverflowX					null
						onOverflowYNone				null
						onOverflowXNone				null
						onImageLoad					null
						onSelectorChange			null
						onBeforeUpdate				null
						onUpdate					null
					*/
					onTotalScrollOffset:0,
					onTotalScrollBackOffset:0,
					alwaysTriggerOffsets:true
				}
				/*
				add scrollbar(s) on all elements matching the current selector, now and in the future 
				values: boolean, string 
				string values: "on" (enable), "once" (disable after first invocation), "off" (disable)
				liveSelector values: string (selector)
					option						default
					-------------------------------------
					live						false
					liveSelector				null
				*/
			},
		
		
		
		
		
		/* 
		----------------------------------------
		VARS, CONSTANTS 
		----------------------------------------
		*/
		
			totalInstances=0, /* plugin instances amount */
			liveTimers={}, /* live option timers */
			oldIE=(window.attachEvent && !window.addEventListener) ? 1 : 0, /* detect IE < 9 */
			touchActive=false,touchable, /* global touch vars (for touch and pointer events) */
			/* general plugin classes */
			classes=[
				"mCSB_dragger_onDrag","mCSB_scrollTools_onDrag","mCS_img_loaded","mCS_disabled","mCS_destroyed","mCS_no_scrollbar",
				"mCS-autoHide","mCS-dir-rtl","mCS_no_scrollbar_y","mCS_no_scrollbar_x","mCS_y_hidden","mCS_x_hidden","mCSB_draggerContainer",
				"mCSB_buttonUp","mCSB_buttonDown","mCSB_buttonLeft","mCSB_buttonRight"
			],
			
		
		
		
		
		/* 
		----------------------------------------
		METHODS 
		----------------------------------------
		*/
		
			methods={
				
				/* 
				plugin initialization method 
				creates the scrollbar(s), plugin data object and options
				----------------------------------------
				*/
				
				init:function(options){
					
					var options=$.extend(true,{},defaults,options),
						selector=_selector.call(this); /* validate selector */
					
					/* 
					if live option is enabled, monitor for elements matching the current selector and 
					apply scrollbar(s) when found (now and in the future) 
					*/
					if(options.live){
						var liveSelector=options.liveSelector || this.selector || defaultSelector, /* live selector(s) */
							$liveSelector=$(liveSelector); /* live selector(s) as jquery object */
						if(options.live==="off"){
							/* 
							disable live if requested 
							usage: $(selector).mCustomScrollbar({live:"off"}); 
							*/
							removeLiveTimers(liveSelector);
							return;
						}
						liveTimers[liveSelector]=setTimeout(function(){
							/* call mCustomScrollbar fn on live selector(s) every half-second */
							$liveSelector.mCustomScrollbar(options);
							if(options.live==="once" && $liveSelector.length){
								/* disable live after first invocation */
								removeLiveTimers(liveSelector);
							}
						},500);
					}else{
						removeLiveTimers(liveSelector);
					}
					
					/* options backward compatibility (for versions < 3.0.0) and normalization */
					options.setWidth=(options.set_width) ? options.set_width : options.setWidth;
					options.setHeight=(options.set_height) ? options.set_height : options.setHeight;
					options.axis=(options.horizontalScroll) ? "x" : _findAxis(options.axis);
					options.scrollInertia=options.scrollInertia>0 && options.scrollInertia<17 ? 17 : options.scrollInertia;
					if(typeof options.mouseWheel!=="object" &&  options.mouseWheel==true){ /* old school mouseWheel option (non-object) */
						options.mouseWheel={enable:true,scrollAmount:"auto",axis:"y",preventDefault:false,deltaFactor:"auto",normalizeDelta:false,invert:false}
					}
					options.mouseWheel.scrollAmount=!options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
					options.mouseWheel.normalizeDelta=!options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
					options.scrollButtons.scrollType=_findScrollButtonsType(options.scrollButtons.scrollType); 
					
					_theme(options); /* theme-specific options */
					
					/* plugin constructor */
					return $(selector).each(function(){
						
						var $this=$(this);
						
						if(!$this.data(pluginPfx)){ /* prevent multiple instantiations */
						
							/* store options and create objects in jquery data */
							$this.data(pluginPfx,{
								idx:++totalInstances, /* instance index */
								opt:options, /* options */
								scrollRatio:{y:null,x:null}, /* scrollbar to content ratio */
								overflowed:null, /* overflowed axis */
								contentReset:{y:null,x:null}, /* object to check when content resets */
								bindEvents:false, /* object to check if events are bound */
								tweenRunning:false, /* object to check if tween is running */
								sequential:{}, /* sequential scrolling object */
								langDir:$this.css("direction"), /* detect/store direction (ltr or rtl) */
								cbOffsets:null, /* object to check whether callback offsets always trigger */
								/* 
								object to check how scrolling events where last triggered 
								"internal" (default - triggered by this script), "external" (triggered by other scripts, e.g. via scrollTo method) 
								usage: object.data("mCS").trigger
								*/
								trigger:null,
								/* 
								object to check for changes in elements in order to call the update method automatically 
								*/
								poll:{size:{o:0,n:0},img:{o:0,n:0},change:{o:0,n:0}}
							});
							
							var d=$this.data(pluginPfx),o=d.opt,
								/* HTML data attributes */
								htmlDataAxis=$this.data("mcs-axis"),htmlDataSbPos=$this.data("mcs-scrollbar-position"),htmlDataTheme=$this.data("mcs-theme");
							 
							if(htmlDataAxis){o.axis=htmlDataAxis;} /* usage example: data-mcs-axis="y" */
							if(htmlDataSbPos){o.scrollbarPosition=htmlDataSbPos;} /* usage example: data-mcs-scrollbar-position="outside" */
							if(htmlDataTheme){ /* usage example: data-mcs-theme="minimal" */
								o.theme=htmlDataTheme;
								_theme(o); /* theme-specific options */
							}
							
							_pluginMarkup.call(this); /* add plugin markup */
							
							if(d && o.callbacks.onCreate && typeof o.callbacks.onCreate==="function"){o.callbacks.onCreate.call(this);} /* callbacks: onCreate */
							
							$("#mCSB_"+d.idx+"_container img:not(."+classes[2]+")").addClass(classes[2]); /* flag loaded images */
							
							methods.update.call(null,$this); /* call the update method */
						
						}
						
					});
					
				},
				/* ---------------------------------------- */
				
				
				
				/* 
				plugin update method 
				updates content and scrollbar(s) values, events and status 
				----------------------------------------
				usage: $(selector).mCustomScrollbar("update");
				*/
				
				update:function(el,cb){
					
					var selector=el || _selector.call(this); /* validate selector */
					
					return $(selector).each(function(){
						
						var $this=$(this);
						
						if($this.data(pluginPfx)){ /* check if plugin has initialized */
							
							var d=$this.data(pluginPfx),o=d.opt,
								mCSB_container=$("#mCSB_"+d.idx+"_container"),
								mCustomScrollBox=$("#mCSB_"+d.idx),
								mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
							
							if(!mCSB_container.length){return;}
							
							if(d.tweenRunning){_stop($this);} /* stop any running tweens while updating */
							
							if(cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate==="function"){o.callbacks.onBeforeUpdate.call(this);} /* callbacks: onBeforeUpdate */
							
							/* if element was disabled or destroyed, remove class(es) */
							if($this.hasClass(classes[3])){$this.removeClass(classes[3]);}
							if($this.hasClass(classes[4])){$this.removeClass(classes[4]);}
							
							/* css flexbox fix, detect/set max-height */
							mCustomScrollBox.css("max-height","none");
							if(mCustomScrollBox.height()!==$this.height()){mCustomScrollBox.css("max-height",$this.height());}
							
							_expandContentHorizontally.call(this); /* expand content horizontally */
							
							if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
								mCSB_container.css("width",_contentWidth(mCSB_container));
							}
							
							d.overflowed=_overflowed.call(this); /* determine if scrolling is required */
							
							_scrollbarVisibility.call(this); /* show/hide scrollbar(s) */
							
							/* auto-adjust scrollbar dragger length analogous to content */
							if(o.autoDraggerLength){_setDraggerLength.call(this);}
							
							_scrollRatio.call(this); /* calculate and store scrollbar to content ratio */
							
							_bindEvents.call(this); /* bind scrollbar events */
							
							/* reset scrolling position and/or events */
							var to=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)];
							if(o.axis!=="x"){ /* y/yx axis */
								if(!d.overflowed[0]){ /* y scrolling is not required */
									_resetContentPosition.call(this); /* reset content position */
									if(o.axis==="y"){
										_unbindEvents.call(this);
									}else if(o.axis==="yx" && d.overflowed[1]){
										_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
									}
								}else if(mCSB_dragger[0].height()>mCSB_dragger[0].parent().height()){
									_resetContentPosition.call(this); /* reset content position */
								}else{ /* y scrolling is required */
									_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
									d.contentReset.y=null;
								}
							}
							if(o.axis!=="y"){ /* x/yx axis */
								if(!d.overflowed[1]){ /* x scrolling is not required */
									_resetContentPosition.call(this); /* reset content position */
									if(o.axis==="x"){
										_unbindEvents.call(this);
									}else if(o.axis==="yx" && d.overflowed[0]){
										_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
									}
								}else if(mCSB_dragger[1].width()>mCSB_dragger[1].parent().width()){
									_resetContentPosition.call(this); /* reset content position */
								}else{ /* x scrolling is required */
									_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
									d.contentReset.x=null;
								}
							}
							
							/* callbacks: onImageLoad, onSelectorChange, onUpdate */
							if(cb && d){
								if(cb===2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad==="function"){
									o.callbacks.onImageLoad.call(this);
								}else if(cb===3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange==="function"){
									o.callbacks.onSelectorChange.call(this);
								}else if(o.callbacks.onUpdate && typeof o.callbacks.onUpdate==="function"){
									o.callbacks.onUpdate.call(this);
								}
							}
							
							_autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */
							
						}
						
					});
					
				},
				/* ---------------------------------------- */
				
				
				
				/* 
				plugin scrollTo method 
				triggers a scrolling event to a specific value
				----------------------------------------
				usage: $(selector).mCustomScrollbar("scrollTo",value,options);
				*/
			
				scrollTo:function(val,options){
					
					/* prevent silly things like $(selector).mCustomScrollbar("scrollTo",undefined); */
					if(typeof val=="undefined" || val==null){return;}
					
					var selector=_selector.call(this); /* validate selector */
					
					return $(selector).each(function(){
						
						var $this=$(this);
						
						if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
							var d=$this.data(pluginPfx),o=d.opt,
								/* method default options */
								methodDefaults={
									trigger:"external", /* method is by default triggered externally (e.g. from other scripts) */
									scrollInertia:o.scrollInertia, /* scrolling inertia (animation duration) */
									scrollEasing:"mcsEaseInOut", /* animation easing */
									moveDragger:false, /* move dragger instead of content */
									timeout:60, /* scroll-to delay */
									callbacks:true, /* enable/disable callbacks */
									onStart:true,
									onUpdate:true,
									onComplete:true
								},
								methodOptions=$.extend(true,{},methodDefaults,options),
								to=_arr.call(this,val),dur=methodOptions.scrollInertia>0 && methodOptions.scrollInertia<17 ? 17 : methodOptions.scrollInertia;
							
							/* translate yx values to actual scroll-to positions */
							to[0]=_to.call(this,to[0],"y");
							to[1]=_to.call(this,to[1],"x");
							
							/* 
							check if scroll-to value moves the dragger instead of content. 
							Only pixel values apply on dragger (e.g. 100, "100px", "-=100" etc.) 
							*/
							if(methodOptions.moveDragger){
								to[0]*=d.scrollRatio.y;
								to[1]*=d.scrollRatio.x;
							}
							
							methodOptions.dur=_isTabHidden() ? 0 : dur; //skip animations if browser tab is hidden
							
							setTimeout(function(){ 
								/* do the scrolling */
								if(to[0]!==null && typeof to[0]!=="undefined" && o.axis!=="x" && d.overflowed[0]){ /* scroll y */
									methodOptions.dir="y";
									methodOptions.overwrite="all";
									_scrollTo($this,to[0].toString(),methodOptions);
								}
								if(to[1]!==null && typeof to[1]!=="undefined" && o.axis!=="y" && d.overflowed[1]){ /* scroll x */
									methodOptions.dir="x";
									methodOptions.overwrite="none";
									_scrollTo($this,to[1].toString(),methodOptions);
								}
							},methodOptions.timeout);
							
						}
						
					});
					
				},
				/* ---------------------------------------- */
				
				
				
				/*
				plugin stop method 
				stops scrolling animation
				----------------------------------------
				usage: $(selector).mCustomScrollbar("stop");
				*/
				stop:function(){
					
					var selector=_selector.call(this); /* validate selector */
					
					return $(selector).each(function(){
						
						var $this=$(this);
						
						if($this.data(pluginPfx)){ /* check if plugin has initialized */
											
							_stop($this);
						
						}
						
					});
					
				},
				/* ---------------------------------------- */
				
				
				
				/*
				plugin disable method 
				temporarily disables the scrollbar(s) 
				----------------------------------------
				usage: $(selector).mCustomScrollbar("disable",reset); 
				reset (boolean): resets content position to 0 
				*/
				disable:function(r){
					
					var selector=_selector.call(this); /* validate selector */
					
					return $(selector).each(function(){
						
						var $this=$(this);
						
						if($this.data(pluginPfx)){ /* check if plugin has initialized */
							
							var d=$this.data(pluginPfx);
							
							_autoUpdate.call(this,"remove"); /* remove automatic updating */
							
							_unbindEvents.call(this); /* unbind events */
							
							if(r){_resetContentPosition.call(this);} /* reset content position */
							
							_scrollbarVisibility.call(this,true); /* show/hide scrollbar(s) */
							
							$this.addClass(classes[3]); /* add disable class */
						
						}
						
					});
					
				},
				/* ---------------------------------------- */
				
				
				
				/*
				plugin destroy method 
				completely removes the scrollbar(s) and returns the element to its original state
				----------------------------------------
				usage: $(selector).mCustomScrollbar("destroy"); 
				*/
				destroy:function(){
					
					var selector=_selector.call(this); /* validate selector */
					
					return $(selector).each(function(){
						
						var $this=$(this);
						
						if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
							var d=$this.data(pluginPfx),o=d.opt,
								mCustomScrollBox=$("#mCSB_"+d.idx),
								mCSB_container=$("#mCSB_"+d.idx+"_container"),
								scrollbar=$(".mCSB_"+d.idx+"_scrollbar");
						
							if(o.live){removeLiveTimers(o.liveSelector || $(selector).selector);} /* remove live timers */
							
							_autoUpdate.call(this,"remove"); /* remove automatic updating */
							
							_unbindEvents.call(this); /* unbind events */
							
							_resetContentPosition.call(this); /* reset content position */
							
							$this.removeData(pluginPfx); /* remove plugin data object */
							
							_delete(this,"mcs"); /* delete callbacks object */
							
							/* remove plugin markup */
							scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */
							mCSB_container.find("img."+classes[2]).removeClass(classes[2]); /* remove loaded images flag */
							mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */
							/* remove plugin classes from the element and add destroy class */
							$this.removeClass(pluginNS+" _"+pluginPfx+"_"+d.idx+" "+classes[6]+" "+classes[7]+" "+classes[5]+" "+classes[3]).addClass(classes[4]);
						
						}
						
					});
					
				}
				/* ---------------------------------------- */
				
			},
		
		
		
		
			
		/* 
		----------------------------------------
		FUNCTIONS
		----------------------------------------
		*/
		
			/* validates selector (if selector is invalid or undefined uses the default one) */
			_selector=function(){
				return (typeof $(this)!=="object" || $(this).length<1) ? defaultSelector : this;
			},
			/* -------------------- */
			
			
			/* changes options according to theme */
			_theme=function(obj){
				var fixedSizeScrollbarThemes=["rounded","rounded-dark","rounded-dots","rounded-dots-dark"],
					nonExpandedScrollbarThemes=["rounded-dots","rounded-dots-dark","3d","3d-dark","3d-thick","3d-thick-dark","inset","inset-dark","inset-2","inset-2-dark","inset-3","inset-3-dark"],
					disabledScrollButtonsThemes=["minimal","minimal-dark"],
					enabledAutoHideScrollbarThemes=["minimal","minimal-dark"],
					scrollbarPositionOutsideThemes=["minimal","minimal-dark"];
				obj.autoDraggerLength=$.inArray(obj.theme,fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
				obj.autoExpandScrollbar=$.inArray(obj.theme,nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
				obj.scrollButtons.enable=$.inArray(obj.theme,disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
				obj.autoHideScrollbar=$.inArray(obj.theme,enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
				obj.scrollbarPosition=$.inArray(obj.theme,scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
			},
			/* -------------------- */
			
			
			/* live option timers removal */
			removeLiveTimers=function(selector){
				if(liveTimers[selector]){
					clearTimeout(liveTimers[selector]);
					_delete(liveTimers,selector);
				}
			},
			/* -------------------- */
			
			
			/* normalizes axis option to valid values: "y", "x", "yx" */
			_findAxis=function(val){
				return (val==="yx" || val==="xy" || val==="auto") ? "yx" : (val==="x" || val==="horizontal") ? "x" : "y";
			},
			/* -------------------- */
			
			
			/* normalizes scrollButtons.scrollType option to valid values: "stepless", "stepped" */
			_findScrollButtonsType=function(val){
				return (val==="stepped" || val==="pixels" || val==="step" || val==="click") ? "stepped" : "stepless";
			},
			/* -------------------- */
			
			
			/* generates plugin markup */
			_pluginMarkup=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					expandClass=o.autoExpandScrollbar ? " "+classes[1]+"_expand" : "",
					scrollbar=["<div id='mCSB_"+d.idx+"_scrollbar_vertical' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_vertical"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>","<div id='mCSB_"+d.idx+"_scrollbar_horizontal' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_horizontal"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
					wrapperClass=o.axis==="yx" ? "mCSB_vertical_horizontal" : o.axis==="x" ? "mCSB_horizontal" : "mCSB_vertical",
					scrollbars=o.axis==="yx" ? scrollbar[0]+scrollbar[1] : o.axis==="x" ? scrollbar[1] : scrollbar[0],
					contentWrapper=o.axis==="yx" ? "<div id='mCSB_"+d.idx+"_container_wrapper' class='mCSB_container_wrapper' />" : "",
					autoHideClass=o.autoHideScrollbar ? " "+classes[6] : "",
					scrollbarDirClass=(o.axis!=="x" && d.langDir==="rtl") ? " "+classes[7] : "";
				if(o.setWidth){$this.css("width",o.setWidth);} /* set element width */
				if(o.setHeight){$this.css("height",o.setHeight);} /* set element height */
				o.setLeft=(o.axis!=="y" && d.langDir==="rtl") ? "989999px" : o.setLeft; /* adjust left position for rtl direction */
				$this.addClass(pluginNS+" _"+pluginPfx+"_"+d.idx+autoHideClass+scrollbarDirClass).wrapInner("<div id='mCSB_"+d.idx+"' class='mCustomScrollBox mCS-"+o.theme+" "+wrapperClass+"'><div id='mCSB_"+d.idx+"_container' class='mCSB_container' style='position:relative; top:"+o.setTop+"; left:"+o.setLeft+";' dir='"+d.langDir+"' /></div>");
				var mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container");
				if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
					mCSB_container.css("width",_contentWidth(mCSB_container));
				}
				if(o.scrollbarPosition==="outside"){
					if($this.css("position")==="static"){ /* requires elements with non-static position */
						$this.css("position","relative");
					}
					$this.css("overflow","visible");
					mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
				}else{
					mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
					mCSB_container.wrap(contentWrapper);
				}
				_scrollButtons.call(this); /* add scrollbar buttons */
				/* minimum dragger length */
				var mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
				mCSB_dragger[0].css("min-height",mCSB_dragger[0].height());
				mCSB_dragger[1].css("min-width",mCSB_dragger[1].width());
			},
			/* -------------------- */
			
			
			/* calculates content width */
			_contentWidth=function(el){
				var val=[el[0].scrollWidth,Math.max.apply(Math,el.children().map(function(){return $(this).outerWidth(true);}).get())],w=el.parent().width();
				return val[0]>w ? val[0] : val[1]>w ? val[1] : "100%";
			},
			/* -------------------- */
			
			
			/* expands content horizontally */
			_expandContentHorizontally=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					mCSB_container=$("#mCSB_"+d.idx+"_container");
				if(o.advanced.autoExpandHorizontalScroll && o.axis!=="y"){
					/* calculate scrollWidth */
					mCSB_container.css({"width":"auto","min-width":0,"overflow-x":"scroll"});
					var w=Math.ceil(mCSB_container[0].scrollWidth);
					if(o.advanced.autoExpandHorizontalScroll===3 || (o.advanced.autoExpandHorizontalScroll!==2 && w>mCSB_container.parent().width())){
						mCSB_container.css({"width":w,"min-width":"100%","overflow-x":"inherit"});
					}else{
						/* 
						wrap content with an infinite width div and set its position to absolute and width to auto. 
						Setting width to auto before calculating the actual width is important! 
						We must let the browser set the width as browser zoom values are impossible to calculate.
						*/
						mCSB_container.css({"overflow-x":"inherit","position":"absolute"})
							.wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />")
							.css({ /* set actual width, original position and un-wrap */
								/* 
								get the exact width (with decimals) and then round-up. 
								Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width
								*/
								"width":(Math.ceil(mCSB_container[0].getBoundingClientRect().right+0.4)-Math.floor(mCSB_container[0].getBoundingClientRect().left)),
								"min-width":"100%",
								"position":"relative"
							}).unwrap();
					}
				}
			},
			/* -------------------- */
			
			
			/* adds scrollbar buttons */
			_scrollButtons=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					mCSB_scrollTools=$(".mCSB_"+d.idx+"_scrollbar:first"),
					tabindex=!_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='"+o.scrollButtons.tabindex+"'",
					btnHTML=[
						"<a href='#' class='"+classes[13]+"' "+tabindex+" />",
						"<a href='#' class='"+classes[14]+"' "+tabindex+" />",
						"<a href='#' class='"+classes[15]+"' "+tabindex+" />",
						"<a href='#' class='"+classes[16]+"' "+tabindex+" />"
					],
					btn=[(o.axis==="x" ? btnHTML[2] : btnHTML[0]),(o.axis==="x" ? btnHTML[3] : btnHTML[1]),btnHTML[2],btnHTML[3]];
				if(o.scrollButtons.enable){
					mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
				}
			},
			/* -------------------- */
			
			
			/* auto-adjusts scrollbar dragger length */
			_setDraggerLength=function(){
				var $this=$(this),d=$this.data(pluginPfx),
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
					ratio=[mCustomScrollBox.height()/mCSB_container.outerHeight(false),mCustomScrollBox.width()/mCSB_container.outerWidth(false)],
					l=[
						parseInt(mCSB_dragger[0].css("min-height")),Math.round(ratio[0]*mCSB_dragger[0].parent().height()),
						parseInt(mCSB_dragger[1].css("min-width")),Math.round(ratio[1]*mCSB_dragger[1].parent().width())
					],
					h=oldIE && (l[1]<l[0]) ? l[0] : l[1],w=oldIE && (l[3]<l[2]) ? l[2] : l[3];
				mCSB_dragger[0].css({
					"height":h,"max-height":(mCSB_dragger[0].parent().height()-10)
				}).find(".mCSB_dragger_bar").css({"line-height":l[0]+"px"});
				mCSB_dragger[1].css({
					"width":w,"max-width":(mCSB_dragger[1].parent().width()-10)
				});
			},
			/* -------------------- */
			
			
			/* calculates scrollbar to content ratio */
			_scrollRatio=function(){
				var $this=$(this),d=$this.data(pluginPfx),
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
					scrollAmount=[mCSB_container.outerHeight(false)-mCustomScrollBox.height(),mCSB_container.outerWidth(false)-mCustomScrollBox.width()],
					ratio=[
						scrollAmount[0]/(mCSB_dragger[0].parent().height()-mCSB_dragger[0].height()),
						scrollAmount[1]/(mCSB_dragger[1].parent().width()-mCSB_dragger[1].width())
					];
				d.scrollRatio={y:ratio[0],x:ratio[1]};
			},
			/* -------------------- */
			
			
			/* toggles scrolling classes */
			_onDragClasses=function(el,action,xpnd){
				var expandClass=xpnd ? classes[0]+"_expanded" : "",
					scrollbar=el.closest(".mCSB_scrollTools");
				if(action==="active"){
					el.toggleClass(classes[0]+" "+expandClass); scrollbar.toggleClass(classes[1]); 
					el[0]._draggable=el[0]._draggable ? 0 : 1;
				}else{
					if(!el[0]._draggable){
						if(action==="hide"){
							el.removeClass(classes[0]); scrollbar.removeClass(classes[1]);
						}else{
							el.addClass(classes[0]); scrollbar.addClass(classes[1]);
						}
					}
				}
			},
			/* -------------------- */
			
			
			/* checks if content overflows its container to determine if scrolling is required */
			_overflowed=function(){
				var $this=$(this),d=$this.data(pluginPfx),
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					contentHeight=d.overflowed==null ? mCSB_container.height() : mCSB_container.outerHeight(false),
					contentWidth=d.overflowed==null ? mCSB_container.width() : mCSB_container.outerWidth(false),
					h=mCSB_container[0].scrollHeight,w=mCSB_container[0].scrollWidth;
				if(h>contentHeight){contentHeight=h;}
				if(w>contentWidth){contentWidth=w;}
				return [contentHeight>mCustomScrollBox.height(),contentWidth>mCustomScrollBox.width()];
			},
			/* -------------------- */
			
			
			/* resets content position to 0 */
			_resetContentPosition=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
				_stop($this); /* stop any current scrolling before resetting */
				if((o.axis!=="x" && !d.overflowed[0]) || (o.axis==="y" && d.overflowed[0])){ /* reset y */
					mCSB_dragger[0].add(mCSB_container).css("top",0);
					_scrollTo($this,"_resetY");
				}
				if((o.axis!=="y" && !d.overflowed[1]) || (o.axis==="x" && d.overflowed[1])){ /* reset x */
					var cx=dx=0;
					if(d.langDir==="rtl"){ /* adjust left position for rtl direction */
						cx=mCustomScrollBox.width()-mCSB_container.outerWidth(false);
						dx=Math.abs(cx/d.scrollRatio.x);
					}
					mCSB_container.css("left",cx);
					mCSB_dragger[1].css("left",dx);
					_scrollTo($this,"_resetX");
				}
			},
			/* -------------------- */
			
			
			/* binds scrollbar events */
			_bindEvents=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt;
				if(!d.bindEvents){ /* check if events are already bound */
					_draggable.call(this);
					if(o.contentTouchScroll){_contentDraggable.call(this);}
					_selectable.call(this);
					if(o.mouseWheel.enable){ /* bind mousewheel fn when plugin is available */
						function _mwt(){
							mousewheelTimeout=setTimeout(function(){
								if(!$.event.special.mousewheel){
									_mwt();
								}else{
									clearTimeout(mousewheelTimeout);
									_mousewheel.call($this[0]);
								}
							},100);
						}
						var mousewheelTimeout;
						_mwt();
					}
					_draggerRail.call(this);
					_wrapperScroll.call(this);
					if(o.advanced.autoScrollOnFocus){_focus.call(this);}
					if(o.scrollButtons.enable){_buttons.call(this);}
					if(o.keyboard.enable){_keyboard.call(this);}
					d.bindEvents=true;
				}
			},
			/* -------------------- */
			
			
			/* unbinds scrollbar events */
			_unbindEvents=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					namespace=pluginPfx+"_"+d.idx,
					sb=".mCSB_"+d.idx+"_scrollbar",
					sel=$("#mCSB_"+d.idx+",#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,"+sb+" ."+classes[12]+",#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal,"+sb+">a"),
					mCSB_container=$("#mCSB_"+d.idx+"_container");
				if(o.advanced.releaseDraggableSelectors){sel.add($(o.advanced.releaseDraggableSelectors));}
				if(o.advanced.extraDraggableSelectors){sel.add($(o.advanced.extraDraggableSelectors));}
				if(d.bindEvents){ /* check if events are bound */
					/* unbind namespaced events from document/selectors */
					$(document).add($(!_canAccessIFrame() || top.document)).unbind("."+namespace);
					sel.each(function(){
						$(this).unbind("."+namespace);
					});
					/* clear and delete timeouts/objects */
					clearTimeout($this[0]._focusTimeout); _delete($this[0],"_focusTimeout");
					clearTimeout(d.sequential.step); _delete(d.sequential,"step");
					clearTimeout(mCSB_container[0].onCompleteTimeout); _delete(mCSB_container[0],"onCompleteTimeout");
					d.bindEvents=false;
				}
			},
			/* -------------------- */
			
			
			/* toggles scrollbar visibility */
			_scrollbarVisibility=function(disabled){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					contentWrapper=$("#mCSB_"+d.idx+"_container_wrapper"),
					content=contentWrapper.length ? contentWrapper : $("#mCSB_"+d.idx+"_container"),
					scrollbar=[$("#mCSB_"+d.idx+"_scrollbar_vertical"),$("#mCSB_"+d.idx+"_scrollbar_horizontal")],
					mCSB_dragger=[scrollbar[0].find(".mCSB_dragger"),scrollbar[1].find(".mCSB_dragger")];
				if(o.axis!=="x"){
					if(d.overflowed[0] && !disabled){
						scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display","block");
						content.removeClass(classes[8]+" "+classes[10]);
					}else{
						if(o.alwaysShowScrollbar){
							if(o.alwaysShowScrollbar!==2){mCSB_dragger[0].css("display","none");}
							content.removeClass(classes[10]);
						}else{
							scrollbar[0].css("display","none");
							content.addClass(classes[10]);
						}
						content.addClass(classes[8]);
					}
				}
				if(o.axis!=="y"){
					if(d.overflowed[1] && !disabled){
						scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display","block");
						content.removeClass(classes[9]+" "+classes[11]);
					}else{
						if(o.alwaysShowScrollbar){
							if(o.alwaysShowScrollbar!==2){mCSB_dragger[1].css("display","none");}
							content.removeClass(classes[11]);
						}else{
							scrollbar[1].css("display","none");
							content.addClass(classes[11]);
						}
						content.addClass(classes[9]);
					}
				}
				if(!d.overflowed[0] && !d.overflowed[1]){
					$this.addClass(classes[5]);
				}else{
					$this.removeClass(classes[5]);
				}
			},
			/* -------------------- */
			
			
			/* returns input coordinates of pointer, touch and mouse events (relative to document) */
			_coordinates=function(e){
				var t=e.type,o=e.target.ownerDocument!==document && frameElement!==null ? [$(frameElement).offset().top,$(frameElement).offset().left] : null,
					io=_canAccessIFrame() && e.target.ownerDocument!==top.document && frameElement!==null ? [$(e.view.frameElement).offset().top,$(e.view.frameElement).offset().left] : [0,0];
				switch(t){
					case "pointerdown": case "MSPointerDown": case "pointermove": case "MSPointerMove": case "pointerup": case "MSPointerUp":
						return o ? [e.originalEvent.pageY-o[0]+io[0],e.originalEvent.pageX-o[1]+io[1],false] : [e.originalEvent.pageY,e.originalEvent.pageX,false];
						break;
					case "touchstart": case "touchmove": case "touchend":
						var touch=e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
							touches=e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
						return e.target.ownerDocument!==document ? [touch.screenY,touch.screenX,touches>1] : [touch.pageY,touch.pageX,touches>1];
						break;
					default:
						return o ? [e.pageY-o[0]+io[0],e.pageX-o[1]+io[1],false] : [e.pageY,e.pageX,false];
				}
			},
			/* -------------------- */
			
			
			/* 
			SCROLLBAR DRAG EVENTS
			scrolls content via scrollbar dragging 
			*/
			_draggable=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					namespace=pluginPfx+"_"+d.idx,
					draggerId=["mCSB_"+d.idx+"_dragger_vertical","mCSB_"+d.idx+"_dragger_horizontal"],
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					mCSB_dragger=$("#"+draggerId[0]+",#"+draggerId[1]),
					draggable,dragY,dragX,
					rds=o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,
					eds=o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
				mCSB_dragger.bind("contextmenu."+namespace,function(e){
					e.preventDefault(); //prevent right click
				}).bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
					e.stopImmediatePropagation();
					e.preventDefault();
					if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
					touchActive=true;
					if(oldIE){document.onselectstart=function(){return false;}} /* disable text selection for IE < 9 */
					_iframe.call(mCSB_container,false); /* enable scrollbar dragging over iframes by disabling their events */
					_stop($this);
					draggable=$(this);
					var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
						h=draggable.height()+offset.top,w=draggable.width()+offset.left;
					if(y<h && y>0 && x<w && x>0){
						dragY=y; 
						dragX=x;
					}
					_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
				}).bind("touchmove."+namespace,function(e){
					e.stopImmediatePropagation();
					e.preventDefault();
					var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
					_drag(dragY,dragX,y,x);
				});
				$(document).add(eds).bind("mousemove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace,function(e){
					if(draggable){
						var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
						if(dragY===y && dragX===x){return;} /* has it really moved? */
						_drag(dragY,dragX,y,x);
					}
				}).add(rds).bind("mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
					if(draggable){
						_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
						draggable=null;
					}
					touchActive=false;
					if(oldIE){document.onselectstart=null;} /* enable text selection for IE < 9 */
					_iframe.call(mCSB_container,true); /* enable iframes events */
				});
				function _drag(dragY,dragX,y,x){
					mCSB_container[0].idleTimer=o.scrollInertia<233 ? 250 : 0;
					if(draggable.attr("id")===draggerId[1]){
						var dir="x",to=((draggable[0].offsetLeft-dragX)+x)*d.scrollRatio.x;
					}else{
						var dir="y",to=((draggable[0].offsetTop-dragY)+y)*d.scrollRatio.y;
					}
					_scrollTo($this,to.toString(),{dir:dir,drag:true});
				}
			},
			/* -------------------- */
			
			
			/* 
			TOUCH SWIPE EVENTS
			scrolls content via touch swipe 
			Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices 
			*/
			_contentDraggable=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					namespace=pluginPfx+"_"+d.idx,
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
					draggable,dragY,dragX,touchStartY,touchStartX,touchMoveY=[],touchMoveX=[],startTime,runningTime,endTime,distance,speed,amount,
					durA=0,durB,overwrite=o.axis==="yx" ? "none" : "all",touchIntent=[],touchDrag,docDrag,
					iframe=mCSB_container.find("iframe"),
					events=[
						"touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace, //start
						"touchmove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace, //move
						"touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace //end
					],
					touchAction=document.body.style.touchAction!==undefined && document.body.style.touchAction!=="";
				mCSB_container.bind(events[0],function(e){
					_onTouchstart(e);
				}).bind(events[1],function(e){
					_onTouchmove(e);
				});
				mCustomScrollBox.bind(events[0],function(e){
					_onTouchstart2(e);
				}).bind(events[2],function(e){
					_onTouchend(e);
				});
				if(iframe.length){
					iframe.each(function(){
						$(this).bind("load",function(){
							/* bind events on accessible iframes */
							if(_canAccessIFrame(this)){
								$(this.contentDocument || this.contentWindow.document).bind(events[0],function(e){
									_onTouchstart(e);
									_onTouchstart2(e);
								}).bind(events[1],function(e){
									_onTouchmove(e);
								}).bind(events[2],function(e){
									_onTouchend(e);
								});
							}
						});
					});
				}
				function _onTouchstart(e){
					if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){touchable=0; return;}
					touchable=1; touchDrag=0; docDrag=0; draggable=1;
					$this.removeClass("mCS_touch_action");
					var offset=mCSB_container.offset();
					dragY=_coordinates(e)[0]-offset.top;
					dragX=_coordinates(e)[1]-offset.left;
					touchIntent=[_coordinates(e)[0],_coordinates(e)[1]];
				}
				function _onTouchmove(e){
					if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
					if(!o.documentTouchScroll){e.preventDefault();} 
					e.stopImmediatePropagation();
					if(docDrag && !touchDrag){return;}
					if(draggable){
						runningTime=_getTime();
						var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
							easing="mcsLinearOut";
						touchMoveY.push(y);
						touchMoveX.push(x);
						touchIntent[2]=Math.abs(_coordinates(e)[0]-touchIntent[0]); touchIntent[3]=Math.abs(_coordinates(e)[1]-touchIntent[1]);
						if(d.overflowed[0]){
							var limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
								prevent=((dragY-y)>0 && (y-dragY)>-(limit*d.scrollRatio.y) && (touchIntent[3]*2<touchIntent[2] || o.axis==="yx"));
						}
						if(d.overflowed[1]){
							var limitX=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
								preventX=((dragX-x)>0 && (x-dragX)>-(limitX*d.scrollRatio.x) && (touchIntent[2]*2<touchIntent[3] || o.axis==="yx"));
						}
						if(prevent || preventX){ /* prevent native document scrolling */
							if(!touchAction){e.preventDefault();} 
							touchDrag=1;
						}else{
							docDrag=1;
							$this.addClass("mCS_touch_action");
						}
						if(touchAction){e.preventDefault();} 
						amount=o.axis==="yx" ? [(dragY-y),(dragX-x)] : o.axis==="x" ? [null,(dragX-x)] : [(dragY-y),null];
						mCSB_container[0].idleTimer=250;
						if(d.overflowed[0]){_drag(amount[0],durA,easing,"y","all",true);}
						if(d.overflowed[1]){_drag(amount[1],durA,easing,"x",overwrite,true);}
					}
				}
				function _onTouchstart2(e){
					if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){touchable=0; return;}
					touchable=1;
					e.stopImmediatePropagation();
					_stop($this);
					startTime=_getTime();
					var offset=mCustomScrollBox.offset();
					touchStartY=_coordinates(e)[0]-offset.top;
					touchStartX=_coordinates(e)[1]-offset.left;
					touchMoveY=[]; touchMoveX=[];
				}
				function _onTouchend(e){
					if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
					draggable=0;
					e.stopImmediatePropagation();
					touchDrag=0; docDrag=0;
					endTime=_getTime();
					var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
					if((endTime-runningTime)>30){return;}
					speed=1000/(endTime-startTime);
					var easing="mcsEaseOut",slow=speed<2.5,
						diff=slow ? [touchMoveY[touchMoveY.length-2],touchMoveX[touchMoveX.length-2]] : [0,0];
					distance=slow ? [(y-diff[0]),(x-diff[1])] : [y-touchStartY,x-touchStartX];
					var absDistance=[Math.abs(distance[0]),Math.abs(distance[1])];
					speed=slow ? [Math.abs(distance[0]/4),Math.abs(distance[1]/4)] : [speed,speed];
					var a=[
						Math.abs(mCSB_container[0].offsetTop)-(distance[0]*_m((absDistance[0]/speed[0]),speed[0])),
						Math.abs(mCSB_container[0].offsetLeft)-(distance[1]*_m((absDistance[1]/speed[1]),speed[1]))
					];
					amount=o.axis==="yx" ? [a[0],a[1]] : o.axis==="x" ? [null,a[1]] : [a[0],null];
					durB=[(absDistance[0]*4)+o.scrollInertia,(absDistance[1]*4)+o.scrollInertia];
					var md=parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */
					amount[0]=absDistance[0]>md ? amount[0] : 0;
					amount[1]=absDistance[1]>md ? amount[1] : 0;
					if(d.overflowed[0]){_drag(amount[0],durB[0],easing,"y",overwrite,false);}
					if(d.overflowed[1]){_drag(amount[1],durB[1],easing,"x",overwrite,false);}
				}
				function _m(ds,s){
					var r=[s*1.5,s*2,s/1.5,s/2];
					if(ds>90){
						return s>4 ? r[0] : r[3];
					}else if(ds>60){
						return s>3 ? r[3] : r[2];
					}else if(ds>30){
						return s>8 ? r[1] : s>6 ? r[0] : s>4 ? s : r[2];
					}else{
						return s>8 ? s : r[3];
					}
				}
				function _drag(amount,dur,easing,dir,overwrite,drag){
					if(!amount){return;}
					_scrollTo($this,amount.toString(),{dur:dur,scrollEasing:easing,dir:dir,overwrite:overwrite,drag:drag});
				}
			},
			/* -------------------- */
			
			
			/* 
			SELECT TEXT EVENTS 
			scrolls content when text is selected 
			*/
			_selectable=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
					namespace=pluginPfx+"_"+d.idx,
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					wrapper=mCSB_container.parent(),
					action;
				mCSB_container.bind("mousedown."+namespace,function(e){
					if(touchable){return;}
					if(!action){action=1; touchActive=true;}
				}).add(document).bind("mousemove."+namespace,function(e){
					if(!touchable && action && _sel()){
						var offset=mCSB_container.offset(),
							y=_coordinates(e)[0]-offset.top+mCSB_container[0].offsetTop,x=_coordinates(e)[1]-offset.left+mCSB_container[0].offsetLeft;
						if(y>0 && y<wrapper.height() && x>0 && x<wrapper.width()){
							if(seq.step){_seq("off",null,"stepped");}
						}else{
							if(o.axis!=="x" && d.overflowed[0]){
								if(y<0){
									_seq("on",38);
								}else if(y>wrapper.height()){
									_seq("on",40);
								}
							}
							if(o.axis!=="y" && d.overflowed[1]){
								if(x<0){
									_seq("on",37);
								}else if(x>wrapper.width()){
									_seq("on",39);
								}
							}
						}
					}
				}).bind("mouseup."+namespace+" dragend."+namespace,function(e){
					if(touchable){return;}
					if(action){action=0; _seq("off",null);}
					touchActive=false;
				});
				function _sel(){
					return 	window.getSelection ? window.getSelection().toString() : 
							document.selection && document.selection.type!="Control" ? document.selection.createRange().text : 0;
				}
				function _seq(a,c,s){
					seq.type=s && action ? "stepped" : "stepless";
					seq.scrollAmount=10;
					_sequentialScroll($this,a,c,"mcsLinearOut",s ? 60 : null);
				}
			},
			/* -------------------- */
			
			
			/* 
			MOUSE WHEEL EVENT
			scrolls content via mouse-wheel 
			via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)
			*/
			_mousewheel=function(){
				if(!$(this).data(pluginPfx)){return;} /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					namespace=pluginPfx+"_"+d.idx,
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
					iframe=$("#mCSB_"+d.idx+"_container").find("iframe");
				if(iframe.length){
					iframe.each(function(){
						$(this).bind("load",function(){
							/* bind events on accessible iframes */
							if(_canAccessIFrame(this)){
								$(this.contentDocument || this.contentWindow.document).bind("mousewheel."+namespace,function(e,delta){
									_onMousewheel(e,delta);
								});
							}
						});
					});
				}
				mCustomScrollBox.bind("mousewheel."+namespace,function(e,delta){
					_onMousewheel(e,delta);
				});
				function _onMousewheel(e,delta){
					_stop($this);
					if(_disableMousewheel($this,e.target)){return;} /* disables mouse-wheel when hovering specific elements */
					var deltaFactor=o.mouseWheel.deltaFactor!=="auto" ? parseInt(o.mouseWheel.deltaFactor) : (oldIE && e.deltaFactor<100) ? 100 : e.deltaFactor || 100,
						dur=o.scrollInertia;
					if(o.axis==="x" || o.mouseWheel.axis==="x"){
						var dir="x",
							px=[Math.round(deltaFactor*d.scrollRatio.x),parseInt(o.mouseWheel.scrollAmount)],
							amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.width() ? mCustomScrollBox.width()*0.9 : px[0],
							contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetLeft),
							draggerPos=mCSB_dragger[1][0].offsetLeft,
							limit=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
							dlt=o.mouseWheel.axis==="y" ? (e.deltaY || delta) : e.deltaX;
					}else{
						var dir="y",
							px=[Math.round(deltaFactor*d.scrollRatio.y),parseInt(o.mouseWheel.scrollAmount)],
							amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.height() ? mCustomScrollBox.height()*0.9 : px[0],
							contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetTop),
							draggerPos=mCSB_dragger[0][0].offsetTop,
							limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
							dlt=e.deltaY || delta;
					}
					if((dir==="y" && !d.overflowed[0]) || (dir==="x" && !d.overflowed[1])){return;}
					if(o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice){dlt=-dlt;}
					if(o.mouseWheel.normalizeDelta){dlt=dlt<0 ? -1 : 1;}
					if((dlt>0 && draggerPos!==0) || (dlt<0 && draggerPos!==limit) || o.mouseWheel.preventDefault){
						e.stopImmediatePropagation();
						e.preventDefault();
					}
					if(e.deltaFactor<5 && !o.mouseWheel.normalizeDelta){
						//very low deltaFactor values mean some kind of delta acceleration (e.g. osx trackpad), so adjusting scrolling accordingly
						amount=e.deltaFactor; dur=17;
					}
					_scrollTo($this,(contentPos-(dlt*amount)).toString(),{dir:dir,dur:dur});
				}
			},
			/* -------------------- */
			
			
			/* checks if iframe can be accessed */
			_canAccessIFrameCache=new Object(),
			_canAccessIFrame=function(iframe){
			    var result=false,cacheKey=false,html=null;
			    if(iframe===undefined){
					cacheKey="#empty";
			    }else if($(iframe).attr("id")!==undefined){
					cacheKey=$(iframe).attr("id");
			    }
				if(cacheKey!==false && _canAccessIFrameCache[cacheKey]!==undefined){
					return _canAccessIFrameCache[cacheKey];
				}
				if(!iframe){
					try{
						var doc=top.document;
						html=doc.body.innerHTML;
					}catch(err){/* do nothing */}
					result=(html!==null);
				}else{
					try{
						var doc=iframe.contentDocument || iframe.contentWindow.document;
						html=doc.body.innerHTML;
					}catch(err){/* do nothing */}
					result=(html!==null);
				}
				if(cacheKey!==false){_canAccessIFrameCache[cacheKey]=result;}
				return result;
			},
			/* -------------------- */
			
			
			/* switches iframe's pointer-events property (drag, mousewheel etc. over cross-domain iframes) */
			_iframe=function(evt){
				var el=this.find("iframe");
				if(!el.length){return;} /* check if content contains iframes */
				var val=!evt ? "none" : "auto";
				el.css("pointer-events",val); /* for IE11, iframe's display property should not be "block" */
			},
			/* -------------------- */
			
			
			/* disables mouse-wheel when hovering specific elements like select, datalist etc. */
			_disableMousewheel=function(el,target){
				var tag=target.nodeName.toLowerCase(),
					tags=el.data(pluginPfx).opt.mouseWheel.disableOver,
					/* elements that require focus */
					focusTags=["select","textarea"];
				return $.inArray(tag,tags) > -1 && !($.inArray(tag,focusTags) > -1 && !$(target).is(":focus"));
			},
			/* -------------------- */
			
			
			/* 
			DRAGGER RAIL CLICK EVENT
			scrolls content via dragger rail 
			*/
			_draggerRail=function(){
				var $this=$(this),d=$this.data(pluginPfx),
					namespace=pluginPfx+"_"+d.idx,
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					wrapper=mCSB_container.parent(),
					mCSB_draggerContainer=$(".mCSB_"+d.idx+"_scrollbar ."+classes[12]),
					clickable;
				mCSB_draggerContainer.bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
					touchActive=true;
					if(!$(e.target).hasClass("mCSB_dragger")){clickable=1;}
				}).bind("touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
					touchActive=false;
				}).bind("click."+namespace,function(e){
					if(!clickable){return;}
					clickable=0;
					if($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")){
						_stop($this);
						var el=$(this),mCSB_dragger=el.find(".mCSB_dragger");
						if(el.parent(".mCSB_scrollTools_horizontal").length>0){
							if(!d.overflowed[1]){return;}
							var dir="x",
								clickDir=e.pageX>mCSB_dragger.offset().left ? -1 : 1,
								to=Math.abs(mCSB_container[0].offsetLeft)-(clickDir*(wrapper.width()*0.9));
						}else{
							if(!d.overflowed[0]){return;}
							var dir="y",
								clickDir=e.pageY>mCSB_dragger.offset().top ? -1 : 1,
								to=Math.abs(mCSB_container[0].offsetTop)-(clickDir*(wrapper.height()*0.9));
						}
						_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
					}
				});
			},
			/* -------------------- */
			
			
			/* 
			FOCUS EVENT
			scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)
			*/
			_focus=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					namespace=pluginPfx+"_"+d.idx,
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					wrapper=mCSB_container.parent();
				mCSB_container.bind("focusin."+namespace,function(e){
					var el=$(document.activeElement),
						nested=mCSB_container.find(".mCustomScrollBox").length,
						dur=0;
					if(!el.is(o.advanced.autoScrollOnFocus)){return;}
					_stop($this);
					clearTimeout($this[0]._focusTimeout);
					$this[0]._focusTimer=nested ? (dur+17)*nested : 0;
					$this[0]._focusTimeout=setTimeout(function(){
						var	to=[_childPos(el)[0],_childPos(el)[1]],
							contentPos=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft],
							isVisible=[
								(contentPos[0]+to[0]>=0 && contentPos[0]+to[0]<wrapper.height()-el.outerHeight(false)),
								(contentPos[1]+to[1]>=0 && contentPos[0]+to[1]<wrapper.width()-el.outerWidth(false))
							],
							overwrite=(o.axis==="yx" && !isVisible[0] && !isVisible[1]) ? "none" : "all";
						if(o.axis!=="x" && !isVisible[0]){
							_scrollTo($this,to[0].toString(),{dir:"y",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
						}
						if(o.axis!=="y" && !isVisible[1]){
							_scrollTo($this,to[1].toString(),{dir:"x",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
						}
					},$this[0]._focusTimer);
				});
			},
			/* -------------------- */
			
			
			/* sets content wrapper scrollTop/scrollLeft always to 0 */
			_wrapperScroll=function(){
				var $this=$(this),d=$this.data(pluginPfx),
					namespace=pluginPfx+"_"+d.idx,
					wrapper=$("#mCSB_"+d.idx+"_container").parent();
				wrapper.bind("scroll."+namespace,function(e){
					if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){
						$(".mCSB_"+d.idx+"_scrollbar").css("visibility","hidden"); /* hide scrollbar(s) */
					}
				});
			},
			/* -------------------- */
			
			
			/* 
			BUTTONS EVENTS
			scrolls content via up, down, left and right buttons 
			*/
			_buttons=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
					namespace=pluginPfx+"_"+d.idx,
					sel=".mCSB_"+d.idx+"_scrollbar",
					btn=$(sel+">a");
				btn.bind("contextmenu."+namespace,function(e){
					e.preventDefault(); //prevent right click
				}).bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace+" mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace+" mouseout."+namespace+" pointerout."+namespace+" MSPointerOut."+namespace+" click."+namespace,function(e){
					e.preventDefault();
					if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
					var btnClass=$(this).attr("class");
					seq.type=o.scrollButtons.scrollType;
					switch(e.type){
						case "mousedown": case "touchstart": case "pointerdown": case "MSPointerDown":
							if(seq.type==="stepped"){return;}
							touchActive=true;
							d.tweenRunning=false;
							_seq("on",btnClass);
							break;
						case "mouseup": case "touchend": case "pointerup": case "MSPointerUp":
						case "mouseout": case "pointerout": case "MSPointerOut":
							if(seq.type==="stepped"){return;}
							touchActive=false;
							if(seq.dir){_seq("off",btnClass);}
							break;
						case "click":
							if(seq.type!=="stepped" || d.tweenRunning){return;}
							_seq("on",btnClass);
							break;
					}
					function _seq(a,c){
						seq.scrollAmount=o.scrollButtons.scrollAmount;
						_sequentialScroll($this,a,c);
					}
				});
			},
			/* -------------------- */
			
			
			/* 
			KEYBOARD EVENTS
			scrolls content via keyboard 
			Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End
			*/
			_keyboard=function(){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
					namespace=pluginPfx+"_"+d.idx,
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					wrapper=mCSB_container.parent(),
					editables="input,textarea,select,datalist,keygen,[contenteditable='true']",
					iframe=mCSB_container.find("iframe"),
					events=["blur."+namespace+" keydown."+namespace+" keyup."+namespace];
				if(iframe.length){
					iframe.each(function(){
						$(this).bind("load",function(){
							/* bind events on accessible iframes */
							if(_canAccessIFrame(this)){
								$(this.contentDocument || this.contentWindow.document).bind(events[0],function(e){
									_onKeyboard(e);
								});
							}
						});
					});
				}
				mCustomScrollBox.attr("tabindex","0").bind(events[0],function(e){
					_onKeyboard(e);
				});
				function _onKeyboard(e){
					switch(e.type){
						case "blur":
							if(d.tweenRunning && seq.dir){_seq("off",null);}
							break;
						case "keydown": case "keyup":
							var code=e.keyCode ? e.keyCode : e.which,action="on";
							if((o.axis!=="x" && (code===38 || code===40)) || (o.axis!=="y" && (code===37 || code===39))){
								/* up (38), down (40), left (37), right (39) arrows */
								if(((code===38 || code===40) && !d.overflowed[0]) || ((code===37 || code===39) && !d.overflowed[1])){return;}
								if(e.type==="keyup"){action="off";}
								if(!$(document.activeElement).is(editables)){
									e.preventDefault();
									e.stopImmediatePropagation();
									_seq(action,code);
								}
							}else if(code===33 || code===34){
								/* PgUp (33), PgDn (34) */
								if(d.overflowed[0] || d.overflowed[1]){
									e.preventDefault();
									e.stopImmediatePropagation();
								}
								if(e.type==="keyup"){
									_stop($this);
									var keyboardDir=code===34 ? -1 : 1;
									if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
										var dir="x",to=Math.abs(mCSB_container[0].offsetLeft)-(keyboardDir*(wrapper.width()*0.9));
									}else{
										var dir="y",to=Math.abs(mCSB_container[0].offsetTop)-(keyboardDir*(wrapper.height()*0.9));
									}
									_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
								}
							}else if(code===35 || code===36){
								/* End (35), Home (36) */
								if(!$(document.activeElement).is(editables)){
									if(d.overflowed[0] || d.overflowed[1]){
										e.preventDefault();
										e.stopImmediatePropagation();
									}
									if(e.type==="keyup"){
										if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
											var dir="x",to=code===35 ? Math.abs(wrapper.width()-mCSB_container.outerWidth(false)) : 0;
										}else{
											var dir="y",to=code===35 ? Math.abs(wrapper.height()-mCSB_container.outerHeight(false)) : 0;
										}
										_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
									}
								}
							}
							break;
					}
					function _seq(a,c){
						seq.type=o.keyboard.scrollType;
						seq.scrollAmount=o.keyboard.scrollAmount;
						if(seq.type==="stepped" && d.tweenRunning){return;}
						_sequentialScroll($this,a,c);
					}
				}
			},
			/* -------------------- */
			
			
			/* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */
			_sequentialScroll=function(el,action,trigger,e,s){
				var d=el.data(pluginPfx),o=d.opt,seq=d.sequential,
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					once=seq.type==="stepped" ? true : false,
					steplessSpeed=o.scrollInertia < 26 ? 26 : o.scrollInertia, /* 26/1.5=17 */
					steppedSpeed=o.scrollInertia < 1 ? 17 : o.scrollInertia;
				switch(action){
					case "on":
						seq.dir=[
							(trigger===classes[16] || trigger===classes[15] || trigger===39 || trigger===37 ? "x" : "y"),
							(trigger===classes[13] || trigger===classes[15] || trigger===38 || trigger===37 ? -1 : 1)
						];
						_stop(el);
						if(_isNumeric(trigger) && seq.type==="stepped"){return;}
						_on(once);
						break;
					case "off":
						_off();
						if(once || (d.tweenRunning && seq.dir)){
							_on(true);
						}
						break;
				}
				
				/* starts sequence */
				function _on(once){
					if(o.snapAmount){seq.scrollAmount=!(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0]==="x" ? o.snapAmount[1] : o.snapAmount[0];} /* scrolling snapping */
					var c=seq.type!=="stepped", /* continuous scrolling */
						t=s ? s : !once ? 1000/60 : c ? steplessSpeed/1.5 : steppedSpeed, /* timer */
						m=!once ? 2.5 : c ? 7.5 : 40, /* multiplier */
						contentPos=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)],
						ratio=[d.scrollRatio.y>10 ? 10 : d.scrollRatio.y,d.scrollRatio.x>10 ? 10 : d.scrollRatio.x],
						amount=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*(ratio[1]*m)) : contentPos[0]+(seq.dir[1]*(ratio[0]*m)),
						px=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*parseInt(seq.scrollAmount)) : contentPos[0]+(seq.dir[1]*parseInt(seq.scrollAmount)),
						to=seq.scrollAmount!=="auto" ? px : amount,
						easing=e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
						onComplete=!once ? false : true;
					if(once && t<17){
						to=seq.dir[0]==="x" ? contentPos[1] : contentPos[0];
					}
					_scrollTo(el,to.toString(),{dir:seq.dir[0],scrollEasing:easing,dur:t,onComplete:onComplete});
					if(once){
						seq.dir=false;
						return;
					}
					clearTimeout(seq.step);
					seq.step=setTimeout(function(){
						_on();
					},t);
				}
				/* stops sequence */
				function _off(){
					clearTimeout(seq.step);
					_delete(seq,"step");
					_stop(el);
				}
			},
			/* -------------------- */
			
			
			/* returns a yx array from value */
			_arr=function(val){
				var o=$(this).data(pluginPfx).opt,vals=[];
				if(typeof val==="function"){val=val();} /* check if the value is a single anonymous function */
				/* check if value is object or array, its length and create an array with yx values */
				if(!(val instanceof Array)){ /* object value (e.g. {y:"100",x:"100"}, 100 etc.) */
					vals[0]=val.y ? val.y : val.x || o.axis==="x" ? null : val;
					vals[1]=val.x ? val.x : val.y || o.axis==="y" ? null : val;
				}else{ /* array value (e.g. [100,100]) */
					vals=val.length>1 ? [val[0],val[1]] : o.axis==="x" ? [null,val[0]] : [val[0],null];
				}
				/* check if array values are anonymous functions */
				if(typeof vals[0]==="function"){vals[0]=vals[0]();}
				if(typeof vals[1]==="function"){vals[1]=vals[1]();}
				return vals;
			},
			/* -------------------- */
			
			
			/* translates values (e.g. "top", 100, "100px", "#id") to actual scroll-to positions */
			_to=function(val,dir){
				if(val==null || typeof val=="undefined"){return;}
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					wrapper=mCSB_container.parent(),
					t=typeof val;
				if(!dir){dir=o.axis==="x" ? "x" : "y";}
				var contentLength=dir==="x" ? mCSB_container.outerWidth(false)-wrapper.width() : mCSB_container.outerHeight(false)-wrapper.height(),
					contentPos=dir==="x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
					cssProp=dir==="x" ? "left" : "top";
				switch(t){
					case "function": /* this currently is not used. Consider removing it */
						return val();
						break;
					case "object": /* js/jquery object */
						var obj=val.jquery ? val : $(val);
						if(!obj.length){return;}
						return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
						break;
					case "string": case "number":
						if(_isNumeric(val)){ /* numeric value */
							return Math.abs(val);
						}else if(val.indexOf("%")!==-1){ /* percentage value */
							return Math.abs(contentLength*parseInt(val)/100);
						}else if(val.indexOf("-=")!==-1){ /* decrease value */
							return Math.abs(contentPos-parseInt(val.split("-=")[1]));
						}else if(val.indexOf("+=")!==-1){ /* inrease value */
							var p=(contentPos+parseInt(val.split("+=")[1]));
							return p>=0 ? 0 : Math.abs(p);
						}else if(val.indexOf("px")!==-1 && _isNumeric(val.split("px")[0])){ /* pixels string value (e.g. "100px") */
							return Math.abs(val.split("px")[0]);
						}else{
							if(val==="top" || val==="left"){ /* special strings */
								return 0;
							}else if(val==="bottom"){
								return Math.abs(wrapper.height()-mCSB_container.outerHeight(false));
							}else if(val==="right"){
								return Math.abs(wrapper.width()-mCSB_container.outerWidth(false));
							}else if(val==="first" || val==="last"){
								var obj=mCSB_container.find(":"+val);
								return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
							}else{
								if($(val).length){ /* jquery selector */
									return dir==="x" ? _childPos($(val))[1] : _childPos($(val))[0];
								}else{ /* other values (e.g. "100em") */
									mCSB_container.css(cssProp,val);
									methods.update.call(null,$this[0]);
									return;
								}
							}
						}
						break;
				}
			},
			/* -------------------- */
			
			
			/* calls the update method automatically */
			_autoUpdate=function(rem){
				var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
					mCSB_container=$("#mCSB_"+d.idx+"_container");
				if(rem){
					/* 
					removes autoUpdate timer 
					usage: _autoUpdate.call(this,"remove");
					*/
					clearTimeout(mCSB_container[0].autoUpdate);
					_delete(mCSB_container[0],"autoUpdate");
					return;
				}
				upd();
				function upd(){
					clearTimeout(mCSB_container[0].autoUpdate);
					if($this.parents("html").length===0){
						/* check element in dom tree */
						$this=null;
						return;
					}
					mCSB_container[0].autoUpdate=setTimeout(function(){
						/* update on specific selector(s) length and size change */
						if(o.advanced.updateOnSelectorChange){
							d.poll.change.n=sizesSum();
							if(d.poll.change.n!==d.poll.change.o){
								d.poll.change.o=d.poll.change.n;
								doUpd(3);
								return;
							}
						}
						/* update on main element and scrollbar size changes */
						if(o.advanced.updateOnContentResize){
							d.poll.size.n=$this[0].scrollHeight+$this[0].scrollWidth+mCSB_container[0].offsetHeight+$this[0].offsetHeight+$this[0].offsetWidth;
							if(d.poll.size.n!==d.poll.size.o){
								d.poll.size.o=d.poll.size.n;
								doUpd(1);
								return;
							}
						}
						/* update on image load */
						if(o.advanced.updateOnImageLoad){
							if(!(o.advanced.updateOnImageLoad==="auto" && o.axis==="y")){ //by default, it doesn't run on vertical content
								d.poll.img.n=mCSB_container.find("img").length;
								if(d.poll.img.n!==d.poll.img.o){
									d.poll.img.o=d.poll.img.n;
									mCSB_container.find("img").each(function(){
										imgLoader(this);
									});
									return;
								}
							}
						}
						if(o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad){upd();}
					},o.advanced.autoUpdateTimeout);
				}
				/* a tiny image loader */
				function imgLoader(el){
					if($(el).hasClass(classes[2])){doUpd(); return;}
					var img=new Image();
					function createDelegate(contextObject,delegateMethod){
						return function(){return delegateMethod.apply(contextObject,arguments);}
					}
					function imgOnLoad(){
						this.onload=null;
						$(el).addClass(classes[2]);
						doUpd(2);
					}
					img.onload=createDelegate(img,imgOnLoad);
					img.src=el.src;
				}
				/* returns the total height and width sum of all elements matching the selector */
				function sizesSum(){
					if(o.advanced.updateOnSelectorChange===true){o.advanced.updateOnSelectorChange="*";}
					var total=0,sel=mCSB_container.find(o.advanced.updateOnSelectorChange);
					if(o.advanced.updateOnSelectorChange && sel.length>0){sel.each(function(){total+=this.offsetHeight+this.offsetWidth;});}
					return total;
				}
				/* calls the update method */
				function doUpd(cb){
					clearTimeout(mCSB_container[0].autoUpdate);
					methods.update.call(null,$this[0],cb);
				}
			},
			/* -------------------- */
			
			
			/* snaps scrolling to a multiple of a pixels number */
			_snapAmount=function(to,amount,offset){
				return (Math.round(to/amount)*amount-offset); 
			},
			/* -------------------- */
			
			
			/* stops content and scrollbar animations */
			_stop=function(el){
				var d=el.data(pluginPfx),
					sel=$("#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal");
				sel.each(function(){
					_stopTween.call(this);
				});
			},
			/* -------------------- */
			
			
			/* 
			ANIMATES CONTENT 
			This is where the actual scrolling happens
			*/
			_scrollTo=function(el,to,options){
				var d=el.data(pluginPfx),o=d.opt,
					defaults={
						trigger:"internal",
						dir:"y",
						scrollEasing:"mcsEaseOut",
						drag:false,
						dur:o.scrollInertia,
						overwrite:"all",
						callbacks:true,
						onStart:true,
						onUpdate:true,
						onComplete:true
					},
					options=$.extend(defaults,options),
					dur=[options.dur,(options.drag ? 0 : options.dur)],
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_container=$("#mCSB_"+d.idx+"_container"),
					wrapper=mCSB_container.parent(),
					totalScrollOffsets=o.callbacks.onTotalScrollOffset ? _arr.call(el,o.callbacks.onTotalScrollOffset) : [0,0],
					totalScrollBackOffsets=o.callbacks.onTotalScrollBackOffset ? _arr.call(el,o.callbacks.onTotalScrollBackOffset) : [0,0];
				d.trigger=options.trigger;
				if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){ /* always reset scrollTop/Left */
					$(".mCSB_"+d.idx+"_scrollbar").css("visibility","visible");
					wrapper.scrollTop(0).scrollLeft(0);
				}
				if(to==="_resetY" && !d.contentReset.y){
					/* callbacks: onOverflowYNone */
					if(_cb("onOverflowYNone")){o.callbacks.onOverflowYNone.call(el[0]);}
					d.contentReset.y=1;
				}
				if(to==="_resetX" && !d.contentReset.x){
					/* callbacks: onOverflowXNone */
					if(_cb("onOverflowXNone")){o.callbacks.onOverflowXNone.call(el[0]);}
					d.contentReset.x=1;
				}
				if(to==="_resetY" || to==="_resetX"){return;}
				if((d.contentReset.y || !el[0].mcs) && d.overflowed[0]){
					/* callbacks: onOverflowY */
					if(_cb("onOverflowY")){o.callbacks.onOverflowY.call(el[0]);}
					d.contentReset.x=null;
				}
				if((d.contentReset.x || !el[0].mcs) && d.overflowed[1]){
					/* callbacks: onOverflowX */
					if(_cb("onOverflowX")){o.callbacks.onOverflowX.call(el[0]);}
					d.contentReset.x=null;
				}
				if(o.snapAmount){ /* scrolling snapping */
					var snapAmount=!(o.snapAmount instanceof Array) ? o.snapAmount : options.dir==="x" ? o.snapAmount[1] : o.snapAmount[0];
					to=_snapAmount(to,snapAmount,o.snapOffset);
				}
				switch(options.dir){
					case "x":
						var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_horizontal"),
							property="left",
							contentPos=mCSB_container[0].offsetLeft,
							limit=[
								mCustomScrollBox.width()-mCSB_container.outerWidth(false),
								mCSB_dragger.parent().width()-mCSB_dragger.width()
							],
							scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.x)],
							tso=totalScrollOffsets[1],
							tsbo=totalScrollBackOffsets[1],
							totalScrollOffset=tso>0 ? tso/d.scrollRatio.x : 0,
							totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.x : 0;
						break;
					case "y":
						var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_vertical"),
							property="top",
							contentPos=mCSB_container[0].offsetTop,
							limit=[
								mCustomScrollBox.height()-mCSB_container.outerHeight(false),
								mCSB_dragger.parent().height()-mCSB_dragger.height()
							],
							scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.y)],
							tso=totalScrollOffsets[0],
							tsbo=totalScrollBackOffsets[0],
							totalScrollOffset=tso>0 ? tso/d.scrollRatio.y : 0,
							totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.y : 0;
						break;
				}
				if(scrollTo[1]<0 || (scrollTo[0]===0 && scrollTo[1]===0)){
					scrollTo=[0,0];
				}else if(scrollTo[1]>=limit[1]){
					scrollTo=[limit[0],limit[1]];
				}else{
					scrollTo[0]=-scrollTo[0];
				}
				if(!el[0].mcs){
					_mcs();  /* init mcs object (once) to make it available before callbacks */
					if(_cb("onInit")){o.callbacks.onInit.call(el[0]);} /* callbacks: onInit */
				}
				clearTimeout(mCSB_container[0].onCompleteTimeout);
				_tweenTo(mCSB_dragger[0],property,Math.round(scrollTo[1]),dur[1],options.scrollEasing);
				if(!d.tweenRunning && ((contentPos===0 && scrollTo[0]>=0) || (contentPos===limit[0] && scrollTo[0]<=limit[0]))){return;}
				_tweenTo(mCSB_container[0],property,Math.round(scrollTo[0]),dur[0],options.scrollEasing,options.overwrite,{
					onStart:function(){
						if(options.callbacks && options.onStart && !d.tweenRunning){
							/* callbacks: onScrollStart */
							if(_cb("onScrollStart")){_mcs(); o.callbacks.onScrollStart.call(el[0]);}
							d.tweenRunning=true;
							_onDragClasses(mCSB_dragger);
							d.cbOffsets=_cbOffsets();
						}
					},onUpdate:function(){
						if(options.callbacks && options.onUpdate){
							/* callbacks: whileScrolling */
							if(_cb("whileScrolling")){_mcs(); o.callbacks.whileScrolling.call(el[0]);}
						}
					},onComplete:function(){
						if(options.callbacks && options.onComplete){
							if(o.axis==="yx"){clearTimeout(mCSB_container[0].onCompleteTimeout);}
							var t=mCSB_container[0].idleTimer || 0;
							mCSB_container[0].onCompleteTimeout=setTimeout(function(){
								/* callbacks: onScroll, onTotalScroll, onTotalScrollBack */
								if(_cb("onScroll")){_mcs(); o.callbacks.onScroll.call(el[0]);}
								if(_cb("onTotalScroll") && scrollTo[1]>=limit[1]-totalScrollOffset && d.cbOffsets[0]){_mcs(); o.callbacks.onTotalScroll.call(el[0]);}
								if(_cb("onTotalScrollBack") && scrollTo[1]<=totalScrollBackOffset && d.cbOffsets[1]){_mcs(); o.callbacks.onTotalScrollBack.call(el[0]);}
								d.tweenRunning=false;
								mCSB_container[0].idleTimer=0;
								_onDragClasses(mCSB_dragger,"hide");
							},t);
						}
					}
				});
				/* checks if callback function exists */
				function _cb(cb){
					return d && o.callbacks[cb] && typeof o.callbacks[cb]==="function";
				}
				/* checks whether callback offsets always trigger */
				function _cbOffsets(){
					return [o.callbacks.alwaysTriggerOffsets || contentPos>=limit[0]+tso,o.callbacks.alwaysTriggerOffsets || contentPos<=-tsbo];
				}
				/* 
				populates object with useful values for the user 
				values: 
					content: this.mcs.content
					content top position: this.mcs.top 
					content left position: this.mcs.left 
					dragger top position: this.mcs.draggerTop 
					dragger left position: this.mcs.draggerLeft 
					scrolling y percentage: this.mcs.topPct 
					scrolling x percentage: this.mcs.leftPct 
					scrolling direction: this.mcs.direction
				*/
				function _mcs(){
					var cp=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft], /* content position */
						dp=[mCSB_dragger[0].offsetTop,mCSB_dragger[0].offsetLeft], /* dragger position */
						cl=[mCSB_container.outerHeight(false),mCSB_container.outerWidth(false)], /* content length */
						pl=[mCustomScrollBox.height(),mCustomScrollBox.width()]; /* content parent length */
					el[0].mcs={
						content:mCSB_container, /* original content wrapper as jquery object */
						top:cp[0],left:cp[1],draggerTop:dp[0],draggerLeft:dp[1],
						topPct:Math.round((100*Math.abs(cp[0]))/(Math.abs(cl[0])-pl[0])),leftPct:Math.round((100*Math.abs(cp[1]))/(Math.abs(cl[1])-pl[1])),
						direction:options.dir
					};
					/* 
					this refers to the original element containing the scrollbar(s)
					usage: this.mcs.top, this.mcs.leftPct etc. 
					*/
				}
			},
			/* -------------------- */
			
			
			/* 
			CUSTOM JAVASCRIPT ANIMATION TWEEN 
			Lighter and faster than jquery animate() and css transitions 
			Animates top/left properties and includes easings 
			*/
			_tweenTo=function(el,prop,to,duration,easing,overwrite,callbacks){
				if(!el._mTween){el._mTween={top:{},left:{}};}
				var callbacks=callbacks || {},
					onStart=callbacks.onStart || function(){},onUpdate=callbacks.onUpdate || function(){},onComplete=callbacks.onComplete || function(){},
					startTime=_getTime(),_delay,progress=0,from=el.offsetTop,elStyle=el.style,_request,tobj=el._mTween[prop];
				if(prop==="left"){from=el.offsetLeft;}
				var diff=to-from;
				tobj.stop=0;
				if(overwrite!=="none"){_cancelTween();}
				_startTween();
				function _step(){
					if(tobj.stop){return;}
					if(!progress){onStart.call();}
					progress=_getTime()-startTime;
					_tween();
					if(progress>=tobj.time){
						tobj.time=(progress>tobj.time) ? progress+_delay-(progress-tobj.time) : progress+_delay-1;
						if(tobj.time<progress+1){tobj.time=progress+1;}
					}
					if(tobj.time<duration){tobj.id=_request(_step);}else{onComplete.call();}
				}
				function _tween(){
					if(duration>0){
						tobj.currVal=_ease(tobj.time,from,diff,duration,easing);
						elStyle[prop]=Math.round(tobj.currVal)+"px";
					}else{
						elStyle[prop]=to+"px";
					}
					onUpdate.call();
				}
				function _startTween(){
					_delay=1000/60;
					tobj.time=progress+_delay;
					_request=(!window.requestAnimationFrame) ? function(f){_tween(); return setTimeout(f,0.01);} : window.requestAnimationFrame;
					tobj.id=_request(_step);
				}
				function _cancelTween(){
					if(tobj.id==null){return;}
					if(!window.requestAnimationFrame){clearTimeout(tobj.id);
					}else{window.cancelAnimationFrame(tobj.id);}
					tobj.id=null;
				}
				function _ease(t,b,c,d,type){
					switch(type){
						case "linear": case "mcsLinear":
							return c*t/d + b;
							break;
						case "mcsLinearOut":
							t/=d; t--; return c * Math.sqrt(1 - t*t) + b;
							break;
						case "easeInOutSmooth":
							t/=d/2;
							if(t<1) return c/2*t*t + b;
							t--;
							return -c/2 * (t*(t-2) - 1) + b;
							break;
						case "easeInOutStrong":
							t/=d/2;
							if(t<1) return c/2 * Math.pow( 2, 10 * (t - 1) ) + b;
							t--;
							return c/2 * ( -Math.pow( 2, -10 * t) + 2 ) + b;
							break;
						case "easeInOut": case "mcsEaseInOut":
							t/=d/2;
							if(t<1) return c/2*t*t*t + b;
							t-=2;
							return c/2*(t*t*t + 2) + b;
							break;
						case "easeOutSmooth":
							t/=d; t--;
							return -c * (t*t*t*t - 1) + b;
							break;
						case "easeOutStrong":
							return c * ( -Math.pow( 2, -10 * t/d ) + 1 ) + b;
							break;
						case "easeOut": case "mcsEaseOut": default:
							var ts=(t/=d)*t,tc=ts*t;
							return b+c*(0.499999999999997*tc*ts + -2.5*ts*ts + 5.5*tc + -6.5*ts + 4*t);
					}
				}
			},
			/* -------------------- */
			
			
			/* returns current time */
			_getTime=function(){
				if(window.performance && window.performance.now){
					return window.performance.now();
				}else{
					if(window.performance && window.performance.webkitNow){
						return window.performance.webkitNow();
					}else{
						if(Date.now){return Date.now();}else{return new Date().getTime();}
					}
				}
			},
			/* -------------------- */
			
			
			/* stops a tween */
			_stopTween=function(){
				var el=this;
				if(!el._mTween){el._mTween={top:{},left:{}};}
				var props=["top","left"];
				for(var i=0; i<props.length; i++){
					var prop=props[i];
					if(el._mTween[prop].id){
						if(!window.requestAnimationFrame){clearTimeout(el._mTween[prop].id);
						}else{window.cancelAnimationFrame(el._mTween[prop].id);}
						el._mTween[prop].id=null;
						el._mTween[prop].stop=1;
					}
				}
			},
			/* -------------------- */
			
			
			/* deletes a property (avoiding the exception thrown by IE) */
			_delete=function(c,m){
				try{delete c[m];}catch(e){c[m]=null;}
			},
			/* -------------------- */
			
			
			/* detects left mouse button */
			_mouseBtnLeft=function(e){
				return !(e.which && e.which!==1);
			},
			/* -------------------- */
			
			
			/* detects if pointer type event is touch */
			_pointerTouch=function(e){
				var t=e.originalEvent.pointerType;
				return !(t && t!=="touch" && t!==2);
			},
			/* -------------------- */
			
			
			/* checks if value is numeric */
			_isNumeric=function(val){
				return !isNaN(parseFloat(val)) && isFinite(val);
			},
			/* -------------------- */
			
			
			/* returns element position according to content */
			_childPos=function(el){
				var p=el.parents(".mCSB_container");
				return [el.offset().top-p.offset().top,el.offset().left-p.offset().left];
			},
			/* -------------------- */
			
			
			/* checks if browser tab is hidden/inactive via Page Visibility API */
			_isTabHidden=function(){
				var prop=_getHiddenProp();
				if(!prop) return false;
				return document[prop];
				function _getHiddenProp(){
					var pfx=["webkit","moz","ms","o"];
					if("hidden" in document) return "hidden"; //natively supported
					for(var i=0; i<pfx.length; i++){ //prefixed
					    if((pfx[i]+"Hidden") in document) 
					        return pfx[i]+"Hidden";
					}
					return null; //not supported
				}
			};
			/* -------------------- */
			
		
		
		
		
		/* 
		----------------------------------------
		PLUGIN SETUP 
		----------------------------------------
		*/
		
		/* plugin constructor functions */
		$.fn[pluginNS]=function(method){ /* usage: $(selector).mCustomScrollbar(); */
			if(methods[method]){
				return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
			}else if(typeof method==="object" || !method){
				return methods.init.apply(this,arguments);
			}else{
				$.error("Method "+method+" does not exist");
			}
		};
		$[pluginNS]=function(method){ /* usage: $.mCustomScrollbar(); */
			if(methods[method]){
				return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
			}else if(typeof method==="object" || !method){
				return methods.init.apply(this,arguments);
			}else{
				$.error("Method "+method+" does not exist");
			}
		};
		
		/* 
		allow setting plugin default options. 
		usage: $.mCustomScrollbar.defaults.scrollInertia=500; 
		to apply any changed default options on default selectors (below), use inside document ready fn 
		e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });
		*/
		$[pluginNS].defaults=defaults;
		
		/* 
		add window object (window.mCustomScrollbar) 
		usage: if(window.mCustomScrollbar){console.log("custom scrollbar plugin loaded");}
		*/
		window[pluginNS]=true;
		
		$(window).bind("load",function(){
			
			$(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */
			
			/* extend jQuery expressions */
			$.extend($.expr[":"],{
				/* checks if element is within scrollable viewport */
				mcsInView:$.expr[":"].mcsInView || function(el){
					var $el=$(el),content=$el.parents(".mCSB_container"),wrapper,cPos;
					if(!content.length){return;}
					wrapper=content.parent();
					cPos=[content[0].offsetTop,content[0].offsetLeft];
					return 	cPos[0]+_childPos($el)[0]>=0 && cPos[0]+_childPos($el)[0]<wrapper.height()-$el.outerHeight(false) && 
							cPos[1]+_childPos($el)[1]>=0 && cPos[1]+_childPos($el)[1]<wrapper.width()-$el.outerWidth(false);
				},
				/* checks if element or part of element is in view of scrollable viewport */
				mcsInSight:$.expr[":"].mcsInSight || function(el,i,m){
					var $el=$(el),elD,content=$el.parents(".mCSB_container"),wrapperView,pos,wrapperViewPct,
						pctVals=m[3]==="exact" ? [[1,0],[1,0]] : [[0.9,0.1],[0.6,0.4]];
					if(!content.length){return;}
					elD=[$el.outerHeight(false),$el.outerWidth(false)];
					pos=[content[0].offsetTop+_childPos($el)[0],content[0].offsetLeft+_childPos($el)[1]];
					wrapperView=[content.parent()[0].offsetHeight,content.parent()[0].offsetWidth];
					wrapperViewPct=[elD[0]<wrapperView[0] ? pctVals[0] : pctVals[1],elD[1]<wrapperView[1] ? pctVals[0] : pctVals[1]];
					return 	pos[0]-(wrapperView[0]*wrapperViewPct[0][0])<0 && pos[0]+elD[0]-(wrapperView[0]*wrapperViewPct[0][1])>=0 && 
							pos[1]-(wrapperView[1]*wrapperViewPct[1][0])<0 && pos[1]+elD[1]-(wrapperView[1]*wrapperViewPct[1][1])>=0;
				},
				/* checks if element is overflowed having visible scrollbar(s) */
				mcsOverflow:$.expr[":"].mcsOverflow || function(el){
					var d=$(el).data(pluginPfx);
					if(!d){return;}
					return d.overflowed[0] || d.overflowed[1];
				}
			});
		
		});
	
	}))}));
	}.call(window));

/***/ }
/******/ ]);
//# sourceMappingURL=app.min.js.map
